
F103_UWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009490  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080095a0  080095a0  0000a5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf0  08009bf0  0000b1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009bf0  08009bf0  0000abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf8  08009bf8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf8  08009bf8  0000abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bfc  08009bfc  0000abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009c00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001e8  08009de8  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08009de8  0000b5e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c883  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002676  00000000  00000000  00017a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000001f0  00000000  00000000  0001a10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0001a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  0001b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7ce  00000000  00000000  0001bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102a0  00000000  00000000  000372fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ddd1  00000000  00000000  0004759e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d536f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b14  00000000  00000000  000d53b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000d9ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009588 	.word	0x08009588

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009588 	.word	0x08009588

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2lz>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	2200      	movs	r2, #0
 8000acc:	2300      	movs	r3, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	460d      	mov	r5, r1
 8000ad2:	f7ff ff73 	bl	80009bc <__aeabi_dcmplt>
 8000ad6:	b928      	cbnz	r0, 8000ae4 <__aeabi_d2lz+0x1c>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4629      	mov	r1, r5
 8000adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae0:	f000 b80a 	b.w	8000af8 <__aeabi_d2ulz>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000aea:	f000 f805 	bl	8000af8 <__aeabi_d2ulz>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2ulz>:
 8000af8:	b5d0      	push	{r4, r6, r7, lr}
 8000afa:	2200      	movs	r2, #0
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <__aeabi_d2ulz+0x34>)
 8000afe:	4606      	mov	r6, r0
 8000b00:	460f      	mov	r7, r1
 8000b02:	f7ff fce9 	bl	80004d8 <__aeabi_dmul>
 8000b06:	f7ff ffbf 	bl	8000a88 <__aeabi_d2uiz>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	f7ff fc6a 	bl	80003e4 <__aeabi_ui2d>
 8000b10:	2200      	movs	r2, #0
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <__aeabi_d2ulz+0x38>)
 8000b14:	f7ff fce0 	bl	80004d8 <__aeabi_dmul>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	4639      	mov	r1, r7
 8000b20:	f7ff fb22 	bl	8000168 <__aeabi_dsub>
 8000b24:	f7ff ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b2c:	3df00000 	.word	0x3df00000
 8000b30:	41f00000 	.word	0x41f00000

08000b34 <deca_sleep>:
 */


/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f003 f893 	bl	8003c68 <HAL_Delay>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop

08000b4c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 */
void port_set_dw1000_slowrate(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;  // 500 MBits/s
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <port_set_dw1000_slowrate+0x20>)
 8000b52:	2230      	movs	r2, #48	@ 0x30
 8000b54:	61da      	str	r2, [r3, #28]
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;   // 1 MHz
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;   // 2 MHz


    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <port_set_dw1000_slowrate+0x20>)
 8000b58:	f003 ff96 	bl	8004a88 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <port_set_dw1000_slowrate+0x1a>

    	while(1){};
 8000b62:	bf00      	nop
 8000b64:	e7fd      	b.n	8000b62 <port_set_dw1000_slowrate+0x16>
	}
    //HAL_SPI_Init(&hspi1);
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000308 	.word	0x20000308

08000b70 <port_set_dw1000_fastrate>:
 *          note: hspi1 is clocked from 72MHz
 *          1Mhz
 */

void port_set_dw1000_fastrate(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;    // 1  MHz
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;    // 2  MHz
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // 4  MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;     // 8  MHz
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <port_set_dw1000_fastrate+0x20>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	61da      	str	r2, [r3, #28]
//  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;     // 16 MHz
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <port_set_dw1000_fastrate+0x20>)
 8000b7c:	f003 ff84 	bl	8004a88 <HAL_SPI_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <port_set_dw1000_fastrate+0x1a>
		while(1){};
 8000b86:	bf00      	nop
 8000b88:	e7fd      	b.n	8000b86 <port_set_dw1000_fastrate+0x16>
	}
	//HAL_SPI_Init(&hspi1);
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000308 	.word	0x20000308

08000b94 <writetospi>:
#pragma GCC optimize ("03")
int writetospi(uint16 headerLength,
			   const uint8 *headerBuffer,
			   uint32 bodyLength,
			   const uint8 *bodyBuffer)
{
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	4604      	mov	r4, r0
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4615      	mov	r5, r2
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	4689      	mov	r9, r1
	decaIrqStatus_t stat;
	stat = decamutexon();
 8000ba2:	f001 f83f 	bl	8001c24 <decamutexon>

	uint8_t headBuf[headerLength];
 8000ba6:	466a      	mov	r2, sp
 8000ba8:	1de3      	adds	r3, r4, #7
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8000bb0:	469d      	mov	sp, r3
	stat = decamutexon();
 8000bb2:	4606      	mov	r6, r0
	uint8_t headBuf[headerLength];
 8000bb4:	46ea      	mov	sl, sp
	for (int i = 0; i < headerLength; ++i) {
 8000bb6:	b124      	cbz	r4, 8000bc2 <writetospi+0x2e>
		headBuf[i] = headerBuffer[i];
 8000bb8:	4649      	mov	r1, r9
 8000bba:	4622      	mov	r2, r4
 8000bbc:	4668      	mov	r0, sp
 8000bbe:	f005 fd4a 	bl	8006656 <memcpy>
	}
	uint8_t bodyBuf[bodyLength];
 8000bc2:	1dea      	adds	r2, r5, #7
 8000bc4:	f022 0207 	bic.w	r2, r2, #7
 8000bc8:	ebad 0d02 	sub.w	sp, sp, r2
 8000bcc:	46e9      	mov	r9, sp
	for (int i = 0; i < bodyLength; ++i) {
 8000bce:	b125      	cbz	r5, 8000bda <writetospi+0x46>
		bodyBuf[i] = bodyBuffer[i];
 8000bd0:	4641      	mov	r1, r8
 8000bd2:	462a      	mov	r2, r5
 8000bd4:	4668      	mov	r0, sp
 8000bd6:	f005 fd3e 	bl	8006656 <memcpy>
	}

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4813      	ldr	r0, [pc, #76]	@ (8000c2c <writetospi+0x98>)
 8000be0:	f003 fb2a 	bl	8004238 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, headBuf, headerLength, 5);
 8000be4:	4622      	mov	r2, r4
 8000be6:	2305      	movs	r3, #5
 8000be8:	4651      	mov	r1, sl
 8000bea:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <writetospi+0x9c>)
 8000bec:	f003 ffd0 	bl	8004b90 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, headBuf, headerLength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {}
 8000bf0:	4c0f      	ldr	r4, [pc, #60]	@ (8000c30 <writetospi+0x9c>)
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f004 fbd2 	bl	800539c <HAL_SPI_GetState>
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d0fa      	beq.n	8000bf2 <writetospi+0x5e>

	HAL_SPI_Transmit(&hspi1, bodyBuf, bodyLength, 5);
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	4649      	mov	r1, r9
 8000c00:	480b      	ldr	r0, [pc, #44]	@ (8000c30 <writetospi+0x9c>)
 8000c02:	b2aa      	uxth	r2, r5
 8000c04:	f003 ffc4 	bl	8004b90 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, bodyBuf, bodyLength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {}
 8000c08:	4c09      	ldr	r4, [pc, #36]	@ (8000c30 <writetospi+0x9c>)
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f004 fbc6 	bl	800539c <HAL_SPI_GetState>
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d0fa      	beq.n	8000c0a <writetospi+0x76>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <writetospi+0x98>)
 8000c18:	4611      	mov	r1, r2
 8000c1a:	f003 fb0d 	bl	8004238 <HAL_GPIO_WritePin>

	decamutexoff(stat);
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f001 f811 	bl	8001c46 <decamutexoff>
	return 0;
}
 8000c24:	2000      	movs	r0, #0
 8000c26:	46bd      	mov	sp, r7
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	20000308 	.word	0x20000308

08000c34 <readfromspi>:


// This is a new READSPI form my friend Beacon.

#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer) {
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	4604      	mov	r4, r0
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	4698      	mov	r8, r3
 8000c40:	4689      	mov	r9, r1
	decaIrqStatus_t stat;
	stat = decamutexon();
 8000c42:	f000 ffef 	bl	8001c24 <decamutexon>

	uint8_t headBuf[headerLength]; //make a copy
 8000c46:	466a      	mov	r2, sp
 8000c48:	1de3      	adds	r3, r4, #7
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8000c50:	469d      	mov	sp, r3
	stat = decamutexon();
 8000c52:	4606      	mov	r6, r0
	uint8_t headBuf[headerLength]; //make a copy
 8000c54:	46ea      	mov	sl, sp
	for (int i = 0; i < headerLength; ++i)
 8000c56:	b124      	cbz	r4, 8000c62 <readfromspi+0x2e>
	{
		headBuf[i] = headerBuffer[i];
 8000c58:	4649      	mov	r1, r9
 8000c5a:	4622      	mov	r2, r4
 8000c5c:	4668      	mov	r0, sp
 8000c5e:	f005 fcfa 	bl	8006656 <memcpy>
	}

	for (int i = 0; i < readlength; ++i)
 8000c62:	b125      	cbz	r5, 8000c6e <readfromspi+0x3a>
	{
		readBuffer[i] = 0;
 8000c64:	462a      	mov	r2, r5
 8000c66:	2100      	movs	r1, #0
 8000c68:	4640      	mov	r0, r8
 8000c6a:	f005 fc66 	bl	800653a <memset>
	}

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2101      	movs	r1, #1
 8000c72:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <readfromspi+0x8c>)
 8000c74:	f003 fae0 	bl	8004238 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, headBuf, headerLength, 5);
 8000c78:	4622      	mov	r2, r4
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	4651      	mov	r1, sl
 8000c7e:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <readfromspi+0x90>)
 8000c80:	f003 ff86 	bl	8004b90 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, headBuf, headerLength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {}
 8000c84:	4c0f      	ldr	r4, [pc, #60]	@ (8000cc4 <readfromspi+0x90>)
 8000c86:	4620      	mov	r0, r4
 8000c88:	f004 fb88 	bl	800539c <HAL_SPI_GetState>
 8000c8c:	2802      	cmp	r0, #2
 8000c8e:	d0fa      	beq.n	8000c86 <readfromspi+0x52>

	HAL_SPI_Receive(&hspi1, readBuffer, readlength, 5);
 8000c90:	2305      	movs	r3, #5
 8000c92:	4641      	mov	r1, r8
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <readfromspi+0x90>)
 8000c96:	b2aa      	uxth	r2, r5
 8000c98:	f004 f8be 	bl	8004e18 <HAL_SPI_Receive>
//	HAL_SPI_Receive(&hspi1, readBuffer, readlength, HAL_MAX_DELAY);
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {}
 8000c9c:	4c09      	ldr	r4, [pc, #36]	@ (8000cc4 <readfromspi+0x90>)
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f004 fb7c 	bl	800539c <HAL_SPI_GetState>
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d0fa      	beq.n	8000c9e <readfromspi+0x6a>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <readfromspi+0x8c>)
 8000cac:	4611      	mov	r1, r2
 8000cae:	f003 fac3 	bl	8004238 <HAL_GPIO_WritePin>

	decamutexoff(stat);
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f000 ffc7 	bl	8001c46 <decamutexoff>

	return 0;
}
 8000cb8:	2000      	movs	r0, #0
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	20000308 	.word	0x20000308

08000cc8 <usleep_1>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep_1(useconds_t usec)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e012      	b.n	8000cfc <usleep_1+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	e004      	b.n	8000ce6 <usleep_1+0x1e>
        {
            __NOP();
 8000cdc:	bf00      	nop
            __NOP();
 8000cde:	bf00      	nop
        for(j=0;j<2;j++)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	bfd4      	ite	le
 8000cec:	2301      	movle	r3, #1
 8000cee:	2300      	movgt	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f2      	bne.n	8000cdc <usleep_1+0x14>
    for(i=0;i<usec;i++)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	bf8c      	ite	hi
 8000d04:	2301      	movhi	r3, #1
 8000d06:	2300      	movls	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1e3      	bne.n	8000cd6 <usleep_1+0xe>
        }
    }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <deca_reset>:


// This is mine deca reset.
void deca_reset(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
	/* ********* */
	// make a header for the reset => KOSTAS
	/* ********* */

	// Configure DW1000 reset pin as open drain output
	GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000d22:	2302      	movs	r3, #2
 8000d24:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d26:	2311      	movs	r3, #17
 8000d28:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <deca_reset+0x5c>)
 8000d34:	f003 f8fc 	bl	8003f30 <HAL_GPIO_Init>


	// Pull the reset pin low for 1 ms
	HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <deca_reset+0x5c>)
 8000d3e:	f003 fa7b 	bl	8004238 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f002 ff90 	bl	8003c68 <HAL_Delay>

	// Configure DW1000 reset pin as input
	GPIO_InitStruct.Pin = DW_RESET_Pin;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <deca_reset+0x5c>)
 8000d5a:	f003 f8e9 	bl	8003f30 <HAL_GPIO_Init>
	 * You can also read the reset pin or enable the MSLP2INIT IRQ to detect
	 * the INIT state being reached */

//	HAL_Delay(1);

	usleep_1(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ffb2 	bl	8000cc8 <usleep_1>

	//put the pin back to output open-drain (not active)
	setup_DW1000RSTnIRQ(0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f001 fdb7 	bl	80028d8 <setup_DW1000RSTnIRQ>

	Sleep(2);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f002 ff7c 	bl	8003c68 <HAL_Delay>


}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010800 	.word	0x40010800

08000d7c <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000d8c:	4ba1      	ldr	r3, [pc, #644]	@ (8001014 <dwt_initialise+0x298>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000d94:	4b9f      	ldr	r3, [pc, #636]	@ (8001014 <dwt_initialise+0x298>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000d9c:	4b9d      	ldr	r3, [pc, #628]	@ (8001014 <dwt_initialise+0x298>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000da4:	4b9b      	ldr	r3, [pc, #620]	@ (8001014 <dwt_initialise+0x298>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8000dac:	4b99      	ldr	r3, [pc, #612]	@ (8001014 <dwt_initialise+0x298>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8000db4:	4b97      	ldr	r3, [pc, #604]	@ (8001014 <dwt_initialise+0x298>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8000dbc:	4b95      	ldr	r3, [pc, #596]	@ (8001014 <dwt_initialise+0x298>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised

    devid = dwt_readdevid();
 8000dc4:	f000 f92c 	bl	8001020 <dwt_readdevid>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a93      	ldr	r2, [pc, #588]	@ (8001018 <dwt_initialise+0x29c>)
 8000dcc:	6013      	str	r3, [r2, #0]
    if (DWT_DEVICE_ID != devid)
 8000dce:	4b92      	ldr	r3, [pc, #584]	@ (8001018 <dwt_initialise+0x29c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a92      	ldr	r2, [pc, #584]	@ (800101c <dwt_initialise+0x2a0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d002      	beq.n	8000dde <dwt_initialise+0x62>
    {
    	return DWT_ERROR ;
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	e115      	b.n	800100a <dwt_initialise+0x28e>
    }


    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <dwt_initialise+0x70>
    {
    	dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000de8:	f000 fede 	bl	8001ba8 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <dwt_initialise+0x84>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <dwt_initialise+0x8a>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 fcdf 	bl	80017c4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000e06:	2204      	movs	r2, #4
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2024      	movs	r0, #36	@ 0x24
 8000e0c:	f000 fc08 	bl	8001620 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d116      	bne.n	8000e48 <dwt_initialise+0xcc>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	f000 fc56 	bl	80016cc <_dwt_otpread>
 8000e20:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d01f      	beq.n	8000e6a <dwt_initialise+0xee>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	2112      	movs	r1, #18
 8000e2e:	202d      	movs	r0, #45	@ 0x2d
 8000e30:	f000 fbf6 	bl	8001620 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000e34:	4b77      	ldr	r3, [pc, #476]	@ (8001014 <dwt_initialise+0x298>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	8ada      	ldrh	r2, [r3, #22]
 8000e3a:	4b76      	ldr	r3, [pc, #472]	@ (8001014 <dwt_initialise+0x298>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e42:	b292      	uxth	r2, r2
 8000e44:	82da      	strh	r2, [r3, #22]
 8000e46:	e010      	b.n	8000e6a <dwt_initialise+0xee>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000e48:	2130      	movs	r1, #48	@ 0x30
 8000e4a:	2028      	movs	r0, #40	@ 0x28
 8000e4c:	f000 fb93 	bl	8001576 <dwt_read32bitoffsetreg>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 8000e56:	d008      	beq.n	8000e6a <dwt_initialise+0xee>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000e58:	4b6e      	ldr	r3, [pc, #440]	@ (8001014 <dwt_initialise+0x298>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	8ada      	ldrh	r2, [r3, #22]
 8000e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001014 <dwt_initialise+0x298>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e66:	b292      	uxth	r2, r2
 8000e68:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <dwt_initialise+0x10c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <dwt_initialise+0x126>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <dwt_initialise+0x126>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000e88:	201e      	movs	r0, #30
 8000e8a:	f000 fc1f 	bl	80016cc <_dwt_otpread>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000e92:	8afb      	ldrh	r3, [r7, #22]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b5e      	ldr	r3, [pc, #376]	@ (8001014 <dwt_initialise+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	72da      	strb	r2, [r3, #11]
 8000ea0:	e003      	b.n	8000eaa <dwt_initialise+0x12e>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <dwt_initialise+0x298>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10b      	bne.n	8000ecc <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8000eb4:	8afb      	ldrh	r3, [r7, #22]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <dwt_initialise+0x146>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8000ec2:	8afb      	ldrh	r3, [r7, #22]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fe94 	bl	8001bf4 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <dwt_initialise+0x16a>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8001014 <dwt_initialise+0x298>)
 8000ed8:	681c      	ldr	r4, [r3, #0]
 8000eda:	2006      	movs	r0, #6
 8000edc:	f000 fbf6 	bl	80016cc <_dwt_otpread>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	e003      	b.n	8000eee <dwt_initialise+0x172>
    }
    else
    {
        pdw1000local->partID = 0;
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8001014 <dwt_initialise+0x298>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <dwt_initialise+0x18c>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000ef8:	4b46      	ldr	r3, [pc, #280]	@ (8001014 <dwt_initialise+0x298>)
 8000efa:	681c      	ldr	r4, [r3, #0]
 8000efc:	2007      	movs	r0, #7
 8000efe:	f000 fbe5 	bl	80016cc <_dwt_otpread>
 8000f02:	4603      	mov	r3, r0
 8000f04:	6063      	str	r3, [r4, #4]
 8000f06:	e003      	b.n	8000f10 <dwt_initialise+0x194>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000f08:	4b42      	ldr	r3, [pc, #264]	@ (8001014 <dwt_initialise+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <dwt_initialise+0x1b0>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f000 fbd6 	bl	80016cc <_dwt_otpread>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b3c      	ldr	r3, [pc, #240]	@ (8001014 <dwt_initialise+0x298>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	721a      	strb	r2, [r3, #8]
 8000f2a:	e003      	b.n	8000f34 <dwt_initialise+0x1b8>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <dwt_initialise+0x298>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d008      	beq.n	8000f50 <dwt_initialise+0x1d4>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000f3e:	2009      	movs	r0, #9
 8000f40:	f000 fbc4 	bl	80016cc <_dwt_otpread>
 8000f44:	4602      	mov	r2, r0
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <dwt_initialise+0x298>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	725a      	strb	r2, [r3, #9]
 8000f4e:	e003      	b.n	8000f58 <dwt_initialise+0x1dc>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <dwt_initialise+0x298>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d121      	bne.n	8000fa6 <dwt_initialise+0x22a>
    {
        if(DWT_LOADUCODE & config)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <dwt_initialise+0x208>
        {
            _dwt_loaducodefromrom();
 8000f6c:	f000 fbfb 	bl	8001766 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <dwt_initialise+0x298>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	8ada      	ldrh	r2, [r3, #22]
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <dwt_initialise+0x298>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	82da      	strh	r2, [r3, #22]
 8000f82:	e01e      	b.n	8000fc2 <dwt_initialise+0x246>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000f84:	2105      	movs	r1, #5
 8000f86:	2036      	movs	r0, #54	@ 0x36
 8000f88:	f000 fb1c 	bl	80015c4 <dwt_read16bitoffsetreg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f96:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	2036      	movs	r0, #54	@ 0x36
 8000fa0:	f000 fb51 	bl	8001646 <dwt_write16bitoffsetreg>
 8000fa4:	e00d      	b.n	8000fc2 <dwt_initialise+0x246>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <dwt_initialise+0x246>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <dwt_initialise+0x298>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	8ada      	ldrh	r2, [r3, #22]
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <dwt_initialise+0x298>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fbfe 	bl	80017c4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	210a      	movs	r1, #10
 8000fcc:	202c      	movs	r0, #44	@ 0x2c
 8000fce:	f000 fb27 	bl	8001620 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read System Configuration (sysconfig) register
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <dwt_initialise+0x298>)
 8000fd4:	681c      	ldr	r4, [r3, #0]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f000 facc 	bl	8001576 <dwt_read32bitoffsetreg>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <dwt_initialise+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <dwt_initialise+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <dwt_initialise+0x298>)
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2008      	movs	r0, #8
 8001000:	f000 fab9 	bl	8001576 <dwt_read32bitoffsetreg>
 8001004:	4603      	mov	r3, r0
 8001006:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001008:	2300      	movs	r3, #0

} // end dwt_initialise()
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	bf00      	nop
 8001014:	20000000 	.word	0x20000000
 8001018:	20000204 	.word	0x20000204
 800101c:	deca0130 	.word	0xdeca0130

08001020 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f000 faa5 	bl	8001576 <dwt_read32bitoffsetreg>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	795b      	ldrb	r3, [r3, #5]
 800104e:	461a      	mov	r2, r3
 8001050:	4ba1      	ldr	r3, [pc, #644]	@ (80012d8 <dwt_configure+0x2a4>)
 8001052:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001056:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	3b01      	subs	r3, #1
 800105e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8001060:	7cfb      	ldrb	r3, [r7, #19]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d002      	beq.n	800106c <dwt_configure+0x38>
 8001066:	7cfb      	ldrb	r3, [r7, #19]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d101      	bne.n	8001070 <dwt_configure+0x3c>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <dwt_configure+0x3e>
 8001070:	2300      	movs	r3, #0
 8001072:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	79db      	ldrb	r3, [r3, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800107c:	4b97      	ldr	r3, [pc, #604]	@ (80012dc <dwt_configure+0x2a8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	4b96      	ldr	r3, [pc, #600]	@ (80012dc <dwt_configure+0x2a8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800108a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800108c:	8abb      	ldrh	r3, [r7, #20]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	82bb      	strh	r3, [r7, #20]
 8001092:	e007      	b.n	80010a4 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8001094:	4b91      	ldr	r3, [pc, #580]	@ (80012dc <dwt_configure+0x2a8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	4b90      	ldr	r3, [pc, #576]	@ (80012dc <dwt_configure+0x2a8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80010a2:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80010a4:	4b8d      	ldr	r3, [pc, #564]	@ (80012dc <dwt_configure+0x2a8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7a12      	ldrb	r2, [r2, #8]
 80010ac:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80010ae:	4b8b      	ldr	r3, [pc, #556]	@ (80012dc <dwt_configure+0x2a8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	4b89      	ldr	r3, [pc, #548]	@ (80012dc <dwt_configure+0x2a8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80010bc:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80010be:	4b87      	ldr	r3, [pc, #540]	@ (80012dc <dwt_configure+0x2a8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80010ce:	4b83      	ldr	r3, [pc, #524]	@ (80012dc <dwt_configure+0x2a8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80010d6:	4b81      	ldr	r3, [pc, #516]	@ (80012dc <dwt_configure+0x2a8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	461a      	mov	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	2004      	movs	r0, #4
 80010e2:	f000 facc 	bl	800167e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80010e6:	8abb      	ldrh	r3, [r7, #20]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f642 0104 	movw	r1, #10244	@ 0x2804
 80010ee:	202e      	movs	r0, #46	@ 0x2e
 80010f0:	f000 faa9 	bl	8001646 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80010f4:	7cbb      	ldrb	r3, [r7, #18]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fb15 	bl	8001726 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80010fc:	7cfb      	ldrb	r3, [r7, #19]
 80010fe:	4a78      	ldr	r2, [pc, #480]	@ (80012e0 <dwt_configure+0x2ac>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	461a      	mov	r2, r3
 8001104:	4b77      	ldr	r3, [pc, #476]	@ (80012e4 <dwt_configure+0x2b0>)
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	461a      	mov	r2, r3
 800110c:	2107      	movs	r1, #7
 800110e:	202b      	movs	r0, #43	@ 0x2b
 8001110:	f000 fab5 	bl	800167e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8001114:	7cfb      	ldrb	r3, [r7, #19]
 8001116:	4a72      	ldr	r2, [pc, #456]	@ (80012e0 <dwt_configure+0x2ac>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	461a      	mov	r2, r3
 800111c:	4b72      	ldr	r3, [pc, #456]	@ (80012e8 <dwt_configure+0x2b4>)
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	461a      	mov	r2, r3
 8001122:	210b      	movs	r1, #11
 8001124:	202b      	movs	r0, #43	@ 0x2b
 8001126:	f000 fa7b 	bl	8001620 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800112a:	7c7b      	ldrb	r3, [r7, #17]
 800112c:	4a6f      	ldr	r2, [pc, #444]	@ (80012ec <dwt_configure+0x2b8>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	461a      	mov	r2, r3
 8001132:	210b      	movs	r1, #11
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f000 fa73 	bl	8001620 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800113a:	7cfb      	ldrb	r3, [r7, #19]
 800113c:	4a68      	ldr	r2, [pc, #416]	@ (80012e0 <dwt_configure+0x2ac>)
 800113e:	5cd3      	ldrb	r3, [r2, r3]
 8001140:	461a      	mov	r2, r3
 8001142:	4b6b      	ldr	r3, [pc, #428]	@ (80012f0 <dwt_configure+0x2bc>)
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	461a      	mov	r2, r3
 800114a:	210c      	movs	r1, #12
 800114c:	2028      	movs	r0, #40	@ 0x28
 800114e:	f000 fa96 	bl	800167e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	79db      	ldrb	r3, [r3, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	799b      	ldrb	r3, [r3, #6]
 800115c:	4619      	mov	r1, r3
 800115e:	4a65      	ldr	r2, [pc, #404]	@ (80012f4 <dwt_configure+0x2c0>)
 8001160:	0043      	lsls	r3, r0, #1
 8001162:	440b      	add	r3, r1
 8001164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001168:	461a      	mov	r2, r3
 800116a:	2102      	movs	r1, #2
 800116c:	2027      	movs	r0, #39	@ 0x27
 800116e:	f000 fa6a 	bl	8001646 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8001172:	7cbb      	ldrb	r3, [r7, #18]
 8001174:	4a60      	ldr	r2, [pc, #384]	@ (80012f8 <dwt_configure+0x2c4>)
 8001176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117a:	461a      	mov	r2, r3
 800117c:	2104      	movs	r1, #4
 800117e:	2027      	movs	r0, #39	@ 0x27
 8001180:	f000 fa61 	bl	8001646 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	79db      	ldrb	r3, [r3, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800118c:	2264      	movs	r2, #100	@ 0x64
 800118e:	2106      	movs	r1, #6
 8001190:	2027      	movs	r0, #39	@ 0x27
 8001192:	f000 fa58 	bl	8001646 <dwt_write16bitoffsetreg>
 8001196:	e018      	b.n	80011ca <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d10a      	bne.n	80011b6 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80011a0:	2210      	movs	r2, #16
 80011a2:	2106      	movs	r1, #6
 80011a4:	2027      	movs	r0, #39	@ 0x27
 80011a6:	f000 fa4e 	bl	8001646 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80011aa:	2210      	movs	r2, #16
 80011ac:	2126      	movs	r1, #38	@ 0x26
 80011ae:	2027      	movs	r0, #39	@ 0x27
 80011b0:	f000 fa36 	bl	8001620 <dwt_write8bitoffsetreg>
 80011b4:	e009      	b.n	80011ca <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80011b6:	2220      	movs	r2, #32
 80011b8:	2106      	movs	r1, #6
 80011ba:	2027      	movs	r0, #39	@ 0x27
 80011bc:	f000 fa43 	bl	8001646 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80011c0:	2228      	movs	r2, #40	@ 0x28
 80011c2:	2126      	movs	r1, #38	@ 0x26
 80011c4:	2027      	movs	r0, #39	@ 0x27
 80011c6:	f000 fa2b 	bl	8001620 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80011ca:	7cbb      	ldrb	r3, [r7, #18]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	78d2      	ldrb	r2, [r2, #3]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4a4a      	ldr	r2, [pc, #296]	@ (80012fc <dwt_configure+0x2c8>)
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	461a      	mov	r2, r3
 80011de:	2108      	movs	r1, #8
 80011e0:	2027      	movs	r0, #39	@ 0x27
 80011e2:	f000 fa4c 	bl	800167e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	895b      	ldrh	r3, [r3, #10]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f241 0241 	movw	r2, #4161	@ 0x1041
 80011f4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	895b      	ldrh	r3, [r3, #10]
 80011fa:	461a      	mov	r2, r3
 80011fc:	2120      	movs	r1, #32
 80011fe:	2027      	movs	r0, #39	@ 0x27
 8001200:	f000 fa21 	bl	8001646 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8001204:	4b3e      	ldr	r3, [pc, #248]	@ (8001300 <dwt_configure+0x2cc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	210c      	movs	r1, #12
 800120c:	2023      	movs	r0, #35	@ 0x23
 800120e:	f000 fa36 	bl	800167e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8001212:	7cbb      	ldrb	r3, [r7, #18]
 8001214:	4a3a      	ldr	r2, [pc, #232]	@ (8001300 <dwt_configure+0x2cc>)
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	461a      	mov	r2, r3
 800121e:	2104      	movs	r1, #4
 8001220:	2023      	movs	r0, #35	@ 0x23
 8001222:	f000 fa10 	bl	8001646 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	799b      	ldrb	r3, [r3, #6]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00d      	beq.n	800124a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	79db      	ldrb	r3, [r3, #7]
 8001232:	461a      	mov	r2, r3
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <dwt_configure+0x2d0>)
 8001236:	5c9b      	ldrb	r3, [r3, r2]
 8001238:	461a      	mov	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	2021      	movs	r0, #33	@ 0x21
 800123e:	f000 f9ef 	bl	8001620 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8001242:	2303      	movs	r3, #3
 8001244:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8001246:	2301      	movs	r3, #1
 8001248:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800124a:	7cfb      	ldrb	r3, [r7, #19]
 800124c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001256:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	049b      	lsls	r3, r3, #18
 800125e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8001262:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	051b      	lsls	r3, r3, #20
 8001268:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800126c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800126e:	7dbb      	ldrb	r3, [r7, #22]
 8001270:	045b      	lsls	r3, r3, #17
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8001276:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	059b      	lsls	r3, r3, #22
 800127e:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8001282:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	795b      	ldrb	r3, [r3, #5]
 8001288:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	2100      	movs	r1, #0
 8001292:	201f      	movs	r0, #31
 8001294:	f000 f9f3 	bl	800167e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	789a      	ldrb	r2, [r3, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	0419      	lsls	r1, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	79db      	ldrb	r3, [r3, #7]
 80012aa:	035a      	lsls	r2, r3, #13
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <dwt_configure+0x2a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <dwt_configure+0x2a8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	461a      	mov	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	2008      	movs	r0, #8
 80012c0:	f000 f9dd 	bl	800167e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80012c4:	2242      	movs	r2, #66	@ 0x42
 80012c6:	2100      	movs	r1, #0
 80012c8:	200d      	movs	r0, #13
 80012ca:	f000 f9a9 	bl	8001620 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	080097e0 	.word	0x080097e0
 80012dc:	20000000 	.word	0x20000000
 80012e0:	08009760 	.word	0x08009760
 80012e4:	08009780 	.word	0x08009780
 80012e8:	08009798 	.word	0x08009798
 80012ec:	080097a0 	.word	0x080097a0
 80012f0:	08009768 	.word	0x08009768
 80012f4:	080097b0 	.word	0x080097b0
 80012f8:	080097bc 	.word	0x080097bc
 80012fc:	080097c0 	.word	0x080097c0
 8001300:	080097a4 	.word	0x080097a4
 8001304:	080097ac 	.word	0x080097ac

08001308 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	461a      	mov	r2, r3
 8001316:	f641 0104 	movw	r1, #6148	@ 0x1804
 800131a:	202e      	movs	r0, #46	@ 0x2e
 800131c:	f000 f993 	bl	8001646 <dwt_write16bitoffsetreg>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	461a      	mov	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	2018      	movs	r0, #24
 800133a:	f000 f984 	bl	8001646 <dwt_write16bitoffsetreg>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	6039      	str	r1, [r7, #0]
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8001356:	88ba      	ldrh	r2, [r7, #4]
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4413      	add	r3, r2
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001360:	dc09      	bgt.n	8001376 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	3b02      	subs	r3, #2
 8001366:	461a      	mov	r2, r3
 8001368:	88b9      	ldrh	r1, [r7, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2009      	movs	r0, #9
 800136e:	f000 f857 	bl	8001420 <dwt_writetodevice>
        return DWT_SUCCESS;
 8001372:	2300      	movs	r3, #0
 8001374:	e001      	b.n	800137a <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	603a      	str	r2, [r7, #0]
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	460b      	mov	r3, r1
 8001392:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <dwt_writetxfctrl+0x3c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	431a      	orrs	r2, r3
 800139e:	88bb      	ldrh	r3, [r7, #4]
 80013a0:	059b      	lsls	r3, r3, #22
 80013a2:	431a      	orrs	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	03db      	lsls	r3, r3, #15
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	2100      	movs	r1, #0
 80013b0:	2008      	movs	r0, #8
 80013b2:	f000 f964 	bl	800167e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000

080013c4 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	8839      	ldrh	r1, [r7, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2011      	movs	r0, #17
 80013dc:	f000 f877 	bl	80014ce <dwt_readfromdevice>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2205      	movs	r2, #5
 80013f4:	2100      	movs	r1, #0
 80013f6:	2017      	movs	r0, #23
 80013f8:	f000 f869 	bl	80014ce <dwt_readfromdevice>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	2100      	movs	r1, #0
 8001412:	2015      	movs	r0, #21
 8001414:	f000 f85b 	bl	80014ce <dwt_readfromdevice>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60ba      	str	r2, [r7, #8]
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4603      	mov	r3, r0
 800142c:	81fb      	strh	r3, [r7, #14]
 800142e:	460b      	mov	r3, r1
 8001430:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001436:	89bb      	ldrh	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10c      	bne.n	8001456 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	6179      	str	r1, [r7, #20]
 8001446:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	3318      	adds	r3, #24
 800144e:	443b      	add	r3, r7
 8001450:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001454:	e02f      	b.n	80014b6 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1c59      	adds	r1, r3, #1
 800145e:	6179      	str	r1, [r7, #20]
 8001460:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	3318      	adds	r3, #24
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800146e:	89bb      	ldrh	r3, [r7, #12]
 8001470:	2b7f      	cmp	r3, #127	@ 0x7f
 8001472:	d809      	bhi.n	8001488 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	617a      	str	r2, [r7, #20]
 800147a:	89ba      	ldrh	r2, [r7, #12]
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	3318      	adds	r3, #24
 8001480:	443b      	add	r3, r7
 8001482:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001486:	e016      	b.n	80014b6 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1c59      	adds	r1, r3, #1
 8001490:	6179      	str	r1, [r7, #20]
 8001492:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	3318      	adds	r3, #24
 800149a:	443b      	add	r3, r7
 800149c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80014a0:	89bb      	ldrh	r3, [r7, #12]
 80014a2:	09db      	lsrs	r3, r3, #7
 80014a4:	b299      	uxth	r1, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	617a      	str	r2, [r7, #20]
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	3318      	adds	r3, #24
 80014b0:	443b      	add	r3, r7
 80014b2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	b298      	uxth	r0, r3
 80014ba:	f107 0110 	add.w	r1, r7, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	f7ff fb67 	bl	8000b94 <writetospi>
} // end dwt_writetodevice()
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	4603      	mov	r3, r0
 80014da:	81fb      	strh	r3, [r7, #14]
 80014dc:	460b      	mov	r3, r1
 80014de:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	617a      	str	r2, [r7, #20]
 80014f0:	89fa      	ldrh	r2, [r7, #14]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	3318      	adds	r3, #24
 80014f6:	443b      	add	r3, r7
 80014f8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80014fc:	e02f      	b.n	800155e <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	1c59      	adds	r1, r3, #1
 8001506:	6179      	str	r1, [r7, #20]
 8001508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	3318      	adds	r3, #24
 8001510:	443b      	add	r3, r7
 8001512:	f803 2c08 	strb.w	r2, [r3, #-8]
        if (index < 0xF0)    /* 7-bit, subIndex <= 0x7F */
 8001516:	89bb      	ldrh	r3, [r7, #12]
 8001518:	2bef      	cmp	r3, #239	@ 0xef
 800151a:	d809      	bhi.n	8001530 <dwt_readfromdevice+0x62>
//        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	617a      	str	r2, [r7, #20]
 8001522:	89ba      	ldrh	r2, [r7, #12]
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	3318      	adds	r3, #24
 8001528:	443b      	add	r3, r7
 800152a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800152e:	e016      	b.n	800155e <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	6179      	str	r1, [r7, #20]
 800153a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	3318      	adds	r3, #24
 8001542:	443b      	add	r3, r7
 8001544:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	09db      	lsrs	r3, r3, #7
 800154c:	b299      	uxth	r1, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	617a      	str	r2, [r7, #20]
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	3318      	adds	r3, #24
 8001558:	443b      	add	r3, r7
 800155a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	b298      	uxth	r0, r3
 8001562:	f107 0110 	add.w	r1, r7, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	f7ff fb63 	bl	8000c34 <readfromspi>
} // end dwt_readfromdevice()
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	b298      	uxth	r0, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b299      	uxth	r1, r3
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2204      	movs	r2, #4
 8001592:	f7ff ff9c 	bl	80014ce <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001596:	2303      	movs	r3, #3
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e00b      	b.n	80015b4 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	440a      	add	r2, r1
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	daf0      	bge.n	800159c <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 80015ba:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 80015ce:	2300      	movs	r3, #0
 80015d0:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	b298      	uxth	r0, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2202      	movs	r2, #2
 80015e0:	f7ff ff75 	bl	80014ce <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	7b3a      	ldrb	r2, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80015f0:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b298      	uxth	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b299      	uxth	r1, r3
 800160c:	f107 030f 	add.w	r3, r7, #15
 8001610:	2201      	movs	r2, #1
 8001612:	f7ff ff5c 	bl	80014ce <dwt_readfromdevice>

    return regval ;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	b298      	uxth	r0, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	b299      	uxth	r1, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	2201      	movs	r2, #1
 800163a:	f7ff fef1 	bl	8001420 <dwt_writetodevice>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	b29b      	uxth	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	b298      	uxth	r0, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	b299      	uxth	r1, r3
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2202      	movs	r2, #2
 8001672:	f7ff fed5 	bl	8001420 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e00d      	b.n	80016ac <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	f107 0210 	add.w	r2, r7, #16
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	460a      	mov	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	ddee      	ble.n	8001690 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	b298      	uxth	r0, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	b299      	uxth	r1, r3
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2204      	movs	r2, #4
 80016c0:	f7ff feae 	bl	8001420 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	461a      	mov	r2, r3
 80016da:	2104      	movs	r1, #4
 80016dc:	202d      	movs	r0, #45	@ 0x2d
 80016de:	f7ff ffb2 	bl	8001646 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80016e2:	2203      	movs	r2, #3
 80016e4:	2106      	movs	r1, #6
 80016e6:	202d      	movs	r0, #45	@ 0x2d
 80016e8:	f7ff ff9a 	bl	8001620 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80016ec:	2200      	movs	r2, #0
 80016ee:	2106      	movs	r1, #6
 80016f0:	202d      	movs	r0, #45	@ 0x2d
 80016f2:	f7ff ff95 	bl	8001620 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80016f6:	210a      	movs	r1, #10
 80016f8:	202d      	movs	r0, #45	@ 0x2d
 80016fa:	f7ff ff3c 	bl	8001576 <dwt_read32bitoffsetreg>
 80016fe:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800170e:	2200      	movs	r2, #0
 8001710:	2102      	movs	r1, #2
 8001712:	202c      	movs	r0, #44	@ 0x2c
 8001714:	f7ff ff84 	bl	8001620 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8001718:	2202      	movs	r2, #2
 800171a:	2102      	movs	r1, #2
 800171c:	202c      	movs	r0, #44	@ 0x2c
 800171e:	f7ff ff7f 	bl	8001620 <dwt_write8bitoffsetreg>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}

08001726 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800172e:	226d      	movs	r2, #109	@ 0x6d
 8001730:	f640 0106 	movw	r1, #2054	@ 0x806
 8001734:	202e      	movs	r0, #46	@ 0x2e
 8001736:	f7ff ff73 	bl	8001620 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8001740:	f240 6207 	movw	r2, #1543	@ 0x607
 8001744:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001748:	202e      	movs	r0, #46	@ 0x2e
 800174a:	f7ff ff7c 	bl	8001646 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800174e:	e006      	b.n	800175e <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001750:	f241 6207 	movw	r2, #5639	@ 0x1607
 8001754:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001758:	202e      	movs	r0, #46	@ 0x2e
 800175a:	f7ff ff74 	bl	8001646 <dwt_write16bitoffsetreg>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800176a:	200e      	movs	r0, #14
 800176c:	f000 f82a 	bl	80017c4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001770:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001774:	2106      	movs	r1, #6
 8001776:	202d      	movs	r0, #45	@ 0x2d
 8001778:	f7ff ff65 	bl	8001646 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff f9d9 	bl	8000b34 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001782:	2001      	movs	r0, #1
 8001784:	f000 f81e 	bl	80017c4 <_dwt_enableclocks>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001794:	2100      	movs	r1, #0
 8001796:	201a      	movs	r0, #26
 8001798:	f7ff feed 	bl	8001576 <dwt_read32bitoffsetreg>
 800179c:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0d1b      	lsrs	r3, r3, #20
 80017a2:	051b      	lsls	r3, r3, #20
 80017a4:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	2100      	movs	r1, #0
 80017b6:	201a      	movs	r0, #26
 80017b8:	f7ff ff61 	bl	800167e <dwt_write32bitoffsetreg>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2202      	movs	r2, #2
 80017d2:	2100      	movs	r1, #0
 80017d4:	2036      	movs	r0, #54	@ 0x36
 80017d6:	f7ff fe7a 	bl	80014ce <dwt_readfromdevice>
    switch(clocks)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0e      	cmp	r3, #14
 80017de:	d876      	bhi.n	80018ce <_dwt_enableclocks+0x10a>
 80017e0:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <_dwt_enableclocks+0x24>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	08001835 	.word	0x08001835
 80017ec:	08001825 	.word	0x08001825
 80017f0:	0800184b 	.word	0x0800184b
 80017f4:	080018cf 	.word	0x080018cf
 80017f8:	080018cf 	.word	0x080018cf
 80017fc:	080018cf 	.word	0x080018cf
 8001800:	080018cf 	.word	0x080018cf
 8001804:	08001861 	.word	0x08001861
 8001808:	08001881 	.word	0x08001881
 800180c:	080018cf 	.word	0x080018cf
 8001810:	080018cf 	.word	0x080018cf
 8001814:	08001897 	.word	0x08001897
 8001818:	080018a3 	.word	0x080018a3
 800181c:	080018af 	.word	0x080018af
 8001820:	080018c5 	.word	0x080018c5
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001824:	2300      	movs	r3, #0
 8001826:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001828:	7b7b      	ldrb	r3, [r7, #13]
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001832:	e04d      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001834:	7b3b      	ldrb	r3, [r7, #12]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f023 0303 	bic.w	r3, r3, #3
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	b25b      	sxtb	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001848:	e042      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800184a:	7b3b      	ldrb	r3, [r7, #12]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800185e:	e037      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 800186e:	b25b      	sxtb	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800187a:	b2db      	uxtb	r3, r3
 800187c:	737b      	strb	r3, [r7, #13]
        }
        break;
 800187e:	e027      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 8001886:	b2db      	uxtb	r3, r3
 8001888:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001890:	b2db      	uxtb	r3, r3
 8001892:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001894:	e01c      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	737b      	strb	r3, [r7, #13]
        }
        break;
 80018a0:	e016      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	f023 0302 	bic.w	r3, r3, #2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	737b      	strb	r3, [r7, #13]
        }
        break;
 80018ac:	e010      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80018ae:	7b3b      	ldrb	r3, [r7, #12]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	733b      	strb	r3, [r7, #12]
        }
        break;
 80018c2:	e005      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 80018c4:	2301      	movs	r3, #1
 80018c6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 80018c8:	2303      	movs	r3, #3
 80018ca:	737b      	strb	r3, [r7, #13]
        }
        break;
 80018cc:	e000      	b.n	80018d0 <_dwt_enableclocks+0x10c>
        default:
        break;
 80018ce:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2201      	movs	r2, #1
 80018d6:	2100      	movs	r1, #0
 80018d8:	2036      	movs	r0, #54	@ 0x36
 80018da:	f7ff fda1 	bl	8001420 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	3301      	adds	r3, #1
 80018e4:	2201      	movs	r2, #1
 80018e6:	2101      	movs	r1, #1
 80018e8:	2036      	movs	r0, #54	@ 0x36
 80018ea:	f7ff fd99 	bl	8001420 <dwt_writetodevice>

} // end _dwt_enableclocks()
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ff61 	bl	80017c4 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001902:	2200      	movs	r2, #0
 8001904:	2104      	movs	r1, #4
 8001906:	2036      	movs	r0, #54	@ 0x36
 8001908:	f7ff fe9d 	bl	8001646 <dwt_write16bitoffsetreg>



}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	2101      	movs	r1, #1
 800191c:	200a      	movs	r0, #10
 800191e:	f7ff feae 	bl	800167e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 800193e:	2300      	movs	r3, #0
 8001940:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <dwt_starttx+0xa4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d027      	beq.n	80019b2 <dwt_starttx+0x86>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	f043 0306 	orr.w	r3, r3, #6
 8001968:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	461a      	mov	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	200d      	movs	r0, #13
 8001972:	f7ff fe55 	bl	8001620 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001976:	2103      	movs	r1, #3
 8001978:	200f      	movs	r0, #15
 800197a:	f7ff fe23 	bl	80015c4 <dwt_read16bitoffsetreg>
 800197e:	4603      	mov	r3, r0
 8001980:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	f403 6381 	and.w	r3, r3, #1032	@ 0x408
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e019      	b.n	80019c6 <dwt_starttx+0x9a>
//            retval = DWT_ERROR ; // Failed !


            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
        	temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	72fb      	strb	r3, [r7, #11]
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	461a      	mov	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	200d      	movs	r0, #13
 800199e:	f7ff fe3f 	bl	8001620 <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            pdw1000local->wait4resp = 0;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <dwt_starttx+0xa4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	755a      	strb	r2, [r3, #21]
            retval = DWT_ERROR ; // Failed !
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e009      	b.n	80019c6 <dwt_starttx+0x9a>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	461a      	mov	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	200d      	movs	r0, #13
 80019c2:	f7ff fe2d 	bl	8001620 <dwt_write8bitoffsetreg>
    }

    return retval;
 80019c6:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000

080019d4 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80019da:	2100      	movs	r1, #0
 80019dc:	200e      	movs	r0, #14
 80019de:	f7ff fdca 	bl	8001576 <dwt_read32bitoffsetreg>
 80019e2:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80019e4:	f000 f91e 	bl	8001c24 <decamutexon>
 80019e8:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	200e      	movs	r0, #14
 80019f0:	f7ff fe45 	bl	800167e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	2100      	movs	r1, #0
 80019f8:	200d      	movs	r0, #13
 80019fa:	f7ff fe11 	bl	8001620 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <dwt_forcetrxoff+0x58>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	200f      	movs	r0, #15
 8001a04:	f7ff fe3b 	bl	800167e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001a08:	f000 f814 	bl	8001a34 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	200e      	movs	r0, #14
 8001a12:	f7ff fe34 	bl	800167e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f000 f915 	bl	8001c46 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <dwt_forcetrxoff+0x5c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2427fff8 	.word	0x2427fff8
 8001a30:	20000000 	.word	0x20000000

08001a34 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	200f      	movs	r0, #15
 8001a3e:	f7ff fddc 	bl	80015fa <dwt_read8bitoffsetreg>
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001a46:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001a56:	2201      	movs	r2, #1
 8001a58:	2103      	movs	r1, #3
 8001a5a:	200d      	movs	r0, #13
 8001a5c:	f7ff fde0 	bl	8001620 <dwt_write8bitoffsetreg>
    }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001a7a:	f7ff ffdb 	bl	8001a34 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a82:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a94:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	200d      	movs	r0, #13
 8001a9e:	f7ff fdd2 	bl	8001646 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01a      	beq.n	8001ae2 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001aac:	2103      	movs	r1, #3
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f7ff fda3 	bl	80015fa <dwt_read8bitoffsetreg>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001ab8:	7b7b      	ldrb	r3, [r7, #13]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00f      	beq.n	8001ae2 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001ac2:	f7ff ff87 	bl	80019d4 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	200d      	movs	r0, #13
 8001ad8:	f7ff fdb5 	bl	8001646 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	e000      	b.n	8001ae4 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001ae2:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001af6:	2103      	movs	r1, #3
 8001af8:	2004      	movs	r0, #4
 8001afa:	f7ff fd7e 	bl	80015fa <dwt_read8bitoffsetreg>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d018      	beq.n	8001b3a <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	200c      	movs	r0, #12
 8001b10:	f7ff fd99 	bl	8001646 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <dwt_setrxtimeout+0x7c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <dwt_setrxtimeout+0x7c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b2a:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2103      	movs	r1, #3
 8001b32:	2004      	movs	r0, #4
 8001b34:	f7ff fd74 	bl	8001620 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001b38:	e011      	b.n	8001b5e <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f023 0310 	bic.w	r3, r3, #16
 8001b40:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <dwt_setrxtimeout+0x7c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <dwt_setrxtimeout+0x7c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001b50:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	461a      	mov	r2, r3
 8001b56:	2103      	movs	r1, #3
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f7ff fd61 	bl	8001620 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2124      	movs	r1, #36	@ 0x24
 8001b7c:	2027      	movs	r0, #39	@ 0x27
 8001b7e:	f7ff fd62 	bl	8001646 <dwt_write16bitoffsetreg>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001b8e:	22e0      	movs	r2, #224	@ 0xe0
 8001b90:	2103      	movs	r1, #3
 8001b92:	2036      	movs	r0, #54	@ 0x36
 8001b94:	f7ff fd44 	bl	8001620 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001b98:	22f0      	movs	r2, #240	@ 0xf0
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	2036      	movs	r0, #54	@ 0x36
 8001b9e:	f7ff fd3f 	bl	8001620 <dwt_write8bitoffsetreg>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001bac:	f7ff fea4 	bl	80018f8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	202c      	movs	r0, #44	@ 0x2c
 8001bb6:	f7ff fd46 	bl	8001646 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2106      	movs	r1, #6
 8001bbe:	202c      	movs	r0, #44	@ 0x2c
 8001bc0:	f7ff fd2e 	bl	8001620 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001bc4:	f7ff fda1 	bl	800170a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2103      	movs	r1, #3
 8001bcc:	2036      	movs	r0, #54	@ 0x36
 8001bce:	f7ff fd27 	bl	8001620 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7fe ffae 	bl	8000b34 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001bd8:	22f0      	movs	r2, #240	@ 0xf0
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2036      	movs	r0, #54	@ 0x36
 8001bde:	f7ff fd1f 	bl	8001620 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001be2:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <dwt_softreset+0x48>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	755a      	strb	r2, [r3, #21]
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	461a      	mov	r2, r3
 8001c14:	210e      	movs	r1, #14
 8001c16:	202b      	movs	r0, #43	@ 0x2b
 8001c18:	f7ff fd02 	bl	8001620 <dwt_write8bitoffsetreg>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001c2a:	f000 fe9d 	bl	8002968 <port_GetEXT_IRQStatus>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	607b      	str	r3, [r7, #4]

	if(s) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001c38:	f000 fe88 	bl	800294c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001c54:	f000 fe81 	bl	800295a <port_EnableEXT_IRQ>
	}
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64_t ts = 0;
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fbb6 	bl	80013e8 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e01e      	b.n	8001cc0 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8001c82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	020b      	lsls	r3, r1, #8
 8001c90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001c94:	0202      	lsls	r2, r0, #8
 8001c96:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8001c9a:	1d3a      	adds	r2, r7, #4
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	4615      	mov	r5, r2
 8001caa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cae:	ea42 0804 	orr.w	r8, r2, r4
 8001cb2:	ea43 0905 	orr.w	r9, r3, r5
 8001cb6:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dadd      	bge.n	8001c82 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8001cc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001cd6 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8001cd6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64_t ts = 0;
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fb89 	bl	8001404 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e01e      	b.n	8001d36 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8001cf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	020b      	lsls	r3, r1, #8
 8001d06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001d0a:	0202      	lsls	r2, r0, #8
 8001d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8001d10:	1d3a      	adds	r2, r7, #4
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4615      	mov	r5, r2
 8001d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d24:	ea42 0804 	orr.w	r8, r2, r4
 8001d28:	ea43 0905 	orr.w	r9, r3, r5
 8001d2c:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dadd      	bge.n	8001cf8 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8001d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001d4c <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e010      	b.n	8001d84 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	00d2      	lsls	r2, r2, #3
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	441a      	add	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	ddeb      	ble.n	8001d62 <final_msg_get_ts+0x16>
    }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <ds_resp_main>:
double tof, distance;

uint8_t table[] = {'1','2','3','4'};

void ds_resp_main(int x, int* dist)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b0aa      	sub	sp, #168	@ 0xa8
 8001d9c:	af06      	add	r7, sp, #24
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    uint32_t frameLen, resp_tx_time;
    uint32_t status = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    deca_reset();
 8001da8:	f7fe ffb8 	bl	8000d1c <deca_reset>
    port_set_dw1000_slowrate();
 8001dac:	f7fe fece 	bl	8000b4c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) while (1) {};
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe ffe3 	bl	8000d7c <dwt_initialise>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d101      	bne.n	8001dc2 <ds_resp_main+0x2a>
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <ds_resp_main+0x26>
    port_set_dw1000_fastrate();
 8001dc2:	f7fe fed5 	bl	8000b70 <port_set_dw1000_fastrate>
    dwt_configure(&config);
 8001dc6:	489c      	ldr	r0, [pc, #624]	@ (8002038 <ds_resp_main+0x2a0>)
 8001dc8:	f7ff f934 	bl	8001034 <dwt_configure>

    dwt_setrxantennadelay(RX_ANT_DLY);
 8001dcc:	f244 0079 	movw	r0, #16505	@ 0x4079
 8001dd0:	f7ff fa9a 	bl	8001308 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8001dd4:	f244 0079 	movw	r0, #16505	@ 0x4079
 8001dd8:	f7ff faa6 	bl	8001328 <dwt_settxantennadelay>
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8001ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001de0:	f7ff fec4 	bl	8001b6c <dwt_setpreambledetecttimeout>

    uint8_t rx_poll_msg[]  = {0x41, 0x88, 0, 0xCA, 0xDE, 'W','A',table[x],'E', 0x21, 0, 0};
 8001de4:	2341      	movs	r3, #65	@ 0x41
 8001de6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001dea:	2388      	movs	r3, #136	@ 0x88
 8001dec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001df6:	23ca      	movs	r3, #202	@ 0xca
 8001df8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001dfc:	23de      	movs	r3, #222	@ 0xde
 8001dfe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8001e02:	2357      	movs	r3, #87	@ 0x57
 8001e04:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8001e08:	2341      	movs	r3, #65	@ 0x41
 8001e0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001e0e:	4a8b      	ldr	r2, [pc, #556]	@ (800203c <ds_resp_main+0x2a4>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001e1a:	2345      	movs	r3, #69	@ 0x45
 8001e1c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001e20:	2321      	movs	r3, #33	@ 0x21
 8001e22:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t tx_resp_msg[]  = {0x41, 0x88, 0, 0xCA, 0xDE, 'V','E',table[x],'A', 0x10, 0x02, 0, 0, 0, 0};
 8001e32:	2341      	movs	r3, #65	@ 0x41
 8001e34:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001e38:	2388      	movs	r3, #136	@ 0x88
 8001e3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001e44:	23ca      	movs	r3, #202	@ 0xca
 8001e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001e4a:	23de      	movs	r3, #222	@ 0xde
 8001e4c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001e50:	2356      	movs	r3, #86	@ 0x56
 8001e52:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001e56:	2345      	movs	r3, #69	@ 0x45
 8001e58:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001e5c:	4a77      	ldr	r2, [pc, #476]	@ (800203c <ds_resp_main+0x2a4>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001e68:	2341      	movs	r3, #65	@ 0x41
 8001e6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001e6e:	2310      	movs	r3, #16
 8001e70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001e74:	2302      	movs	r3, #2
 8001e76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e80:	2300      	movs	r3, #0
 8001e82:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    uint8_t rx_final_msg[] = {0x41, 0x88, 0, 0xCA, 0xDE, 'W','A',table[x],'E', 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001e92:	2341      	movs	r3, #65	@ 0x41
 8001e94:	753b      	strb	r3, [r7, #20]
 8001e96:	2388      	movs	r3, #136	@ 0x88
 8001e98:	757b      	strb	r3, [r7, #21]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75bb      	strb	r3, [r7, #22]
 8001e9e:	23ca      	movs	r3, #202	@ 0xca
 8001ea0:	75fb      	strb	r3, [r7, #23]
 8001ea2:	23de      	movs	r3, #222	@ 0xde
 8001ea4:	763b      	strb	r3, [r7, #24]
 8001ea6:	2357      	movs	r3, #87	@ 0x57
 8001ea8:	767b      	strb	r3, [r7, #25]
 8001eaa:	2341      	movs	r3, #65	@ 0x41
 8001eac:	76bb      	strb	r3, [r7, #26]
 8001eae:	4a63      	ldr	r2, [pc, #396]	@ (800203c <ds_resp_main+0x2a4>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	76fb      	strb	r3, [r7, #27]
 8001eb8:	2345      	movs	r3, #69	@ 0x45
 8001eba:	773b      	strb	r3, [r7, #28]
 8001ebc:	2323      	movs	r3, #35	@ 0x23
 8001ebe:	777b      	strb	r3, [r7, #29]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	77bb      	strb	r3, [r7, #30]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3020 	strb.w	r3, [r7, #32]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    while(1){
        dwt_setrxtimeout(0);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fdeb 	bl	8001aec <dwt_setrxtimeout>
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fda6 	bl	8001a68 <dwt_rxenable>

        do {
            status = dwt_read32bitreg(SYS_STATUS_ID);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f7ff fb29 	bl	8001576 <dwt_read32bitoffsetreg>
 8001f24:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
        } while (!(status & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
 8001f28:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001f2c:	4b44      	ldr	r3, [pc, #272]	@ (8002040 <ds_resp_main+0x2a8>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f3      	beq.n	8001f1c <ds_resp_main+0x184>

        if (status & SYS_STATUS_RXFCG)
 8001f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 81e4 	beq.w	800230a <ds_resp_main+0x572>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001f42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f46:	2100      	movs	r1, #0
 8001f48:	200f      	movs	r0, #15
 8001f4a:	f7ff fb98 	bl	800167e <dwt_write32bitoffsetreg>
            memset(rx_resp_buffer, 0, RX_RESP_BUF_LEN);
 8001f4e:	2218      	movs	r2, #24
 8001f50:	2100      	movs	r1, #0
 8001f52:	483c      	ldr	r0, [pc, #240]	@ (8002044 <ds_resp_main+0x2ac>)
 8001f54:	f004 faf1 	bl	800653a <memset>
            frameLen = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2010      	movs	r0, #16
 8001f5c:	f7ff fb0b 	bl	8001576 <dwt_read32bitoffsetreg>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            if (frameLen <= RX_RESP_BUF_LEN)
 8001f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f6e:	2b18      	cmp	r3, #24
 8001f70:	d807      	bhi.n	8001f82 <ds_resp_main+0x1ea>
                dwt_readrxdata(rx_resp_buffer, frameLen, 0);
 8001f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4831      	ldr	r0, [pc, #196]	@ (8002044 <ds_resp_main+0x2ac>)
 8001f7e:	f7ff fa21 	bl	80013c4 <dwt_readrxdata>

            rx_resp_buffer[ALL_MSG_SN_IDX] = 0;
 8001f82:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <ds_resp_main+0x2ac>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_resp_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8001f88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f8c:	220a      	movs	r2, #10
 8001f8e:	4619      	mov	r1, r3
 8001f90:	482c      	ldr	r0, [pc, #176]	@ (8002044 <ds_resp_main+0x2ac>)
 8001f92:	f004 fac2 	bl	800651a <memcmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1b9      	bne.n	8001f10 <ds_resp_main+0x178>
            {
                poll_rx_ts = get_rx_timestamp_u64();
 8001f9c:	f7ff fe9b 	bl	8001cd6 <get_rx_timestamp_u64>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4928      	ldr	r1, [pc, #160]	@ (8002048 <ds_resp_main+0x2b0>)
 8001fa6:	e9c1 2300 	strd	r2, r3, [r1]
                sprintf(msg, "[UWB] Poll received, T2 = %lu\r\n", (uint32_t)poll_rx_ts);
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <ds_resp_main+0x2b0>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4925      	ldr	r1, [pc, #148]	@ (800204c <ds_resp_main+0x2b4>)
 8001fb6:	4826      	ldr	r0, [pc, #152]	@ (8002050 <ds_resp_main+0x2b8>)
 8001fb8:	f004 fa4a 	bl	8006450 <siprintf>
                //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <ds_resp_main+0x2b0>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	4924      	ldr	r1, [pc, #144]	@ (8002054 <ds_resp_main+0x2bc>)
 8001fc4:	1854      	adds	r4, r2, r1
 8001fc6:	f143 0500 	adc.w	r5, r3, #0
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	0a22      	lsrs	r2, r4, #8
 8001fd4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001fd8:	0a2b      	lsrs	r3, r5, #8
 8001fda:	4613      	mov	r3, r2
 8001fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                dwt_setdelayedtrxtime(resp_tx_time);
 8001fe0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001fe4:	f7ff fc94 	bl	8001910 <dwt_setdelayedtrxtime>

                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8001fe8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001fec:	f7ff fbce 	bl	800178c <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8001ff0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001ff4:	f7ff fd7a 	bl	8001aec <dwt_setrxtimeout>

                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <ds_resp_main+0x2c0>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0);
 8002000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	200f      	movs	r0, #15
 800200a:	f7ff f99c 	bl	8001346 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);
 800200e:	2201      	movs	r2, #1
 8002010:	2100      	movs	r1, #0
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff f9b6 	bl	8001384 <dwt_writetxfctrl>
                int ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002018:	2003      	movs	r0, #3
 800201a:	f7ff fc87 	bl	800192c <dwt_starttx>
 800201e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

                if (ret == DWT_ERROR) {
 8002022:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202a:	d119      	bne.n	8002060 <ds_resp_main+0x2c8>
                    sprintf(msg, "[UWB] Response TX scheduling failed.\r\n");
 800202c:	490b      	ldr	r1, [pc, #44]	@ (800205c <ds_resp_main+0x2c4>)
 800202e:	4808      	ldr	r0, [pc, #32]	@ (8002050 <ds_resp_main+0x2b8>)
 8002030:	f004 fa0e 	bl	8006450 <siprintf>
 8002034:	e171      	b.n	800231a <ds_resp_main+0x582>
 8002036:	bf00      	nop
 8002038:	20000004 	.word	0x20000004
 800203c:	20000010 	.word	0x20000010
 8002040:	2427d000 	.word	0x2427d000
 8002044:	200002c4 	.word	0x200002c4
 8002048:	200002e0 	.word	0x200002e0
 800204c:	080095a0 	.word	0x080095a0
 8002050:	20000244 	.word	0x20000244
 8002054:	27100000 	.word	0x27100000
 8002058:	20000240 	.word	0x20000240
 800205c:	080095c0 	.word	0x080095c0
                    //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
                    return;
                } else {
                    sprintf(msg, "[UWB] Response scheduled, T3 approx = %lu\r\n", (uint32_t)(resp_tx_time << 8));
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	461a      	mov	r2, r3
 8002068:	49b1      	ldr	r1, [pc, #708]	@ (8002330 <ds_resp_main+0x598>)
 800206a:	48b2      	ldr	r0, [pc, #712]	@ (8002334 <ds_resp_main+0x59c>)
 800206c:	f004 f9f0 	bl	8006450 <siprintf>
                    //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
                }

                do {
                    status = dwt_read32bitreg(SYS_STATUS_ID);
 8002070:	2100      	movs	r1, #0
 8002072:	200f      	movs	r0, #15
 8002074:	f7ff fa7f 	bl	8001576 <dwt_read32bitoffsetreg>
 8002078:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                } while (!(status & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)));
 800207c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002080:	4bad      	ldr	r3, [pc, #692]	@ (8002338 <ds_resp_main+0x5a0>)
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f3      	beq.n	8002070 <ds_resp_main+0x2d8>

                frame_seq_nb++;
 8002088:	4bac      	ldr	r3, [pc, #688]	@ (800233c <ds_resp_main+0x5a4>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4baa      	ldr	r3, [pc, #680]	@ (800233c <ds_resp_main+0x5a4>)
 8002092:	701a      	strb	r2, [r3, #0]

                if (status & SYS_STATUS_RXFCG)
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 812c 	beq.w	80022fa <ds_resp_main+0x562>
                {
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 80020a2:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 80020a6:	2100      	movs	r1, #0
 80020a8:	200f      	movs	r0, #15
 80020aa:	f7ff fae8 	bl	800167e <dwt_write32bitoffsetreg>
                    memset(rx_resp_buffer, 0, RX_RESP_BUF_LEN);
 80020ae:	2218      	movs	r2, #24
 80020b0:	2100      	movs	r1, #0
 80020b2:	48a3      	ldr	r0, [pc, #652]	@ (8002340 <ds_resp_main+0x5a8>)
 80020b4:	f004 fa41 	bl	800653a <memset>
                    frameLen = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 80020b8:	2100      	movs	r1, #0
 80020ba:	2010      	movs	r0, #16
 80020bc:	f7ff fa5b 	bl	8001576 <dwt_read32bitoffsetreg>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    if (frameLen <= RX_RESP_BUF_LEN)
 80020ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ce:	2b18      	cmp	r3, #24
 80020d0:	d807      	bhi.n	80020e2 <ds_resp_main+0x34a>
                        dwt_readrxdata(rx_resp_buffer, frameLen, 0);
 80020d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	4619      	mov	r1, r3
 80020dc:	4898      	ldr	r0, [pc, #608]	@ (8002340 <ds_resp_main+0x5a8>)
 80020de:	f7ff f971 	bl	80013c4 <dwt_readrxdata>

                    rx_resp_buffer[ALL_MSG_SN_IDX] = 0;
 80020e2:	4b97      	ldr	r3, [pc, #604]	@ (8002340 <ds_resp_main+0x5a8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_resp_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	220a      	movs	r2, #10
 80020ee:	4619      	mov	r1, r3
 80020f0:	4893      	ldr	r0, [pc, #588]	@ (8002340 <ds_resp_main+0x5a8>)
 80020f2:	f004 fa12 	bl	800651a <memcmp>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f af09 	bne.w	8001f10 <ds_resp_main+0x178>
                        uint32_t poll_tx_ts, resp_rx_ts, final_tx_ts;
                        uint32_t poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        resp_tx_ts  = get_tx_timestamp_u64();
 80020fe:	f7ff fdaf 	bl	8001c60 <get_tx_timestamp_u64>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	498f      	ldr	r1, [pc, #572]	@ (8002344 <ds_resp_main+0x5ac>)
 8002108:	e9c1 2300 	strd	r2, r3, [r1]
                        final_rx_ts = get_rx_timestamp_u64();
 800210c:	f7ff fde3 	bl	8001cd6 <get_rx_timestamp_u64>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	498c      	ldr	r1, [pc, #560]	@ (8002348 <ds_resp_main+0x5b0>)
 8002116:	e9c1 2300 	strd	r2, r3, [r1]

                        sprintf(msg, "[UWB] Final received, T6 = %lu\r\n", (uint32_t)final_rx_ts);
 800211a:	4b8b      	ldr	r3, [pc, #556]	@ (8002348 <ds_resp_main+0x5b0>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	4613      	mov	r3, r2
 8002122:	461a      	mov	r2, r3
 8002124:	4989      	ldr	r1, [pc, #548]	@ (800234c <ds_resp_main+0x5b4>)
 8002126:	4883      	ldr	r0, [pc, #524]	@ (8002334 <ds_resp_main+0x59c>)
 8002128:	f004 f992 	bl	8006450 <siprintf>
                        //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

                        final_msg_get_ts(&rx_resp_buffer[FINAL_MSG_POLL_TX_TS_IDX],  &poll_tx_ts);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	4887      	ldr	r0, [pc, #540]	@ (8002350 <ds_resp_main+0x5b8>)
 8002134:	f7ff fe0a 	bl	8001d4c <final_msg_get_ts>
                        final_msg_get_ts(&rx_resp_buffer[FINAL_MSG_RESP_RX_TS_IDX],  &resp_rx_ts);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4619      	mov	r1, r3
 800213e:	4885      	ldr	r0, [pc, #532]	@ (8002354 <ds_resp_main+0x5bc>)
 8002140:	f7ff fe04 	bl	8001d4c <final_msg_get_ts>
                        final_msg_get_ts(&rx_resp_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	4619      	mov	r1, r3
 800214a:	4883      	ldr	r0, [pc, #524]	@ (8002358 <ds_resp_main+0x5c0>)
 800214c:	f7ff fdfe 	bl	8001d4c <final_msg_get_ts>

                        sprintf(msg, "[UWB] Final contained T1=%lu, T4=%lu, T5=%lu\r\n", poll_tx_ts, resp_rx_ts, final_tx_ts);
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	4980      	ldr	r1, [pc, #512]	@ (800235c <ds_resp_main+0x5c4>)
 800215c:	4875      	ldr	r0, [pc, #468]	@ (8002334 <ds_resp_main+0x59c>)
 800215e:	f004 f977 	bl	8006450 <siprintf>
                        //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

                        poll_rx_ts_32 = (uint32_t)poll_rx_ts;
 8002162:	4b7f      	ldr	r3, [pc, #508]	@ (8002360 <ds_resp_main+0x5c8>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	4613      	mov	r3, r2
 800216a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        resp_tx_ts_32 = (uint32_t)resp_tx_ts;
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <ds_resp_main+0x5ac>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	4613      	mov	r3, r2
 8002174:	67bb      	str	r3, [r7, #120]	@ 0x78
                        final_rx_ts_32 = (uint32_t)final_rx_ts;
 8002176:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <ds_resp_main+0x5b0>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	4613      	mov	r3, r2
 800217e:	677b      	str	r3, [r7, #116]	@ 0x74
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f92c 	bl	80003e4 <__aeabi_ui2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8002194:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f922 	bl	80003e4 <__aeabi_ui2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                        Da = (double)(final_tx_ts - resp_rx_ts);
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f918 	bl	80003e4 <__aeabi_ui2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 80021bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80021be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f90e 	bl	80003e4 <__aeabi_ui2d>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80021d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80021d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021d8:	f7fe f97e 	bl	80004d8 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80021ec:	f7fe f974 	bl	80004d8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fd ffb6 	bl	8000168 <__aeabi_dsub>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4614      	mov	r4, r2
 8002202:	461d      	mov	r5, r3
 8002204:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800220c:	f7fd ffae 	bl	800016c <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800221c:	f7fd ffa6 	bl	800016c <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800222c:	f7fd ff9e 	bl	800016c <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fe fa78 	bl	800072c <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc40 	bl	8000ac8 <__aeabi_d2lz>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

                        sprintf(msg, "%.2lf / %.2lf / %.2lf / %.2lf \r\n", Ra, Rb, Da, Db);
 8002250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002254:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002258:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800225c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002260:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002264:	e9cd 2300 	strd	r2, r3, [sp]
 8002268:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800226c:	493d      	ldr	r1, [pc, #244]	@ (8002364 <ds_resp_main+0x5cc>)
 800226e:	4831      	ldr	r0, [pc, #196]	@ (8002334 <ds_resp_main+0x59c>)
 8002270:	f004 f8ee 	bl	8006450 <siprintf>
                        //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

                        tof = tof_dtu * DWT_TIME_UNITS;
 8002274:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002278:	f7fe f900 	bl	800047c <__aeabi_l2d>
 800227c:	a328      	add	r3, pc, #160	@ (adr r3, 8002320 <ds_resp_main+0x588>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f929 	bl	80004d8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4937      	ldr	r1, [pc, #220]	@ (8002368 <ds_resp_main+0x5d0>)
 800228c:	e9c1 2300 	strd	r2, r3, [r1]
                        distance = tof * SPEED_OF_LIGHT+1.2;
 8002290:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <ds_resp_main+0x5d0>)
 8002292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002296:	a324      	add	r3, pc, #144	@ (adr r3, 8002328 <ds_resp_main+0x590>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f91c 	bl	80004d8 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80022ac:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <ds_resp_main+0x5d4>)
 80022ae:	f7fd ff5d 	bl	800016c <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	492e      	ldr	r1, [pc, #184]	@ (8002370 <ds_resp_main+0x5d8>)
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]

                        sprintf(msg, "Distance calculated: %.2lf m\r\n", distance);
 80022bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002370 <ds_resp_main+0x5d8>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	492c      	ldr	r1, [pc, #176]	@ (8002374 <ds_resp_main+0x5dc>)
 80022c4:	481b      	ldr	r0, [pc, #108]	@ (8002334 <ds_resp_main+0x59c>)
 80022c6:	f004 f8c3 	bl	8006450 <siprintf>
                        //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);

                        *dist = (int)round(1000*distance);
 80022ca:	4b29      	ldr	r3, [pc, #164]	@ (8002370 <ds_resp_main+0x5d8>)
 80022cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <ds_resp_main+0x5e0>)
 80022d6:	f7fe f8ff 	bl	80004d8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f006 fa6f 	bl	80087c4 <round>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fba3 	bl	8000a38 <__aeabi_d2iz>
 80022f2:	4602      	mov	r2, r0
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	601a      	str	r2, [r3, #0]
                        break;
 80022f8:	e00f      	b.n	800231a <ds_resp_main+0x582>
                    }
                }
                else {
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80022fa:	4a20      	ldr	r2, [pc, #128]	@ (800237c <ds_resp_main+0x5e4>)
 80022fc:	2100      	movs	r1, #0
 80022fe:	200f      	movs	r0, #15
 8002300:	f7ff f9bd 	bl	800167e <dwt_write32bitoffsetreg>
                    dwt_rxreset();
 8002304:	f7ff fc41 	bl	8001b8a <dwt_rxreset>
 8002308:	e602      	b.n	8001f10 <ds_resp_main+0x178>
                }
            }
        }
        else {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <ds_resp_main+0x5e4>)
 800230c:	2100      	movs	r1, #0
 800230e:	200f      	movs	r0, #15
 8002310:	f7ff f9b5 	bl	800167e <dwt_write32bitoffsetreg>
            dwt_rxreset();
 8002314:	f7ff fc39 	bl	8001b8a <dwt_rxreset>
        dwt_setrxtimeout(0);
 8002318:	e5fa      	b.n	8001f10 <ds_resp_main+0x178>
        }
    }
}
 800231a:	3790      	adds	r7, #144	@ 0x90
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	3bce48fa 	.word	0x3bce48fa
 8002324:	3db13518 	.word	0x3db13518
 8002328:	4a000000 	.word	0x4a000000
 800232c:	41b1de78 	.word	0x41b1de78
 8002330:	080095e8 	.word	0x080095e8
 8002334:	20000244 	.word	0x20000244
 8002338:	2427d000 	.word	0x2427d000
 800233c:	20000240 	.word	0x20000240
 8002340:	200002c4 	.word	0x200002c4
 8002344:	200002e8 	.word	0x200002e8
 8002348:	200002f0 	.word	0x200002f0
 800234c:	08009614 	.word	0x08009614
 8002350:	200002ce 	.word	0x200002ce
 8002354:	200002d2 	.word	0x200002d2
 8002358:	200002d6 	.word	0x200002d6
 800235c:	08009638 	.word	0x08009638
 8002360:	200002e0 	.word	0x200002e0
 8002364:	08009668 	.word	0x08009668
 8002368:	200002f8 	.word	0x200002f8
 800236c:	3ff33333 	.word	0x3ff33333
 8002370:	20000300 	.word	0x20000300
 8002374:	0800968c 	.word	0x0800968c
 8002378:	408f4000 	.word	0x408f4000
 800237c:	24279000 	.word	0x24279000

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f001 fc0d 	bl	8003ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238a:	f000 f8e7 	bl	800255c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238e:	f000 f9e1 	bl	8002754 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002392:	f000 f91f 	bl	80025d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002396:	f000 f9b3 	bl	8002700 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800239a:	f000 f951 	bl	8002640 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800239e:	f000 f985 	bl	80026ac <MX_USART1_UART_Init>
  //ss_resp_main();   //앵커

  //ds_twr_init();  //앵커
  //ds_resp_main(0); //태거

  sprintf(str, "begin\r\n" );
 80023a2:	495d      	ldr	r1, [pc, #372]	@ (8002518 <main+0x198>)
 80023a4:	485d      	ldr	r0, [pc, #372]	@ (800251c <main+0x19c>)
 80023a6:	f004 f853 	bl	8006450 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80023aa:	485c      	ldr	r0, [pc, #368]	@ (800251c <main+0x19c>)
 80023ac:	f7fd fed0 	bl	8000150 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2364      	movs	r3, #100	@ 0x64
 80023b6:	4959      	ldr	r1, [pc, #356]	@ (800251c <main+0x19c>)
 80023b8:	4859      	ldr	r0, [pc, #356]	@ (8002520 <main+0x1a0>)
 80023ba:	f003 f958 	bl	800566e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ds_resp_main(0, &dist[0]);
 80023be:	4959      	ldr	r1, [pc, #356]	@ (8002524 <main+0x1a4>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff fce9 	bl	8001d98 <ds_resp_main>
    sprintf(str, "Anchor 1 complete\r\n" );
 80023c6:	4958      	ldr	r1, [pc, #352]	@ (8002528 <main+0x1a8>)
 80023c8:	4854      	ldr	r0, [pc, #336]	@ (800251c <main+0x19c>)
 80023ca:	f004 f841 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80023ce:	4853      	ldr	r0, [pc, #332]	@ (800251c <main+0x19c>)
 80023d0:	f7fd febe 	bl	8000150 <strlen>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	2364      	movs	r3, #100	@ 0x64
 80023da:	4950      	ldr	r1, [pc, #320]	@ (800251c <main+0x19c>)
 80023dc:	4850      	ldr	r0, [pc, #320]	@ (8002520 <main+0x1a0>)
 80023de:	f003 f946 	bl	800566e <HAL_UART_Transmit>
    ds_resp_main(1, &dist[1]);
 80023e2:	4952      	ldr	r1, [pc, #328]	@ (800252c <main+0x1ac>)
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff fcd7 	bl	8001d98 <ds_resp_main>
    sprintf(str, "Anchor 2 complete\r\n" );
 80023ea:	4951      	ldr	r1, [pc, #324]	@ (8002530 <main+0x1b0>)
 80023ec:	484b      	ldr	r0, [pc, #300]	@ (800251c <main+0x19c>)
 80023ee:	f004 f82f 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80023f2:	484a      	ldr	r0, [pc, #296]	@ (800251c <main+0x19c>)
 80023f4:	f7fd feac 	bl	8000150 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2364      	movs	r3, #100	@ 0x64
 80023fe:	4947      	ldr	r1, [pc, #284]	@ (800251c <main+0x19c>)
 8002400:	4847      	ldr	r0, [pc, #284]	@ (8002520 <main+0x1a0>)
 8002402:	f003 f934 	bl	800566e <HAL_UART_Transmit>
    ds_resp_main(2, &dist[2]);
 8002406:	494b      	ldr	r1, [pc, #300]	@ (8002534 <main+0x1b4>)
 8002408:	2002      	movs	r0, #2
 800240a:	f7ff fcc5 	bl	8001d98 <ds_resp_main>
    sprintf(str, "Anchor 3 complete\r\n" );
 800240e:	494a      	ldr	r1, [pc, #296]	@ (8002538 <main+0x1b8>)
 8002410:	4842      	ldr	r0, [pc, #264]	@ (800251c <main+0x19c>)
 8002412:	f004 f81d 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 8002416:	4841      	ldr	r0, [pc, #260]	@ (800251c <main+0x19c>)
 8002418:	f7fd fe9a 	bl	8000150 <strlen>
 800241c:	4603      	mov	r3, r0
 800241e:	b29a      	uxth	r2, r3
 8002420:	2364      	movs	r3, #100	@ 0x64
 8002422:	493e      	ldr	r1, [pc, #248]	@ (800251c <main+0x19c>)
 8002424:	483e      	ldr	r0, [pc, #248]	@ (8002520 <main+0x1a0>)
 8002426:	f003 f922 	bl	800566e <HAL_UART_Transmit>
    ds_resp_main(3, &dist[3]);
 800242a:	4944      	ldr	r1, [pc, #272]	@ (800253c <main+0x1bc>)
 800242c:	2003      	movs	r0, #3
 800242e:	f7ff fcb3 	bl	8001d98 <ds_resp_main>
    sprintf(str, "Anchor 4 complete\r\n" );
 8002432:	4943      	ldr	r1, [pc, #268]	@ (8002540 <main+0x1c0>)
 8002434:	4839      	ldr	r0, [pc, #228]	@ (800251c <main+0x19c>)
 8002436:	f004 f80b 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 800243a:	4838      	ldr	r0, [pc, #224]	@ (800251c <main+0x19c>)
 800243c:	f7fd fe88 	bl	8000150 <strlen>
 8002440:	4603      	mov	r3, r0
 8002442:	b29a      	uxth	r2, r3
 8002444:	2364      	movs	r3, #100	@ 0x64
 8002446:	4935      	ldr	r1, [pc, #212]	@ (800251c <main+0x19c>)
 8002448:	4835      	ldr	r0, [pc, #212]	@ (8002520 <main+0x1a0>)
 800244a:	f003 f910 	bl	800566e <HAL_UART_Transmit>

    // Transmit to H7B3I or Raspi
    // sprintf(str, "\r\n30,555,1167,1291\r\n ");
    // HAL_Delay(500);
    sprintf(str, "\r\n%d,%d,%d,%d\r\n", dist[0],dist[1],dist[2],dist[3] );
 800244e:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <main+0x1a4>)
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <main+0x1a4>)
 8002454:	6858      	ldr	r0, [r3, #4]
 8002456:	4b33      	ldr	r3, [pc, #204]	@ (8002524 <main+0x1a4>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <main+0x1a4>)
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	9201      	str	r2, [sp, #4]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	4937      	ldr	r1, [pc, #220]	@ (8002544 <main+0x1c4>)
 8002468:	482c      	ldr	r0, [pc, #176]	@ (800251c <main+0x19c>)
 800246a:	f003 fff1 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800246e:	482b      	ldr	r0, [pc, #172]	@ (800251c <main+0x19c>)
 8002470:	f7fd fe6e 	bl	8000150 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	2364      	movs	r3, #100	@ 0x64
 800247a:	4928      	ldr	r1, [pc, #160]	@ (800251c <main+0x19c>)
 800247c:	4832      	ldr	r0, [pc, #200]	@ (8002548 <main+0x1c8>)
 800247e:	f003 f8f6 	bl	800566e <HAL_UART_Transmit>

    // ------------------ 여기서 부터는 H7B3I 또는 Raspi에서 ---------------------------- //
    uint8_t original_position[2];
    // Debuging print
    sprintf(str, "%d mm | %d mm | %d mm | %d mm\r\n", dist[0],dist[1],dist[2],dist[3]);
 8002482:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <main+0x1a4>)
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <main+0x1a4>)
 8002488:	6858      	ldr	r0, [r3, #4]
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <main+0x1a4>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a25      	ldr	r2, [pc, #148]	@ (8002524 <main+0x1a4>)
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	9201      	str	r2, [sp, #4]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	492c      	ldr	r1, [pc, #176]	@ (800254c <main+0x1cc>)
 800249c:	481f      	ldr	r0, [pc, #124]	@ (800251c <main+0x19c>)
 800249e:	f003 ffd7 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80024a2:	481e      	ldr	r0, [pc, #120]	@ (800251c <main+0x19c>)
 80024a4:	f7fd fe54 	bl	8000150 <strlen>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2364      	movs	r3, #100	@ 0x64
 80024ae:	491b      	ldr	r1, [pc, #108]	@ (800251c <main+0x19c>)
 80024b0:	481b      	ldr	r0, [pc, #108]	@ (8002520 <main+0x1a0>)
 80024b2:	f003 f8dc 	bl	800566e <HAL_UART_Transmit>

    // position_detecting and debuging print
    trilaterate(dist, original_position);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	481a      	ldr	r0, [pc, #104]	@ (8002524 <main+0x1a4>)
 80024bc:	f000 fa5c 	bl	8002978 <trilaterate>
    sprintf(str, "Position(cm) : (%d, %d) ", original_position[0], original_position[1]);
 80024c0:	793b      	ldrb	r3, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	797b      	ldrb	r3, [r7, #5]
 80024c6:	4922      	ldr	r1, [pc, #136]	@ (8002550 <main+0x1d0>)
 80024c8:	4814      	ldr	r0, [pc, #80]	@ (800251c <main+0x19c>)
 80024ca:	f003 ffc1 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80024ce:	4813      	ldr	r0, [pc, #76]	@ (800251c <main+0x19c>)
 80024d0:	f7fd fe3e 	bl	8000150 <strlen>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2364      	movs	r3, #100	@ 0x64
 80024da:	4910      	ldr	r1, [pc, #64]	@ (800251c <main+0x19c>)
 80024dc:	4810      	ldr	r0, [pc, #64]	@ (8002520 <main+0x1a0>)
 80024de:	f003 f8c6 	bl	800566e <HAL_UART_Transmit>


    // correction to coordinates on path
    correction(original_position, position);
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	491b      	ldr	r1, [pc, #108]	@ (8002554 <main+0x1d4>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f84e 	bl	8003588 <correction>
    sprintf(str, "---> (%d, %d)\r\n", position[0],position[1]);
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <main+0x1d4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <main+0x1d4>)
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	4918      	ldr	r1, [pc, #96]	@ (8002558 <main+0x1d8>)
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <main+0x19c>)
 80024fa:	f003 ffa9 	bl	8006450 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 100);
 80024fe:	4807      	ldr	r0, [pc, #28]	@ (800251c <main+0x19c>)
 8002500:	f7fd fe26 	bl	8000150 <strlen>
 8002504:	4603      	mov	r3, r0
 8002506:	b29a      	uxth	r2, r3
 8002508:	2364      	movs	r3, #100	@ 0x64
 800250a:	4904      	ldr	r1, [pc, #16]	@ (800251c <main+0x19c>)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <main+0x1a0>)
 800250e:	f003 f8ae 	bl	800566e <HAL_UART_Transmit>
  {
 8002512:	bf00      	nop
 8002514:	e753      	b.n	80023be <main+0x3e>
 8002516:	bf00      	nop
 8002518:	080096ac 	.word	0x080096ac
 800251c:	2000045c 	.word	0x2000045c
 8002520:	20000400 	.word	0x20000400
 8002524:	20000448 	.word	0x20000448
 8002528:	080096b4 	.word	0x080096b4
 800252c:	2000044c 	.word	0x2000044c
 8002530:	080096c8 	.word	0x080096c8
 8002534:	20000450 	.word	0x20000450
 8002538:	080096dc 	.word	0x080096dc
 800253c:	20000454 	.word	0x20000454
 8002540:	080096f0 	.word	0x080096f0
 8002544:	08009704 	.word	0x08009704
 8002548:	200003b8 	.word	0x200003b8
 800254c:	08009714 	.word	0x08009714
 8002550:	08009734 	.word	0x08009734
 8002554:	20000458 	.word	0x20000458
 8002558:	08009750 	.word	0x08009750

0800255c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b090      	sub	sp, #64	@ 0x40
 8002560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002562:	f107 0318 	add.w	r3, r7, #24
 8002566:	2228      	movs	r2, #40	@ 0x28
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f003 ffe5 	bl	800653a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002582:	2301      	movs	r3, #1
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002586:	2310      	movs	r3, #16
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258e:	f107 0318 	add.w	r3, r7, #24
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fe68 	bl	8004268 <HAL_RCC_OscConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800259e:	f000 f939 	bl	8002814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a2:	230f      	movs	r3, #15
 80025a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 f8d6 	bl	800476c <HAL_RCC_ClockConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80025c6:	f000 f925 	bl	8002814 <Error_Handler>
  }
}
 80025ca:	bf00      	nop
 80025cc:	3740      	adds	r7, #64	@ 0x40
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d8:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025da:	4a18      	ldr	r2, [pc, #96]	@ (800263c <MX_SPI1_Init+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f2:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <MX_SPI1_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <MX_SPI1_Init+0x64>)
 8002600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <MX_SPI1_Init+0x64>)
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <MX_SPI1_Init+0x64>)
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <MX_SPI1_Init+0x64>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002618:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <MX_SPI1_Init+0x64>)
 800261a:	2200      	movs	r2, #0
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <MX_SPI1_Init+0x64>)
 8002620:	220a      	movs	r2, #10
 8002622:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <MX_SPI1_Init+0x64>)
 8002626:	f002 fa2f 	bl	8004a88 <HAL_SPI_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002630:	f000 f8f0 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000308 	.word	0x20000308
 800263c:	40013000 	.word	0x40013000

08002640 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002644:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002646:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <MX_SPI2_Init+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <MX_SPI2_Init+0x64>)
 800264c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002650:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <MX_SPI2_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <MX_SPI2_Init+0x64>)
 800266c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002670:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002672:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <MX_SPI2_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002684:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <MX_SPI2_Init+0x64>)
 800268c:	220a      	movs	r2, #10
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002690:	4804      	ldr	r0, [pc, #16]	@ (80026a4 <MX_SPI2_Init+0x64>)
 8002692:	f002 f9f9 	bl	8004a88 <HAL_SPI_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800269c:	f000 f8ba 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000360 	.word	0x20000360
 80026a8:	40003800 	.word	0x40003800

080026ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <MX_USART1_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_USART1_UART_Init+0x4c>)
 80026e4:	f002 ff73 	bl	80055ce <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ee:	f000 f891 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003b8 	.word	0x200003b8
 80026fc:	40013800 	.word	0x40013800

08002700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <MX_USART2_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_USART2_UART_Init+0x4c>)
 8002738:	f002 ff49 	bl	80055ce <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f000 f867 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000400 	.word	0x20000400
 8002750:	40004400 	.word	0x40004400

08002754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <MX_GPIO_Init+0xb4>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a26      	ldr	r2, [pc, #152]	@ (8002808 <MX_GPIO_Init+0xb4>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <MX_GPIO_Init+0xb4>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <MX_GPIO_Init+0xb4>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <MX_GPIO_Init+0xb4>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_GPIO_Init+0xb4>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_GPIO_Init+0xb4>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a1a      	ldr	r2, [pc, #104]	@ (8002808 <MX_GPIO_Init+0xb4>)
 800279e:	f043 0310 	orr.w	r3, r3, #16
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_GPIO_Init+0xb4>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_NSS_Pin|DW_RESET_Pin|DW_IRQn_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f240 2113 	movw	r1, #531	@ 0x213
 80027b6:	4815      	ldr	r0, [pc, #84]	@ (800280c <MX_GPIO_Init+0xb8>)
 80027b8:	f001 fd3e 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	@ 0x80
 80027c0:	4813      	ldr	r0, [pc, #76]	@ (8002810 <MX_GPIO_Init+0xbc>)
 80027c2:	f001 fd39 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DW_NSS_Pin DW_RESET_Pin DW_IRQn_Pin PA9 */
  GPIO_InitStruct.Pin = DW_NSS_Pin|DW_RESET_Pin|DW_IRQn_Pin|GPIO_PIN_9;
 80027c6:	f240 2313 	movw	r3, #531	@ 0x213
 80027ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	4619      	mov	r1, r3
 80027de:	480b      	ldr	r0, [pc, #44]	@ (800280c <MX_GPIO_Init+0xb8>)
 80027e0:	f001 fba6 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_GPIO_Init+0xbc>)
 80027fc:	f001 fb98 	bl	8003f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	40010800 	.word	0x40010800
 8002810:	40011000 	.word	0x40011000

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4906      	ldr	r1, [pc, #24]	@ (8002854 <__NVIC_EnableIRQ+0x34>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db12      	blt.n	8002890 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	490a      	ldr	r1, [pc, #40]	@ (800289c <__NVIC_DisableIRQ+0x44>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	3320      	adds	r3, #32
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002884:	f3bf 8f4f 	dsb	sy
}
 8002888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288a:	f3bf 8f6f 	isb	sy
}
 800288e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <EXTI_GetITEnStatus+0x34>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET) ? (RESET) : (SET);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <setup_DW1000RSTnIRQ>:
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */

void setup_DW1000RSTnIRQ(int enable)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <setup_DW1000RSTnIRQ+0x38>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80028e6:	2302      	movs	r3, #2
 80028e8:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ea:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <setup_DW1000RSTnIRQ+0x6c>)
 80028ec:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	4813      	ldr	r0, [pc, #76]	@ (8002948 <setup_DW1000RSTnIRQ+0x70>)
 80028fa:	f001 fb19 	bl	8003f30 <HAL_GPIO_Init>

        //HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
        //HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);

        HAL_NVIC_EnableIRQ(EXTI4_IRQn);     //pin #0 -> EXTI #4
 80028fe:	200a      	movs	r0, #10
 8002900:	f001 faed 	bl	8003ede <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	210f      	movs	r1, #15
 8002908:	200a      	movs	r0, #10
 800290a:	f001 facc 	bl	8003ea6 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800290e:	e015      	b.n	800293c <setup_DW1000RSTnIRQ+0x64>
        HAL_NVIC_DisableIRQ(EXTI4_IRQn);    //pin #0 -> EXTI #4
 8002910:	200a      	movs	r0, #10
 8002912:	f001 faf2 	bl	8003efa <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002916:	2302      	movs	r3, #2
 8002918:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800291a:	2311      	movs	r3, #17
 800291c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	4619      	mov	r1, r3
 800292c:	4806      	ldr	r0, [pc, #24]	@ (8002948 <setup_DW1000RSTnIRQ+0x70>)
 800292e:	f001 faff 	bl	8003f30 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8002932:	2201      	movs	r2, #1
 8002934:	2102      	movs	r1, #2
 8002936:	4804      	ldr	r0, [pc, #16]	@ (8002948 <setup_DW1000RSTnIRQ+0x70>)
 8002938:	f001 fc7e 	bl	8004238 <HAL_GPIO_WritePin>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	10110000 	.word	0x10110000
 8002948:	40010800 	.word	0x40010800

0800294c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8002950:	200a      	movs	r0, #10
 8002952:	f7ff ff81 	bl	8002858 <__NVIC_DisableIRQ>
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}

0800295a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800295e:	200a      	movs	r0, #10
 8002960:	f7ff ff5e 	bl	8002820 <__NVIC_EnableIRQ>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800296c:	200a      	movs	r0, #10
 800296e:	f7ff ff97 	bl	80028a0 <EXTI_GetITEnStatus>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}

08002978 <trilaterate>:
#include <math.h>
#include <stdint.h>

// Function to calculate the position using trilateration
// Returns 1 on success, 0 on failure
int trilaterate(int distances[4], uint8_t position[2]) {
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b0f8      	sub	sp, #480	@ 0x1e0
 800297e:	af00      	add	r7, sp, #0
 8002980:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002984:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002988:	6018      	str	r0, [r3, #0]
 800298a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800298e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002992:	6019      	str	r1, [r3, #0]
    // Anchor coordinates
    double x1 = 10, y1 = 10;
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	4bbf      	ldr	r3, [pc, #764]	@ (8002c98 <trilaterate+0x320>)
 800299a:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	4bbd      	ldr	r3, [pc, #756]	@ (8002c98 <trilaterate+0x320>)
 80029a4:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    double x2 = 590, y2 = 10;
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4bbb      	ldr	r3, [pc, #748]	@ (8002c9c <trilaterate+0x324>)
 80029ae:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	4bb8      	ldr	r3, [pc, #736]	@ (8002c98 <trilaterate+0x320>)
 80029b8:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    double x3 = 10, y3 = 1190;
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002c98 <trilaterate+0x320>)
 80029c2:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
 80029c6:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002c90 <trilaterate+0x318>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    double x4 = 590, y4 = 1190;
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	4bb1      	ldr	r3, [pc, #708]	@ (8002c9c <trilaterate+0x324>)
 80029d6:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
 80029da:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002c90 <trilaterate+0x318>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180

    double d1 = distances[0];
 80029e4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80029e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd07 	bl	8000404 <__aeabi_i2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    double d2 = distances[1];
 80029fe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002a02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fcf9 	bl	8000404 <__aeabi_i2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    double d3 = distances[2];
 8002a1a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002a1e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3308      	adds	r3, #8
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fceb 	bl	8000404 <__aeabi_i2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    double d4 = distances[3];
 8002a36:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8002a3a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fcdd 	bl	8000404 <__aeabi_i2d>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Matrix A (6x2)
    double A[6][2] = {
        {2 * (x2 - x1), 2 * (y2 - y1)},
 8002a52:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8002a56:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8002a5a:	f7fd fb85 	bl	8000168 <__aeabi_dsub>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	f7fd fb7f 	bl	800016c <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
    double A[6][2] = {
 8002a72:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
        {2 * (x2 - x1), 2 * (y2 - y1)},
 8002a76:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002a7a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002a7e:	f7fd fb73 	bl	8000168 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	f7fd fb6d 	bl	800016c <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
    double A[6][2] = {
 8002a96:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
        {2 * (x3 - x1), 2 * (y3 - y1)},
 8002a9a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8002a9e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002aa2:	f7fd fb61 	bl	8000168 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	f7fd fb5b 	bl	800016c <__adddf3>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
    double A[6][2] = {
 8002aba:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
        {2 * (x3 - x1), 2 * (y3 - y1)},
 8002abe:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002ac2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002ac6:	f7fd fb4f 	bl	8000168 <__aeabi_dsub>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	f7fd fb49 	bl	800016c <__adddf3>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
    double A[6][2] = {
 8002ade:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        {2 * (x4 - x1), 2 * (y4 - y1)},
 8002ae2:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8002ae6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002aea:	f7fd fb3d 	bl	8000168 <__aeabi_dsub>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	f7fd fb37 	bl	800016c <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
    double A[6][2] = {
 8002b02:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
        {2 * (x4 - x1), 2 * (y4 - y1)},
 8002b06:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002b0a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8002b0e:	f7fd fb2b 	bl	8000168 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	f7fd fb25 	bl	800016c <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
    double A[6][2] = {
 8002b26:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        {2 * (x3 - x2), 2 * (y3 - y2)},
 8002b2a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8002b2e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002b32:	f7fd fb19 	bl	8000168 <__aeabi_dsub>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	f7fd fb13 	bl	800016c <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
    double A[6][2] = {
 8002b4a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        {2 * (x3 - x2), 2 * (y3 - y2)},
 8002b4e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8002b52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002b56:	f7fd fb07 	bl	8000168 <__aeabi_dsub>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	f7fd fb01 	bl	800016c <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
    double A[6][2] = {
 8002b6e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
        {2 * (x4 - x2), 2 * (y4 - y2)},
 8002b72:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8002b76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002b7a:	f7fd faf5 	bl	8000168 <__aeabi_dsub>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	f7fd faef 	bl	800016c <__adddf3>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
    double A[6][2] = {
 8002b92:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
        {2 * (x4 - x2), 2 * (y4 - y2)},
 8002b96:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8002b9a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8002b9e:	f7fd fae3 	bl	8000168 <__aeabi_dsub>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	f7fd fadd 	bl	800016c <__adddf3>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
    double A[6][2] = {
 8002bb6:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
        {2 * (x4 - x3), 2 * (y4 - y3)}
 8002bba:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8002bbe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002bc2:	f7fd fad1 	bl	8000168 <__aeabi_dsub>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	f7fd facb 	bl	800016c <__adddf3>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
    double A[6][2] = {
 8002bda:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
        {2 * (x4 - x3), 2 * (y4 - y3)}
 8002bde:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002be2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8002be6:	f7fd fabf 	bl	8000168 <__aeabi_dsub>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	f7fd fab9 	bl	800016c <__adddf3>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
    double A[6][2] = {
 8002bfe:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
    };

    // Vector b (6x1)
    double b[6] = {
        pow(d1, 2) - pow(d2, 2) - pow(x1, 2) + pow(x2, 2) - pow(y1, 2) + pow(y2, 2),
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c0a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002c0e:	f005 fd6b 	bl	80086e8 <pow>
 8002c12:	4604      	mov	r4, r0
 8002c14:	460d      	mov	r5, r1
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c1e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8002c22:	f005 fd61 	bl	80086e8 <pow>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fa9b 	bl	8000168 <__aeabi_dsub>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4614      	mov	r4, r2
 8002c38:	461d      	mov	r5, r3
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c42:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002c46:	f005 fd4f 	bl	80086e8 <pow>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	f7fd fa89 	bl	8000168 <__aeabi_dsub>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c66:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8002c6a:	f005 fd3d 	bl	80086e8 <pow>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f7fd fa79 	bl	800016c <__adddf3>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461d      	mov	r5, r3
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c8a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8002c8e:	e007      	b.n	8002ca0 <trilaterate+0x328>
 8002c90:	00000000 	.word	0x00000000
 8002c94:	40929800 	.word	0x40929800
 8002c98:	40240000 	.word	0x40240000
 8002c9c:	40827000 	.word	0x40827000
 8002ca0:	f005 fd22 	bl	80086e8 <pow>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd fa5c 	bl	8000168 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cc0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002cc4:	f005 fd10 	bl	80086e8 <pow>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fa4c 	bl	800016c <__adddf3>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
    double b[6] = {
 8002cd8:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8002cdc:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8002ce0:	e9c1 2300 	strd	r2, r3, [r1]
        pow(d1, 2) - pow(d3, 2) - pow(x1, 2) + pow(x3, 2) - pow(y1, 2) + pow(y3, 2),
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cec:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002cf0:	f005 fcfa 	bl	80086e8 <pow>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d00:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002d04:	f005 fcf0 	bl	80086e8 <pow>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd fa2a 	bl	8000168 <__aeabi_dsub>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d24:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002d28:	f005 fcde 	bl	80086e8 <pow>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4620      	mov	r0, r4
 8002d32:	4629      	mov	r1, r5
 8002d34:	f7fd fa18 	bl	8000168 <__aeabi_dsub>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002d4c:	f005 fccc 	bl	80086e8 <pow>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fa08 	bl	800016c <__adddf3>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d6c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8002d70:	f005 fcba 	bl	80086e8 <pow>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd f9f4 	bl	8000168 <__aeabi_dsub>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002d94:	f005 fca8 	bl	80086e8 <pow>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd f9e4 	bl	800016c <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
    double b[6] = {
 8002da8:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8002dac:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8002db0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        pow(d1, 2) - pow(d4, 2) - pow(x1, 2) + pow(x4, 2) - pow(y1, 2) + pow(y4, 2),
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002dbc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002dc0:	f005 fc92 	bl	80086e8 <pow>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002dd0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8002dd4:	f005 fc88 	bl	80086e8 <pow>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	f7fd f9c2 	bl	8000168 <__aeabi_dsub>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002df4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002df8:	f005 fc76 	bl	80086e8 <pow>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4620      	mov	r0, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	f7fd f9b0 	bl	8000168 <__aeabi_dsub>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	461d      	mov	r5, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e18:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002e1c:	f005 fc64 	bl	80086e8 <pow>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd f9a0 	bl	800016c <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e3c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8002e40:	f005 fc52 	bl	80086e8 <pow>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	f7fd f98c 	bl	8000168 <__aeabi_dsub>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e60:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8002e64:	f005 fc40 	bl	80086e8 <pow>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd f97c 	bl	800016c <__adddf3>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
    double b[6] = {
 8002e78:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8002e7c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8002e80:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pow(d2, 2) - pow(d3, 2) - pow(x2, 2) + pow(x3, 2) - pow(y2, 2) + pow(y3, 2),
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e8c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8002e90:	f005 fc2a 	bl	80086e8 <pow>
 8002e94:	4604      	mov	r4, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ea0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002ea4:	f005 fc20 	bl	80086e8 <pow>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd f95a 	bl	8000168 <__aeabi_dsub>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ec4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8002ec8:	f005 fc0e 	bl	80086e8 <pow>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	f7fd f948 	bl	8000168 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ee8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002eec:	f005 fbfc 	bl	80086e8 <pow>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f938 	bl	800016c <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f0c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002f10:	f005 fbea 	bl	80086e8 <pow>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f924 	bl	8000168 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	461d      	mov	r5, r3
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002f34:	f005 fbd8 	bl	80086e8 <pow>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd f914 	bl	800016c <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
    double b[6] = {
 8002f48:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8002f4c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8002f50:	e9c1 2306 	strd	r2, r3, [r1, #24]
        pow(d2, 2) - pow(d4, 2) - pow(x2, 2) + pow(x4, 2) - pow(y2, 2) + pow(y4, 2),
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f5c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8002f60:	f005 fbc2 	bl	80086e8 <pow>
 8002f64:	4604      	mov	r4, r0
 8002f66:	460d      	mov	r5, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f70:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8002f74:	f005 fbb8 	bl	80086e8 <pow>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	f7fd f8f2 	bl	8000168 <__aeabi_dsub>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f94:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8002f98:	f005 fba6 	bl	80086e8 <pow>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f8e0 	bl	8000168 <__aeabi_dsub>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fb8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002fbc:	f005 fb94 	bl	80086e8 <pow>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd f8d0 	bl	800016c <__adddf3>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fdc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002fe0:	f005 fb82 	bl	80086e8 <pow>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f8bc 	bl	8000168 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003000:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8003004:	f005 fb70 	bl	80086e8 <pow>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f8ac 	bl	800016c <__adddf3>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
    double b[6] = {
 8003018:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 800301c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 8003020:	e9c1 2308 	strd	r2, r3, [r1, #32]
        pow(d3, 2) - pow(d4, 2) - pow(x3, 2) + pow(x4, 2) - pow(y3, 2) + pow(y4, 2)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800302c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003030:	f005 fb5a 	bl	80086e8 <pow>
 8003034:	4604      	mov	r4, r0
 8003036:	460d      	mov	r5, r1
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003040:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8003044:	f005 fb50 	bl	80086e8 <pow>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4620      	mov	r0, r4
 800304e:	4629      	mov	r1, r5
 8003050:	f7fd f88a 	bl	8000168 <__aeabi_dsub>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003064:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003068:	f005 fb3e 	bl	80086e8 <pow>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4620      	mov	r0, r4
 8003072:	4629      	mov	r1, r5
 8003074:	f7fd f878 	bl	8000168 <__aeabi_dsub>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4614      	mov	r4, r2
 800307e:	461d      	mov	r5, r3
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003088:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800308c:	f005 fb2c 	bl	80086e8 <pow>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4620      	mov	r0, r4
 8003096:	4629      	mov	r1, r5
 8003098:	f7fd f868 	bl	800016c <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80030ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80030b0:	f005 fb1a 	bl	80086e8 <pow>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd f854 	bl	8000168 <__aeabi_dsub>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80030d0:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80030d4:	f005 fb08 	bl	80086e8 <pow>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4620      	mov	r0, r4
 80030de:	4629      	mov	r1, r5
 80030e0:	f7fd f844 	bl	800016c <__adddf3>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
    double b[6] = {
 80030e8:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80030ec:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 80030f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    };

    // Transpose of A (A_T is 2x6)
    double A_T[2][6];
    for (int i = 0; i < 6; i++) {
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80030fa:	e031      	b.n	8003160 <trilaterate+0x7e8>
        for (int j = 0; j < 2; j++) {
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8003102:	e024      	b.n	800314e <trilaterate+0x7d6>
            A_T[j][i] = A[i][j];
 8003104:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8003108:	005a      	lsls	r2, r3, #1
 800310a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003116:	f107 0208 	add.w	r2, r7, #8
 800311a:	4413      	add	r3, r2
 800311c:	3bf0      	subs	r3, #240	@ 0xf0
 800311e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003122:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003126:	f5a3 74c0 	sub.w	r4, r3, #384	@ 0x180
 800312a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4423      	add	r3, r4
 8003140:	e9c3 0100 	strd	r0, r1, [r3]
        for (int j = 0; j < 2; j++) {
 8003144:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003148:	3301      	adds	r3, #1
 800314a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800314e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8003152:	2b01      	cmp	r3, #1
 8003154:	ddd6      	ble.n	8003104 <trilaterate+0x78c>
    for (int i = 0; i < 6; i++) {
 8003156:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800315a:	3301      	adds	r3, #1
 800315c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003160:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8003164:	2b05      	cmp	r3, #5
 8003166:	ddc9      	ble.n	80030fc <trilaterate+0x784>
        }
    }

    // A_T * A (AtA is 2x2)
    double AtA[2][2] = {{0, 0}, {0, 0}};
 8003168:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800316c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003170:	4618      	mov	r0, r3
 8003172:	2320      	movs	r3, #32
 8003174:	461a      	mov	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	f003 f9df 	bl	800653a <memset>
    for (int i = 0; i < 2; i++) {
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003182:	e064      	b.n	800324e <trilaterate+0x8d6>
        for (int j = 0; j < 2; j++) {
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800318a:	e057      	b.n	800323c <trilaterate+0x8c4>
            for (int k = 0; k < 6; k++) {
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003192:	e04a      	b.n	800322a <trilaterate+0x8b2>
                AtA[i][j] += A_T[i][k] * A[k][j];
 8003194:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003198:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 800319c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80031a0:	0059      	lsls	r1, r3, #1
 80031a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80031a6:	440b      	add	r3, r1
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031b0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80031b4:	f5a3 71c0 	sub.w	r1, r3, #384	@ 0x180
 80031b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80031d6:	005a      	lsls	r2, r3, #1
 80031d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80031e4:	f107 0208 	add.w	r2, r7, #8
 80031e8:	4413      	add	r3, r2
 80031ea:	3bf0      	subs	r3, #240	@ 0xf0
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f7fd f972 	bl	80004d8 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc ffb6 	bl	800016c <__adddf3>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8003208:	f5a1 70d0 	sub.w	r0, r1, #416	@ 0x1a0
 800320c:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 8003210:	004c      	lsls	r4, r1, #1
 8003212:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8003216:	4421      	add	r1, r4
 8003218:	00c9      	lsls	r1, r1, #3
 800321a:	4401      	add	r1, r0
 800321c:	e9c1 2300 	strd	r2, r3, [r1]
            for (int k = 0; k < 6; k++) {
 8003220:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800322a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800322e:	2b05      	cmp	r3, #5
 8003230:	ddb0      	ble.n	8003194 <trilaterate+0x81c>
        for (int j = 0; j < 2; j++) {
 8003232:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800323c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003240:	2b01      	cmp	r3, #1
 8003242:	dda3      	ble.n	800318c <trilaterate+0x814>
    for (int i = 0; i < 2; i++) {
 8003244:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003248:	3301      	adds	r3, #1
 800324a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800324e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003252:	2b01      	cmp	r3, #1
 8003254:	dd96      	ble.n	8003184 <trilaterate+0x80c>
            }
        }
    }

    // A_T * b (Atb is 2x1)
    double Atb[2] = {0, 0};
 8003256:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800325a:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9c1 2300 	strd	r2, r3, [r1]
 800326a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800326e:	f5a3 71d8 	sub.w	r1, r3, #432	@ 0x1b0
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    for (int i = 0; i < 2; i++) {
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003284:	e04a      	b.n	800331c <trilaterate+0x9a4>
        for (int j = 0; j < 6; j++) {
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800328c:	e03d      	b.n	800330a <trilaterate+0x992>
            Atb[i] += A_T[i][j] * b[j];
 800328e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003292:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8003296:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032a2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80032a6:	f5a3 71c0 	sub.w	r1, r3, #384	@ 0x180
 80032aa:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80032c8:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80032cc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd f8fe 	bl	80004d8 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fc ff42 	bl	800016c <__adddf3>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80032f0:	f5a1 70d8 	sub.w	r0, r1, #432	@ 0x1b0
 80032f4:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 80032f8:	00c9      	lsls	r1, r1, #3
 80032fa:	4401      	add	r1, r0
 80032fc:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < 6; j++) {
 8003300:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003304:	3301      	adds	r3, #1
 8003306:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800330a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800330e:	2b05      	cmp	r3, #5
 8003310:	ddbd      	ble.n	800328e <trilaterate+0x916>
    for (int i = 0; i < 2; i++) {
 8003312:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003316:	3301      	adds	r3, #1
 8003318:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800331c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003320:	2b01      	cmp	r3, #1
 8003322:	ddb0      	ble.n	8003286 <trilaterate+0x90e>
        }
    }

    // Inverse of AtA
    // For a 2x2 matrix [[a, b], [c, d]], the inverse is (1/det) * [[d, -b], [-c, a]]
    double det = AtA[0][0] * AtA[1][1] - AtA[0][1] * AtA[1][0];
 8003324:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003328:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800332c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003330:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003334:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003338:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800333c:	f7fd f8cc 	bl	80004d8 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800334c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003350:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003354:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003358:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800335c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003360:	f7fd f8ba 	bl	80004d8 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4620      	mov	r0, r4
 800336a:	4629      	mov	r1, r5
 800336c:	f7fc fefc 	bl	8000168 <__aeabi_dsub>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158

    if (fabs(det) < 1e-6) { // Check if the determinant is close to zero
 8003378:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	a37b      	add	r3, pc, #492	@ (adr r3, 8003578 <trilaterate+0xc00>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003392:	f7fd fb13 	bl	80009bc <__aeabi_dcmplt>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <trilaterate+0xa28>
        return 0; // Cannot compute the position
 800339c:	2300      	movs	r3, #0
 800339e:	e0e4      	b.n	800356a <trilaterate+0xbf2>
    }

    double inv_det = 1.0 / det;
 80033a0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	4975      	ldr	r1, [pc, #468]	@ (8003580 <trilaterate+0xc08>)
 80033aa:	f7fd f9bf 	bl	800072c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    double AtA_inv[2][2];
    AtA_inv[0][0] = AtA[1][1] * inv_det;
 80033b6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80033ba:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80033be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80033c2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80033c6:	f7fd f887 	bl	80004d8 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 80033d2:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80033d6:	e9c1 2300 	strd	r2, r3, [r1]
    AtA_inv[0][1] = -AtA[0][1] * inv_det;
 80033da:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80033de:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80033e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033e6:	4692      	mov	sl, r2
 80033e8:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80033ec:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80033f0:	4650      	mov	r0, sl
 80033f2:	4659      	mov	r1, fp
 80033f4:	f7fd f870 	bl	80004d8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8003400:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003404:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AtA_inv[1][0] = -AtA[1][0] * inv_det;
 8003408:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800340c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003410:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003414:	4690      	mov	r8, r2
 8003416:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800341a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800341e:	4640      	mov	r0, r8
 8003420:	4649      	mov	r1, r9
 8003422:	f7fd f859 	bl	80004d8 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 800342e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003432:	e9c1 2304 	strd	r2, r3, [r1, #16]
    AtA_inv[1][1] = AtA[0][0] * inv_det;
 8003436:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800343a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800343e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003442:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8003446:	f7fd f847 	bl	80004d8 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8003452:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003456:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // position = AtA_inv * Atb
    position[0] = (uint8_t)round((AtA_inv[0][0] * Atb[0] + AtA_inv[0][1] * Atb[1])/10); // mm to cm
 800345a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800345e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003466:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800346a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f831 	bl	80004d8 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	461d      	mov	r5, r3
 800347e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003482:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003486:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800348a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800348e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003492:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003496:	f7fd f81f 	bl	80004d8 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fc fe63 	bl	800016c <__adddf3>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <trilaterate+0xc0c>)
 80034b4:	f7fd f93a 	bl	800072c <__aeabi_ddiv>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f005 f980 	bl	80087c4 <round>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd fadc 	bl	8000a88 <__aeabi_d2uiz>
 80034d0:	4603      	mov	r3, r0
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80034d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	701a      	strb	r2, [r3, #0]
    position[1] = (uint8_t)round((AtA_inv[1][0] * Atb[0] + AtA_inv[1][1] * Atb[1])/10); // mm to cm
 80034e0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80034e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80034ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80034f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fc ffee 	bl	80004d8 <__aeabi_dmul>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003508:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800350c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003510:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8003514:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003518:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800351c:	f7fc ffdc 	bl	80004d8 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc fe20 	bl	800016c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <trilaterate+0xc0c>)
 800353a:	f7fd f8f7 	bl	800072c <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f005 f93d 	bl	80087c4 <round>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8003552:	f5a1 71ec 	sub.w	r1, r1, #472	@ 0x1d8
 8003556:	6809      	ldr	r1, [r1, #0]
 8003558:	1c4c      	adds	r4, r1, #1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f7fd fa93 	bl	8000a88 <__aeabi_d2uiz>
 8003562:	4603      	mov	r3, r0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	7023      	strb	r3, [r4, #0]

    return 1;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	a0b5ed8d 	.word	0xa0b5ed8d
 800357c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003580:	3ff00000 	.word	0x3ff00000
 8003584:	40240000 	.word	0x40240000

08003588 <correction>:
    }

    return 1;
}

void correction(uint8_t original_position[2], uint8_t position[2]){
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
    int row = original_position[0];
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
    int col = original_position[1];
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3301      	adds	r3, #1
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	60bb      	str	r3, [r7, #8]

    if (row <= 9){
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	dc15      	bgt.n	80035d2 <correction+0x4a>
        if(col <= 24){
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b18      	cmp	r3, #24
 80035aa:	dc04      	bgt.n	80035b6 <correction+0x2e>
            row = 9;
 80035ac:	2309      	movs	r3, #9
 80035ae:	60fb      	str	r3, [r7, #12]
            col = 24;
 80035b0:	2318      	movs	r3, #24
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	e07f      	b.n	80036b6 <correction+0x12e>
        }else if(col >24 && col <94){
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b18      	cmp	r3, #24
 80035ba:	dd05      	ble.n	80035c8 <correction+0x40>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b5d      	cmp	r3, #93	@ 0x5d
 80035c0:	dc02      	bgt.n	80035c8 <correction+0x40>
            row = 9;
 80035c2:	2309      	movs	r3, #9
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e076      	b.n	80036b6 <correction+0x12e>
        }else{
            row = 9;
 80035c8:	2309      	movs	r3, #9
 80035ca:	60fb      	str	r3, [r7, #12]
            col = 94;
 80035cc:	235e      	movs	r3, #94	@ 0x5e
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e071      	b.n	80036b6 <correction+0x12e>
        }
    }else if(row > 9 && row < 54){
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	dd52      	ble.n	800367e <correction+0xf6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b35      	cmp	r3, #53	@ 0x35
 80035dc:	dc4f      	bgt.n	800367e <correction+0xf6>
        if(col <= 24){
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b18      	cmp	r3, #24
 80035e2:	dc02      	bgt.n	80035ea <correction+0x62>
            col = 24;
 80035e4:	2318      	movs	r3, #24
 80035e6:	60bb      	str	r3, [r7, #8]
        if(col <= 24){
 80035e8:	e065      	b.n	80036b6 <correction+0x12e>
        }else if(col<row+13 && col<76-row && col>24){
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	330c      	adds	r3, #12
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dc0b      	bgt.n	800360c <correction+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f1c3 034c 	rsb	r3, r3, #76	@ 0x4c
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	da05      	bge.n	800360c <correction+0x84>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b18      	cmp	r3, #24
 8003604:	dd02      	ble.n	800360c <correction+0x84>
            col = 24;
 8003606:	2318      	movs	r3, #24
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	e037      	b.n	800367c <correction+0xf4>
        }else if(row<30 && col>row+15 && col>101-row){
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b1d      	cmp	r3, #29
 8003610:	dc0d      	bgt.n	800362e <correction+0xa6>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	330f      	adds	r3, #15
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	dd08      	ble.n	800362e <correction+0xa6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f1c3 0365 	rsb	r3, r3, #101	@ 0x65
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	dd02      	ble.n	800362e <correction+0xa6>
            row = 9;
 8003628:	2309      	movs	r3, #9
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e026      	b.n	800367c <correction+0xf4>
        }else if(col>105-row && col>row+42 && col<94){
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f1c3 0369 	rsb	r3, r3, #105	@ 0x69
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	dd0a      	ble.n	8003650 <correction+0xc8>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	332a      	adds	r3, #42	@ 0x2a
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	dd05      	ble.n	8003650 <correction+0xc8>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b5d      	cmp	r3, #93	@ 0x5d
 8003648:	dc02      	bgt.n	8003650 <correction+0xc8>
            col = 94;
 800364a:	235e      	movs	r3, #94	@ 0x5e
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	e015      	b.n	800367c <correction+0xf4>
        }else if(col >= 94){
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b5d      	cmp	r3, #93	@ 0x5d
 8003654:	dd02      	ble.n	800365c <correction+0xd4>
            col = 94;
 8003656:	235e      	movs	r3, #94	@ 0x5e
 8003658:	60bb      	str	r3, [r7, #8]
        if(col <= 24){
 800365a:	e02c      	b.n	80036b6 <correction+0x12e>
        }else if(row>33 && col<80-row && col<row+38){
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b21      	cmp	r3, #33	@ 0x21
 8003660:	dd33      	ble.n	80036ca <correction+0x142>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	da2d      	bge.n	80036ca <correction+0x142>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3325      	adds	r3, #37	@ 0x25
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	dc28      	bgt.n	80036ca <correction+0x142>
            row = 54;
 8003678:	2336      	movs	r3, #54	@ 0x36
 800367a:	60fb      	str	r3, [r7, #12]
        if(col <= 24){
 800367c:	e01b      	b.n	80036b6 <correction+0x12e>
        }else{
            return;
        }
    }else if(row>=54 && row<60){
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b35      	cmp	r3, #53	@ 0x35
 8003682:	dd24      	ble.n	80036ce <correction+0x146>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b3b      	cmp	r3, #59	@ 0x3b
 8003688:	dc21      	bgt.n	80036ce <correction+0x146>
        if(col<=24){
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b18      	cmp	r3, #24
 800368e:	dc04      	bgt.n	800369a <correction+0x112>
            row = 54;
 8003690:	2336      	movs	r3, #54	@ 0x36
 8003692:	60fb      	str	r3, [r7, #12]
            col = 24;
 8003694:	2318      	movs	r3, #24
 8003696:	60bb      	str	r3, [r7, #8]
        if(col<=24){
 8003698:	e00c      	b.n	80036b4 <correction+0x12c>
        }else if(col>24 && col<94){
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b18      	cmp	r3, #24
 800369e:	dd05      	ble.n	80036ac <correction+0x124>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b5d      	cmp	r3, #93	@ 0x5d
 80036a4:	dc02      	bgt.n	80036ac <correction+0x124>
            row = 54;
 80036a6:	2336      	movs	r3, #54	@ 0x36
 80036a8:	60fb      	str	r3, [r7, #12]
        if(col<=24){
 80036aa:	e003      	b.n	80036b4 <correction+0x12c>
        }else{
            row = 54;
 80036ac:	2336      	movs	r3, #54	@ 0x36
 80036ae:	60fb      	str	r3, [r7, #12]
            col = 94;
 80036b0:	235e      	movs	r3, #94	@ 0x5e
 80036b2:	60bb      	str	r3, [r7, #8]
        if(col<=24){
 80036b4:	bf00      	nop
        }
    }else{
      return;
    }

    position[0] = row;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
    position[1] = col;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e002      	b.n	80036d0 <correction+0x148>
            return;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <correction+0x148>
      return;
 80036ce:	bf00      	nop
}
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_MspInit+0x5c>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	4a14      	ldr	r2, [pc, #80]	@ (8003734 <HAL_MspInit+0x5c>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6193      	str	r3, [r2, #24]
 80036ea:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_MspInit+0x5c>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <HAL_MspInit+0x5c>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003734 <HAL_MspInit+0x5c>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003700:	61d3      	str	r3, [r2, #28]
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <HAL_MspInit+0x5c>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800370e:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_MspInit+0x60>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <HAL_MspInit+0x60>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000

0800373c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0318 	add.w	r3, r7, #24
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a37      	ldr	r2, [pc, #220]	@ (8003834 <HAL_SPI_MspInit+0xf8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d130      	bne.n	80037be <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800375c:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4a35      	ldr	r2, [pc, #212]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 8003762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003766:	6193      	str	r3, [r2, #24]
 8003768:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b30      	ldr	r3, [pc, #192]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6193      	str	r3, [r2, #24]
 8003780:	4b2d      	ldr	r3, [pc, #180]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800378c:	23a0      	movs	r3, #160	@ 0xa0
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	4619      	mov	r1, r3
 800379e:	4827      	ldr	r0, [pc, #156]	@ (800383c <HAL_SPI_MspInit+0x100>)
 80037a0:	f000 fbc6 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037a4:	2340      	movs	r3, #64	@ 0x40
 80037a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 0318 	add.w	r3, r7, #24
 80037b4:	4619      	mov	r1, r3
 80037b6:	4821      	ldr	r0, [pc, #132]	@ (800383c <HAL_SPI_MspInit+0x100>)
 80037b8:	f000 fbba 	bl	8003f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80037bc:	e036      	b.n	800382c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <HAL_SPI_MspInit+0x104>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d131      	bne.n	800382c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d2:	61d3      	str	r3, [r2, #28]
 80037d4:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e0:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	4a14      	ldr	r2, [pc, #80]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037e6:	f043 0308 	orr.w	r3, r3, #8
 80037ea:	6193      	str	r3, [r2, #24]
 80037ec:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_SPI_MspInit+0xfc>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80037f8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	f107 0318 	add.w	r3, r7, #24
 800380a:	4619      	mov	r1, r3
 800380c:	480d      	ldr	r0, [pc, #52]	@ (8003844 <HAL_SPI_MspInit+0x108>)
 800380e:	f000 fb8f 	bl	8003f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003812:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003820:	f107 0318 	add.w	r3, r7, #24
 8003824:	4619      	mov	r1, r3
 8003826:	4807      	ldr	r0, [pc, #28]	@ (8003844 <HAL_SPI_MspInit+0x108>)
 8003828:	f000 fb82 	bl	8003f30 <HAL_GPIO_Init>
}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40013000 	.word	0x40013000
 8003838:	40021000 	.word	0x40021000
 800383c:	40010800 	.word	0x40010800
 8003840:	40003800 	.word	0x40003800
 8003844:	40010c00 	.word	0x40010c00

08003848 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	@ 0x30
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3d      	ldr	r2, [pc, #244]	@ (8003958 <HAL_UART_MspInit+0x110>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d13e      	bne.n	80038e6 <HAL_UART_MspInit+0x9e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003868:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <HAL_UART_MspInit+0x114>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4a3b      	ldr	r2, [pc, #236]	@ (800395c <HAL_UART_MspInit+0x114>)
 800386e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003872:	6193      	str	r3, [r2, #24]
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_UART_MspInit+0x114>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003880:	4b36      	ldr	r3, [pc, #216]	@ (800395c <HAL_UART_MspInit+0x114>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4a35      	ldr	r2, [pc, #212]	@ (800395c <HAL_UART_MspInit+0x114>)
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	6193      	str	r3, [r2, #24]
 800388c:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_UART_MspInit+0x114>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003898:	2340      	movs	r3, #64	@ 0x40
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	f107 031c 	add.w	r3, r7, #28
 80038a8:	4619      	mov	r1, r3
 80038aa:	482d      	ldr	r0, [pc, #180]	@ (8003960 <HAL_UART_MspInit+0x118>)
 80038ac:	f000 fb40 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	4619      	mov	r1, r3
 80038c2:	4827      	ldr	r0, [pc, #156]	@ (8003960 <HAL_UART_MspInit+0x118>)
 80038c4:	f000 fb34 	bl	8003f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80038c8:	4b26      	ldr	r3, [pc, #152]	@ (8003964 <HAL_UART_MspInit+0x11c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038de:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <HAL_UART_MspInit+0x11c>)
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80038e4:	e034      	b.n	8003950 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003968 <HAL_UART_MspInit+0x120>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d12f      	bne.n	8003950 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_UART_MspInit+0x114>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a19      	ldr	r2, [pc, #100]	@ (800395c <HAL_UART_MspInit+0x114>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fa:	61d3      	str	r3, [r2, #28]
 80038fc:	4b17      	ldr	r3, [pc, #92]	@ (800395c <HAL_UART_MspInit+0x114>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003908:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_UART_MspInit+0x114>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4a13      	ldr	r2, [pc, #76]	@ (800395c <HAL_UART_MspInit+0x114>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6193      	str	r3, [r2, #24]
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_UART_MspInit+0x114>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003920:	2304      	movs	r3, #4
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	4619      	mov	r1, r3
 8003932:	480e      	ldr	r0, [pc, #56]	@ (800396c <HAL_UART_MspInit+0x124>)
 8003934:	f000 fafc 	bl	8003f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003938:	2308      	movs	r3, #8
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393c:	2300      	movs	r3, #0
 800393e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	f107 031c 	add.w	r3, r7, #28
 8003948:	4619      	mov	r1, r3
 800394a:	4808      	ldr	r0, [pc, #32]	@ (800396c <HAL_UART_MspInit+0x124>)
 800394c:	f000 faf0 	bl	8003f30 <HAL_GPIO_Init>
}
 8003950:	bf00      	nop
 8003952:	3730      	adds	r7, #48	@ 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40010c00 	.word	0x40010c00
 8003964:	40010000 	.word	0x40010000
 8003968:	40004400 	.word	0x40004400
 800396c:	40010800 	.word	0x40010800

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <NMI_Handler+0x4>

08003978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <MemManage_Handler+0x4>

08003988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <UsageFault_Handler+0x4>

08003998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c0:	f000 f936 	bl	8003c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return 1;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <_kill>:

int _kill(int pid, int sig)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039e0:	f002 fdfe 	bl	80065e0 <__errno>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2216      	movs	r2, #22
 80039e8:	601a      	str	r2, [r3, #0]
  return -1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_exit>:

void _exit (int status)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ffe7 	bl	80039d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <_exit+0x12>

08003a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e00a      	b.n	8003a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a1e:	f3af 8000 	nop.w
 8003a22:	4601      	mov	r1, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	60ba      	str	r2, [r7, #8]
 8003a2a:	b2ca      	uxtb	r2, r1
 8003a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	dbf0      	blt.n	8003a1e <_read+0x12>
  }

  return len;
 8003a3c:	687b      	ldr	r3, [r7, #4]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e009      	b.n	8003a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	60ba      	str	r2, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	dbf1      	blt.n	8003a58 <_write+0x12>
  }
  return len;
 8003a74:	687b      	ldr	r3, [r7, #4]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_close>:

int _close(int file)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <_isatty>:

int _isatty(int file)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <_sbrk+0x5c>)
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <_sbrk+0x60>)
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <_sbrk+0x64>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <_sbrk+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d207      	bcs.n	8003b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b10:	f002 fd66 	bl	80065e0 <__errno>
 8003b14:	4603      	mov	r3, r0
 8003b16:	220c      	movs	r2, #12
 8003b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e009      	b.n	8003b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b20:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <_sbrk+0x64>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <_sbrk+0x64>)
 8003b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20005000 	.word	0x20005000
 8003b40:	00000400 	.word	0x00000400
 8003b44:	20000490 	.word	0x20000490
 8003b48:	200005e8 	.word	0x200005e8

08003b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b58:	f7ff fff8 	bl	8003b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b5c:	480b      	ldr	r0, [pc, #44]	@ (8003b8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b5e:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b60:	4a0c      	ldr	r2, [pc, #48]	@ (8003b94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b74:	4c09      	ldr	r4, [pc, #36]	@ (8003b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b82:	f002 fd33 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b86:	f7fe fbfb 	bl	8002380 <main>
  bx lr
 8003b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8003b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b90:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003b94:	08009c00 	.word	0x08009c00
  ldr r2, =_sbss
 8003b98:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003b9c:	200005e4 	.word	0x200005e4

08003ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ba0:	e7fe      	b.n	8003ba0 <ADC1_2_IRQHandler>
	...

08003ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <HAL_Init+0x28>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_Init+0x28>)
 8003bae:	f043 0310 	orr.w	r3, r3, #16
 8003bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f000 f96b 	bl	8003e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bba:	200f      	movs	r0, #15
 8003bbc:	f000 f808 	bl	8003bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc0:	f7ff fd8a 	bl	80036d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_InitTick+0x54>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_InitTick+0x58>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f991 	bl	8003f16 <HAL_SYSTICK_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00e      	b.n	8003c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0f      	cmp	r3, #15
 8003c02:	d80a      	bhi.n	8003c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c04:	2200      	movs	r2, #0
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f000 f94b 	bl	8003ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c10:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <HAL_InitTick+0x5c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000014 	.word	0x20000014
 8003c28:	2000001c 	.word	0x2000001c
 8003c2c:	20000018 	.word	0x20000018

08003c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_IncTick+0x1c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_IncTick+0x20>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a03      	ldr	r2, [pc, #12]	@ (8003c50 <HAL_IncTick+0x20>)
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	2000001c 	.word	0x2000001c
 8003c50:	20000494 	.word	0x20000494

08003c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b02      	ldr	r3, [pc, #8]	@ (8003c64 <HAL_GetTick+0x10>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	20000494 	.word	0x20000494

08003c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d005      	beq.n	8003c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_Delay+0x44>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c8e:	bf00      	nop
 8003c90:	f7ff ffe0 	bl	8003c54 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d8f7      	bhi.n	8003c90 <HAL_Delay+0x28>
  {
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000001c 	.word	0x2000001c

08003cb0 <__NVIC_SetPriorityGrouping>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce2:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	60d3      	str	r3, [r2, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_GetPriorityGrouping>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cfc:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <__NVIC_GetPriorityGrouping+0x18>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 0307 	and.w	r3, r3, #7
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_EnableIRQ>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db0b      	blt.n	8003d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	4906      	ldr	r1, [pc, #24]	@ (8003d48 <__NVIC_EnableIRQ+0x34>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2001      	movs	r0, #1
 8003d36:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_DisableIRQ>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db12      	blt.n	8003d84 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <__NVIC_DisableIRQ+0x44>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d72:	3320      	adds	r3, #32
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d78:	f3bf 8f4f 	dsb	sy
}
 8003d7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d7e:	f3bf 8f6f 	isb	sy
}
 8003d82:	bf00      	nop
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	@ (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e5c:	d301      	bcc.n	8003e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00f      	b.n	8003e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e62:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <SysTick_Config+0x40>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6a:	210f      	movs	r1, #15
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f7ff ff90 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <SysTick_Config+0x40>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7a:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <SysTick_Config+0x40>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000e010 	.word	0xe000e010

08003e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff09 	bl	8003cb0 <__NVIC_SetPriorityGrouping>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb8:	f7ff ff1e 	bl	8003cf8 <__NVIC_GetPriorityGrouping>
 8003ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f7ff ff90 	bl	8003de8 <NVIC_EncodePriority>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff5f 	bl	8003d94 <__NVIC_SetPriority>
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff11 	bl	8003d14 <__NVIC_EnableIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff1f 	bl	8003d4c <__NVIC_DisableIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff94 	bl	8003e4c <SysTick_Config>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08b      	sub	sp, #44	@ 0x2c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f42:	e169      	b.n	8004218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f44:	2201      	movs	r2, #1
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	f040 8158 	bne.w	8004212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a9a      	ldr	r2, [pc, #616]	@ (80041d0 <HAL_GPIO_Init+0x2a0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d05e      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f6c:	4a98      	ldr	r2, [pc, #608]	@ (80041d0 <HAL_GPIO_Init+0x2a0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d875      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f72:	4a98      	ldr	r2, [pc, #608]	@ (80041d4 <HAL_GPIO_Init+0x2a4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d058      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f78:	4a96      	ldr	r2, [pc, #600]	@ (80041d4 <HAL_GPIO_Init+0x2a4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d86f      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f7e:	4a96      	ldr	r2, [pc, #600]	@ (80041d8 <HAL_GPIO_Init+0x2a8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d052      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f84:	4a94      	ldr	r2, [pc, #592]	@ (80041d8 <HAL_GPIO_Init+0x2a8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d869      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f8a:	4a94      	ldr	r2, [pc, #592]	@ (80041dc <HAL_GPIO_Init+0x2ac>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04c      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f90:	4a92      	ldr	r2, [pc, #584]	@ (80041dc <HAL_GPIO_Init+0x2ac>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d863      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f96:	4a92      	ldr	r2, [pc, #584]	@ (80041e0 <HAL_GPIO_Init+0x2b0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d046      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f9c:	4a90      	ldr	r2, [pc, #576]	@ (80041e0 <HAL_GPIO_Init+0x2b0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d85d      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003fa2:	2b12      	cmp	r3, #18
 8003fa4:	d82a      	bhi.n	8003ffc <HAL_GPIO_Init+0xcc>
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	d859      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <HAL_GPIO_Init+0x80>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	0800402b 	.word	0x0800402b
 8003fb4:	08004005 	.word	0x08004005
 8003fb8:	08004017 	.word	0x08004017
 8003fbc:	08004059 	.word	0x08004059
 8003fc0:	0800405f 	.word	0x0800405f
 8003fc4:	0800405f 	.word	0x0800405f
 8003fc8:	0800405f 	.word	0x0800405f
 8003fcc:	0800405f 	.word	0x0800405f
 8003fd0:	0800405f 	.word	0x0800405f
 8003fd4:	0800405f 	.word	0x0800405f
 8003fd8:	0800405f 	.word	0x0800405f
 8003fdc:	0800405f 	.word	0x0800405f
 8003fe0:	0800405f 	.word	0x0800405f
 8003fe4:	0800405f 	.word	0x0800405f
 8003fe8:	0800405f 	.word	0x0800405f
 8003fec:	0800405f 	.word	0x0800405f
 8003ff0:	0800405f 	.word	0x0800405f
 8003ff4:	0800400d 	.word	0x0800400d
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	4a79      	ldr	r2, [pc, #484]	@ (80041e4 <HAL_GPIO_Init+0x2b4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004002:	e02c      	b.n	800405e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	623b      	str	r3, [r7, #32]
          break;
 800400a:	e029      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	3304      	adds	r3, #4
 8004012:	623b      	str	r3, [r7, #32]
          break;
 8004014:	e024      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3308      	adds	r3, #8
 800401c:	623b      	str	r3, [r7, #32]
          break;
 800401e:	e01f      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	330c      	adds	r3, #12
 8004026:	623b      	str	r3, [r7, #32]
          break;
 8004028:	e01a      	b.n	8004060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004032:	2304      	movs	r3, #4
 8004034:	623b      	str	r3, [r7, #32]
          break;
 8004036:	e013      	b.n	8004060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004040:	2308      	movs	r3, #8
 8004042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	611a      	str	r2, [r3, #16]
          break;
 800404a:	e009      	b.n	8004060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800404c:	2308      	movs	r3, #8
 800404e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	615a      	str	r2, [r3, #20]
          break;
 8004056:	e003      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
          break;
 800405c:	e000      	b.n	8004060 <HAL_GPIO_Init+0x130>
          break;
 800405e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2bff      	cmp	r3, #255	@ 0xff
 8004064:	d801      	bhi.n	800406a <HAL_GPIO_Init+0x13a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	e001      	b.n	800406e <HAL_GPIO_Init+0x13e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2bff      	cmp	r3, #255	@ 0xff
 8004074:	d802      	bhi.n	800407c <HAL_GPIO_Init+0x14c>
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x152>
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	3b08      	subs	r3, #8
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	210f      	movs	r1, #15
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	6a39      	ldr	r1, [r7, #32]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	431a      	orrs	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80b1 	beq.w	8004212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b0:	4b4d      	ldr	r3, [pc, #308]	@ (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4a4c      	ldr	r2, [pc, #304]	@ (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6193      	str	r3, [r2, #24]
 80040bc:	4b4a      	ldr	r3, [pc, #296]	@ (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040c8:	4a48      	ldr	r2, [pc, #288]	@ (80041ec <HAL_GPIO_Init+0x2bc>)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	3302      	adds	r3, #2
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	220f      	movs	r2, #15
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a40      	ldr	r2, [pc, #256]	@ (80041f0 <HAL_GPIO_Init+0x2c0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <HAL_GPIO_Init+0x1ec>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3f      	ldr	r2, [pc, #252]	@ (80041f4 <HAL_GPIO_Init+0x2c4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00d      	beq.n	8004118 <HAL_GPIO_Init+0x1e8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3e      	ldr	r2, [pc, #248]	@ (80041f8 <HAL_GPIO_Init+0x2c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <HAL_GPIO_Init+0x1e4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	@ (80041fc <HAL_GPIO_Init+0x2cc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <HAL_GPIO_Init+0x1e0>
 800410c:	2303      	movs	r3, #3
 800410e:	e006      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004110:	2304      	movs	r3, #4
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004114:	2302      	movs	r3, #2
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 800411c:	2300      	movs	r3, #0
 800411e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800412e:	492f      	ldr	r1, [pc, #188]	@ (80041ec <HAL_GPIO_Init+0x2bc>)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004148:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	492c      	ldr	r1, [pc, #176]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]
 8004154:	e006      	b.n	8004164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004156:	4b2a      	ldr	r3, [pc, #168]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	43db      	mvns	r3, r3
 800415e:	4928      	ldr	r1, [pc, #160]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004160:	4013      	ands	r3, r2
 8004162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004170:	4b23      	ldr	r3, [pc, #140]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	4922      	ldr	r1, [pc, #136]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800417e:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	43db      	mvns	r3, r3
 8004186:	491e      	ldr	r1, [pc, #120]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 8004188:	4013      	ands	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4918      	ldr	r1, [pc, #96]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041a6:	4b16      	ldr	r3, [pc, #88]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	4914      	ldr	r1, [pc, #80]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d021      	beq.n	8004204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_GPIO_Init+0x2d0>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e021      	b.n	8004212 <HAL_GPIO_Init+0x2e2>
 80041ce:	bf00      	nop
 80041d0:	10320000 	.word	0x10320000
 80041d4:	10310000 	.word	0x10310000
 80041d8:	10220000 	.word	0x10220000
 80041dc:	10210000 	.word	0x10210000
 80041e0:	10120000 	.word	0x10120000
 80041e4:	10110000 	.word	0x10110000
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010800 	.word	0x40010800
 80041f4:	40010c00 	.word	0x40010c00
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004204:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_GPIO_Init+0x304>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	43db      	mvns	r3, r3
 800420c:	4909      	ldr	r1, [pc, #36]	@ (8004234 <HAL_GPIO_Init+0x304>)
 800420e:	4013      	ands	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f ae8e 	bne.w	8003f44 <HAL_GPIO_Init+0x14>
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	372c      	adds	r7, #44	@ 0x2c
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	40010400 	.word	0x40010400

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004254:	e003      	b.n	800425e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e272      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8087 	beq.w	8004396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004288:	4b92      	ldr	r3, [pc, #584]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b04      	cmp	r3, #4
 8004292:	d00c      	beq.n	80042ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004294:	4b8f      	ldr	r3, [pc, #572]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d112      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
 80042a0:	4b8c      	ldr	r3, [pc, #560]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ae:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d06c      	beq.n	8004394 <HAL_RCC_OscConfig+0x12c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d168      	bne.n	8004394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e24c      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x76>
 80042d0:	4b80      	ldr	r3, [pc, #512]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a7f      	ldr	r2, [pc, #508]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e02e      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b7b      	ldr	r3, [pc, #492]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7a      	ldr	r2, [pc, #488]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b78      	ldr	r3, [pc, #480]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0xbc>
 800430a:	4b72      	ldr	r3, [pc, #456]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a71      	ldr	r2, [pc, #452]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b6f      	ldr	r3, [pc, #444]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xd4>
 8004324:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6a      	ldr	r2, [pc, #424]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b68      	ldr	r3, [pc, #416]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a67      	ldr	r2, [pc, #412]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7ff fc86 	bl	8003c54 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7ff fc82 	bl	8003c54 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e200      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b5d      	ldr	r3, [pc, #372]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xe4>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7ff fc72 	bl	8003c54 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7ff fc6e 	bl	8003c54 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1ec      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b53      	ldr	r3, [pc, #332]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x10c>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a2:	4b4c      	ldr	r3, [pc, #304]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ae:	4b49      	ldr	r3, [pc, #292]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
 80043ba:	4b46      	ldr	r3, [pc, #280]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1c0      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3d      	ldr	r3, [pc, #244]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4939      	ldr	r1, [pc, #228]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7ff fc27 	bl	8003c54 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7ff fc23 	bl	8003c54 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1a1      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2d      	ldr	r3, [pc, #180]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b2a      	ldr	r3, [pc, #168]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4927      	ldr	r1, [pc, #156]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b26      	ldr	r3, [pc, #152]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7ff fc06 	bl	8003c54 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444c:	f7ff fc02 	bl	8003c54 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e180      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03a      	beq.n	80044ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d019      	beq.n	80044b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004484:	f7ff fbe6 	bl	8003c54 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448c:	f7ff fbe2 	bl	8003c54 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e160      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 face 	bl	8004a4c <RCC_Delay>
 80044b0:	e01c      	b.n	80044ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b8:	f7ff fbcc 	bl	8003c54 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044be:	e00f      	b.n	80044e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7ff fbc8 	bl	8003c54 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d908      	bls.n	80044e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e146      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	42420000 	.word	0x42420000
 80044dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b92      	ldr	r3, [pc, #584]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e9      	bne.n	80044c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a6 	beq.w	8004646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b8b      	ldr	r3, [pc, #556]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b88      	ldr	r3, [pc, #544]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	4a87      	ldr	r2, [pc, #540]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	61d3      	str	r3, [r2, #28]
 8004516:	4b85      	ldr	r3, [pc, #532]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b82      	ldr	r3, [pc, #520]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b7f      	ldr	r3, [pc, #508]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7e      	ldr	r2, [pc, #504]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7ff fb89 	bl	8003c54 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7ff fb85 	bl	8003c54 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	@ 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e103      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b75      	ldr	r3, [pc, #468]	@ (8004730 <HAL_RCC_OscConfig+0x4c8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x312>
 800456c:	4b6f      	ldr	r3, [pc, #444]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a6e      	ldr	r2, [pc, #440]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	e02d      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x334>
 8004582:	4b6a      	ldr	r3, [pc, #424]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6213      	str	r3, [r2, #32]
 800458e:	4b67      	ldr	r3, [pc, #412]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a66      	ldr	r2, [pc, #408]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	e01c      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x356>
 80045a4:	4b61      	ldr	r3, [pc, #388]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a60      	ldr	r2, [pc, #384]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	4b5e      	ldr	r3, [pc, #376]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4a5d      	ldr	r2, [pc, #372]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6213      	str	r3, [r2, #32]
 80045bc:	e00b      	b.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 80045be:	4b5b      	ldr	r3, [pc, #364]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a5a      	ldr	r2, [pc, #360]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4b58      	ldr	r3, [pc, #352]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d015      	beq.n	800460a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7ff fb39 	bl	8003c54 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7ff fb35 	bl	8003c54 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0b1      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b4b      	ldr	r3, [pc, #300]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ee      	beq.n	80045e6 <HAL_RCC_OscConfig+0x37e>
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7ff fb23 	bl	8003c54 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7ff fb1f 	bl	8003c54 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e09b      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	4b40      	ldr	r3, [pc, #256]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b3c      	ldr	r3, [pc, #240]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8087 	beq.w	800475e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	4b36      	ldr	r3, [pc, #216]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d061      	beq.n	8004720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d146      	bne.n	80046f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b33      	ldr	r3, [pc, #204]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7ff faf3 	bl	8003c54 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004672:	f7ff faef 	bl	8003c54 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e06d      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004684:	4b29      	ldr	r3, [pc, #164]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d108      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800469a:	4b24      	ldr	r3, [pc, #144]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4921      	ldr	r1, [pc, #132]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ac:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a19      	ldr	r1, [r3, #32]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	430b      	orrs	r3, r1
 80046be:	491b      	ldr	r1, [pc, #108]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7ff fac3 	bl	8003c54 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d2:	f7ff fabf 	bl	8003c54 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e03d      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x46a>
 80046f0:	e035      	b.n	800475e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCC_OscConfig+0x4cc>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7ff faac 	bl	8003c54 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7ff faa8 	bl	8003c54 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e026      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_OscConfig+0x4c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x498>
 800471e:	e01e      	b.n	800475e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e019      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
 800472c:	40021000 	.word	0x40021000
 8004730:	40007000 	.word	0x40007000
 8004734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_OscConfig+0x500>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	429a      	cmp	r2, r3
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0d0      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d910      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b67      	ldr	r3, [pc, #412]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 0207 	bic.w	r2, r3, #7
 8004796:	4965      	ldr	r1, [pc, #404]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d040      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d115      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e073      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06b      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4936      	ldr	r1, [pc, #216]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7ff f9fa 	bl	8003c54 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7ff f9f6 	bl	8003c54 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e053      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b27      	ldr	r3, [pc, #156]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d210      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 0207 	bic.w	r2, r3, #7
 80048a2:	4922      	ldr	r1, [pc, #136]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	@ (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1cc>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f958 	bl	8003bd0 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40022000 	.word	0x40022000
 8004930:	40021000 	.word	0x40021000
 8004934:	08009814 	.word	0x08009814
 8004938:	20000014 	.word	0x20000014
 800493c:	20000018 	.word	0x20000018

08004940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800495a:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d002      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x30>
 800496a:	2b08      	cmp	r3, #8
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x36>
 800496e:	e027      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004972:	613b      	str	r3, [r7, #16]
      break;
 8004974:	e027      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	0c9b      	lsrs	r3, r3, #18
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498e:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	0c5b      	lsrs	r3, r3, #17
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	4a11      	ldr	r2, [pc, #68]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a0d      	ldr	r2, [pc, #52]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e004      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0c      	ldr	r2, [pc, #48]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	613b      	str	r3, [r7, #16]
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80049c2:	613b      	str	r3, [r7, #16]
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	693b      	ldr	r3, [r7, #16]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	007a1200 	.word	0x007a1200
 80049dc:	0800982c 	.word	0x0800982c
 80049e0:	0800983c 	.word	0x0800983c
 80049e4:	003d0900 	.word	0x003d0900

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b02      	ldr	r3, [pc, #8]	@ (80049f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	20000014 	.word	0x20000014

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a00:	f7ff fff2 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	08009824 	.word	0x08009824

08004a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a28:	f7ff ffde 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	0adb      	lsrs	r3, r3, #11
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4903      	ldr	r1, [pc, #12]	@ (8004a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	08009824 	.word	0x08009824

08004a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a54:	4b0a      	ldr	r3, [pc, #40]	@ (8004a80 <RCC_Delay+0x34>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <RCC_Delay+0x38>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0a5b      	lsrs	r3, r3, #9
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a68:	bf00      	nop
  }
  while (Delay --);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	60fa      	str	r2, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f9      	bne.n	8004a68 <RCC_Delay+0x1c>
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr
 8004a80:	20000014 	.word	0x20000014
 8004a84:	10624dd3 	.word	0x10624dd3

08004a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e076      	b.n	8004b88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d108      	bne.n	8004ab4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aaa:	d009      	beq.n	8004ac0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61da      	str	r2, [r3, #28]
 8004ab2:	e005      	b.n	8004ac0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fe fe2e 	bl	800373c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004af6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b44:	ea42 0103 	orr.w	r1, r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	0c1a      	lsrs	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f002 0204 	and.w	r2, r2, #4
 8004b66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba0:	f7ff f858 	bl	8003c54 <HAL_GetTick>
 8004ba4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e12a      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Transmit+0x36>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e122      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_SPI_Transmit+0x48>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e11b      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2203      	movs	r2, #3
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c26:	d10f      	bne.n	8004c48 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d007      	beq.n	8004c66 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6e:	d152      	bne.n	8004d16 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Transmit+0xee>
 8004c78:	8b7b      	ldrh	r3, [r7, #26]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d145      	bne.n	8004d0a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c82:	881a      	ldrh	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	1c9a      	adds	r2, r3, #2
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ca2:	e032      	b.n	8004d0a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d112      	bne.n	8004cd8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cd6:	e018      	b.n	8004d0a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd8:	f7fe ffbc 	bl	8003c54 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d803      	bhi.n	8004cf0 <HAL_SPI_Transmit+0x160>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Transmit+0x166>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e082      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1c7      	bne.n	8004ca4 <HAL_SPI_Transmit+0x114>
 8004d14:	e053      	b.n	8004dbe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0x194>
 8004d1e:	8b7b      	ldrh	r3, [r7, #26]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d147      	bne.n	8004db4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d4a:	e033      	b.n	8004db4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d113      	bne.n	8004d82 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d80:	e018      	b.n	8004db4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d82:	f7fe ff67 	bl	8003c54 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d803      	bhi.n	8004d9a <HAL_SPI_Transmit+0x20a>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_Transmit+0x210>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e02d      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1c6      	bne.n	8004d4c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fbd2 	bl	800556c <SPI_EndRxTxTransaction>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d001      	beq.n	8004e38 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	e104      	b.n	8005042 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e40:	d112      	bne.n	8004e68 <HAL_SPI_Receive+0x50>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10e      	bne.n	8004e68 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f8f3 	bl	800504a <HAL_SPI_TransmitReceive>
 8004e64:	4603      	mov	r3, r0
 8004e66:	e0ec      	b.n	8005042 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e68:	f7fe fef4 	bl	8003c54 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_SPI_Receive+0x62>
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0e1      	b.n	8005042 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_SPI_Receive+0x74>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0da      	b.n	8005042 <HAL_SPI_Receive+0x22a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2204      	movs	r2, #4
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eda:	d10f      	bne.n	8004efc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d007      	beq.n	8004f1a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d170      	bne.n	8005004 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f22:	e035      	b.n	8004f90 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d115      	bne.n	8004f5e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f103 020c 	add.w	r2, r3, #12
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f5c:	e018      	b.n	8004f90 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f5e:	f7fe fe79 	bl	8003c54 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d803      	bhi.n	8004f76 <HAL_SPI_Receive+0x15e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d102      	bne.n	8004f7c <HAL_SPI_Receive+0x164>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e058      	b.n	8005042 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1c4      	bne.n	8004f24 <HAL_SPI_Receive+0x10c>
 8004f9a:	e038      	b.n	800500e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d113      	bne.n	8004fd2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fd0:	e018      	b.n	8005004 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd2:	f7fe fe3f 	bl	8003c54 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d803      	bhi.n	8004fea <HAL_SPI_Receive+0x1d2>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d102      	bne.n	8004ff0 <HAL_SPI_Receive+0x1d8>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e01e      	b.n	8005042 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c6      	bne.n	8004f9c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa58 	bl	80054c8 <SPI_EndRxTransaction>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005040:	2300      	movs	r3, #0
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08a      	sub	sp, #40	@ 0x28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005058:	2301      	movs	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800505c:	f7fe fdfa 	bl	8003c54 <HAL_GetTick>
 8005060:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005068:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005074:	7ffb      	ldrb	r3, [r7, #31]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00c      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x4a>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005080:	d106      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x46>
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d001      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	e17f      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x5c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x5c>
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e174      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x6e>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e16d      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d003      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2205      	movs	r2, #5
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	887a      	ldrh	r2, [r7, #2]
 80050ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d007      	beq.n	8005128 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005130:	d17e      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_SPI_TransmitReceive+0xf6>
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d16c      	bne.n	800521a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005164:	e059      	b.n	800521a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d11b      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x162>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x162>
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	2b01      	cmp	r3, #1
 8005182:	d113      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d119      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x1a4>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d014      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	b292      	uxth	r2, r2
 80051d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ea:	2301      	movs	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ee:	f7fe fd31 	bl	8003c54 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d80d      	bhi.n	800521a <HAL_SPI_TransmitReceive+0x1d0>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d009      	beq.n	800521a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0bc      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1a0      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x11c>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d19b      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x11c>
 800522e:	e082      	b.n	8005336 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_SPI_TransmitReceive+0x1f4>
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d171      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005264:	e05d      	b.n	8005322 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d11c      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x264>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d017      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x264>
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d114      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d119      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x2a6>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d014      	beq.n	80052f0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052ec:	2301      	movs	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052f0:	f7fe fcb0 	bl	8003c54 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_TransmitReceive+0x2be>
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d102      	bne.n	800530e <HAL_SPI_TransmitReceive+0x2c4>
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e038      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d19c      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x21c>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d197      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f916 	bl	800556c <SPI_EndRxTxTransaction>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e01d      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005392:	2300      	movs	r3, #0
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	3728      	adds	r7, #40	@ 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053aa:	b2db      	uxtb	r3, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
	...

080053b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c8:	f7fe fc44 	bl	8003c54 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d8:	f7fe fc3c 	bl	8003c54 <HAL_GetTick>
 80053dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053de:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	015b      	lsls	r3, r3, #5
 80053e4:	0d1b      	lsrs	r3, r3, #20
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	e054      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d050      	beq.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f8:	f7fe fc2c 	bl	8003c54 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	429a      	cmp	r2, r3
 8005406:	d902      	bls.n	800540e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d13d      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800541c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005426:	d111      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005430:	d004      	beq.n	800543c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d107      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005454:	d10f      	bne.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e017      	b.n	80054ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d19b      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000014 	.word	0x20000014

080054c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054dc:	d111      	bne.n	8005502 <SPI_EndRxTransaction+0x3a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e6:	d004      	beq.n	80054f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f0:	d107      	bne.n	8005502 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005500:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550a:	d117      	bne.n	800553c <SPI_EndRxTransaction+0x74>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005514:	d112      	bne.n	800553c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	2101      	movs	r1, #1
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ff49 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01a      	beq.n	8005562 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e013      	b.n	8005564 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff36 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e000      	b.n	8005564 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2201      	movs	r2, #1
 8005580:	2102      	movs	r1, #2
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ff18 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e013      	b.n	80055c6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	2180      	movs	r1, #128	@ 0x80
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ff05 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e000      	b.n	80055c6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e042      	b.n	8005666 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fe f927 	bl	8003848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2224      	movs	r2, #36	@ 0x24
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005610:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f972 	bl	80058fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005626:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005636:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b08a      	sub	sp, #40	@ 0x28
 8005672:	af02      	add	r7, sp, #8
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	d175      	bne.n	800577a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_UART_Transmit+0x2c>
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06e      	b.n	800577c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2221      	movs	r2, #33	@ 0x21
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ac:	f7fe fad2 	bl	8003c54 <HAL_GetTick>
 80056b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d108      	bne.n	80056da <HAL_UART_Transmit+0x6c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056e2:	e02e      	b.n	8005742 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2180      	movs	r1, #128	@ 0x80
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f848 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e03a      	b.n	800577c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3302      	adds	r3, #2
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e007      	b.n	8005734 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1cb      	bne.n	80056e4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	2140      	movs	r1, #64	@ 0x40
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f814 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e006      	b.n	800577c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	e03b      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d037      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fe fa59 	bl	8003c54 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e03a      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d023      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d020      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d01d      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d116      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f81d 	bl	8005836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2208      	movs	r2, #8
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e00f      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	bf0c      	ite	eq
 800581e:	2301      	moveq	r3, #1
 8005820:	2300      	movne	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	429a      	cmp	r2, r3
 800582a:	d0b4      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005836:	b480      	push	{r7}
 8005838:	b095      	sub	sp, #84	@ 0x54
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800585e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	61fb      	str	r3, [r7, #28]
   return(result);
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d119      	bne.n	80058e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ce:	61ba      	str	r2, [r7, #24]
 80058d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6979      	ldr	r1, [r7, #20]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	613b      	str	r3, [r7, #16]
   return(result);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e5      	bne.n	80058ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058f0:	bf00      	nop
 80058f2:	3754      	adds	r7, #84	@ 0x54
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005936:	f023 030c 	bic.w	r3, r3, #12
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	430b      	orrs	r3, r1
 8005942:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <UART_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005964:	f7ff f85e 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	e002      	b.n	8005972 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7ff f846 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005970:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	4a22      	ldr	r2, [pc, #136]	@ (8005a14 <UART_SetConfig+0x118>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	0119      	lsls	r1, r3, #4
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009a      	lsls	r2, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a14 <UART_SetConfig+0x118>)
 80059aa:	fba3 0302 	umull	r0, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2064      	movs	r0, #100	@ 0x64
 80059b2:	fb00 f303 	mul.w	r3, r0, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	@ 0x32
 80059bc:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <UART_SetConfig+0x118>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059c8:	4419      	add	r1, r3
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009a      	lsls	r2, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <UART_SetConfig+0x118>)
 80059e2:	fba3 0302 	umull	r0, r3, r3, r2
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2064      	movs	r0, #100	@ 0x64
 80059ea:	fb00 f303 	mul.w	r3, r0, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	3332      	adds	r3, #50	@ 0x32
 80059f4:	4a07      	ldr	r2, [pc, #28]	@ (8005a14 <UART_SetConfig+0x118>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	440a      	add	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40013800 	.word	0x40013800
 8005a14:	51eb851f 	.word	0x51eb851f

08005a18 <__cvt>:
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1e:	461d      	mov	r5, r3
 8005a20:	bfbb      	ittet	lt
 8005a22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a26:	461d      	movlt	r5, r3
 8005a28:	2300      	movge	r3, #0
 8005a2a:	232d      	movlt	r3, #45	@ 0x2d
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	4614      	mov	r4, r2
 8005a30:	bfb8      	it	lt
 8005a32:	4614      	movlt	r4, r2
 8005a34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a38:	7013      	strb	r3, [r2, #0]
 8005a3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a40:	f023 0820 	bic.w	r8, r3, #32
 8005a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a48:	d005      	beq.n	8005a56 <__cvt+0x3e>
 8005a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a4e:	d100      	bne.n	8005a52 <__cvt+0x3a>
 8005a50:	3601      	adds	r6, #1
 8005a52:	2302      	movs	r3, #2
 8005a54:	e000      	b.n	8005a58 <__cvt+0x40>
 8005a56:	2303      	movs	r3, #3
 8005a58:	aa07      	add	r2, sp, #28
 8005a5a:	9204      	str	r2, [sp, #16]
 8005a5c:	aa06      	add	r2, sp, #24
 8005a5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a62:	e9cd 3600 	strd	r3, r6, [sp]
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	f000 fea9 	bl	80067c0 <_dtoa_r>
 8005a6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a72:	4607      	mov	r7, r0
 8005a74:	d119      	bne.n	8005aaa <__cvt+0x92>
 8005a76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a78:	07db      	lsls	r3, r3, #31
 8005a7a:	d50e      	bpl.n	8005a9a <__cvt+0x82>
 8005a7c:	eb00 0906 	add.w	r9, r0, r6
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 8005a8c:	b108      	cbz	r0, 8005a92 <__cvt+0x7a>
 8005a8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a92:	2230      	movs	r2, #48	@ 0x30
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	454b      	cmp	r3, r9
 8005a98:	d31e      	bcc.n	8005ad8 <__cvt+0xc0>
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005aa0:	1bdb      	subs	r3, r3, r7
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	b008      	add	sp, #32
 8005aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aae:	eb00 0906 	add.w	r9, r0, r6
 8005ab2:	d1e5      	bne.n	8005a80 <__cvt+0x68>
 8005ab4:	7803      	ldrb	r3, [r0, #0]
 8005ab6:	2b30      	cmp	r3, #48	@ 0x30
 8005ab8:	d10a      	bne.n	8005ad0 <__cvt+0xb8>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2300      	movs	r3, #0
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa ff71 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac6:	b918      	cbnz	r0, 8005ad0 <__cvt+0xb8>
 8005ac8:	f1c6 0601 	rsb	r6, r6, #1
 8005acc:	f8ca 6000 	str.w	r6, [sl]
 8005ad0:	f8da 3000 	ldr.w	r3, [sl]
 8005ad4:	4499      	add	r9, r3
 8005ad6:	e7d3      	b.n	8005a80 <__cvt+0x68>
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	9107      	str	r1, [sp, #28]
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e7d9      	b.n	8005a94 <__cvt+0x7c>

08005ae0 <__exponent>:
 8005ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	bfb6      	itet	lt
 8005ae6:	232d      	movlt	r3, #45	@ 0x2d
 8005ae8:	232b      	movge	r3, #43	@ 0x2b
 8005aea:	4249      	neglt	r1, r1
 8005aec:	2909      	cmp	r1, #9
 8005aee:	7002      	strb	r2, [r0, #0]
 8005af0:	7043      	strb	r3, [r0, #1]
 8005af2:	dd29      	ble.n	8005b48 <__exponent+0x68>
 8005af4:	f10d 0307 	add.w	r3, sp, #7
 8005af8:	461d      	mov	r5, r3
 8005afa:	270a      	movs	r7, #10
 8005afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b00:	461a      	mov	r2, r3
 8005b02:	fb07 1416 	mls	r4, r7, r6, r1
 8005b06:	3430      	adds	r4, #48	@ 0x30
 8005b08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	2c63      	cmp	r4, #99	@ 0x63
 8005b10:	4631      	mov	r1, r6
 8005b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b16:	dcf1      	bgt.n	8005afc <__exponent+0x1c>
 8005b18:	3130      	adds	r1, #48	@ 0x30
 8005b1a:	1e94      	subs	r4, r2, #2
 8005b1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b20:	4623      	mov	r3, r4
 8005b22:	1c41      	adds	r1, r0, #1
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	d30a      	bcc.n	8005b3e <__exponent+0x5e>
 8005b28:	f10d 0309 	add.w	r3, sp, #9
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	42ac      	cmp	r4, r5
 8005b30:	bf88      	it	hi
 8005b32:	2300      	movhi	r3, #0
 8005b34:	3302      	adds	r3, #2
 8005b36:	4403      	add	r3, r0
 8005b38:	1a18      	subs	r0, r3, r0
 8005b3a:	b003      	add	sp, #12
 8005b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b46:	e7ed      	b.n	8005b24 <__exponent+0x44>
 8005b48:	2330      	movs	r3, #48	@ 0x30
 8005b4a:	3130      	adds	r1, #48	@ 0x30
 8005b4c:	7083      	strb	r3, [r0, #2]
 8005b4e:	70c1      	strb	r1, [r0, #3]
 8005b50:	1d03      	adds	r3, r0, #4
 8005b52:	e7f1      	b.n	8005b38 <__exponent+0x58>

08005b54 <_printf_float>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	b091      	sub	sp, #68	@ 0x44
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b60:	4616      	mov	r6, r2
 8005b62:	461f      	mov	r7, r3
 8005b64:	4605      	mov	r5, r0
 8005b66:	f000 fcf1 	bl	800654c <_localeconv_r>
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	9308      	str	r3, [sp, #32]
 8005b70:	f7fa faee 	bl	8000150 <strlen>
 8005b74:	2300      	movs	r3, #0
 8005b76:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b78:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b7e:	3307      	adds	r3, #7
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	f103 0208 	add.w	r2, r3, #8
 8005b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005b90:	f8c8 2000 	str.w	r2, [r8]
 8005b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005baa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bae:	4b9c      	ldr	r3, [pc, #624]	@ (8005e20 <_printf_float+0x2cc>)
 8005bb0:	f7fa ff2c 	bl	8000a0c <__aeabi_dcmpun>
 8005bb4:	bb70      	cbnz	r0, 8005c14 <_printf_float+0xc0>
 8005bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	4b98      	ldr	r3, [pc, #608]	@ (8005e20 <_printf_float+0x2cc>)
 8005bc0:	f7fa ff06 	bl	80009d0 <__aeabi_dcmple>
 8005bc4:	bb30      	cbnz	r0, 8005c14 <_printf_float+0xc0>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fef5 	bl	80009bc <__aeabi_dcmplt>
 8005bd2:	b110      	cbz	r0, 8005bda <_printf_float+0x86>
 8005bd4:	232d      	movs	r3, #45	@ 0x2d
 8005bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bda:	4a92      	ldr	r2, [pc, #584]	@ (8005e24 <_printf_float+0x2d0>)
 8005bdc:	4b92      	ldr	r3, [pc, #584]	@ (8005e28 <_printf_float+0x2d4>)
 8005bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005be2:	bf8c      	ite	hi
 8005be4:	4690      	movhi	r8, r2
 8005be6:	4698      	movls	r8, r3
 8005be8:	2303      	movs	r3, #3
 8005bea:	f04f 0900 	mov.w	r9, #0
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	f02b 0304 	bic.w	r3, fp, #4
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	4633      	mov	r3, r6
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	9700      	str	r7, [sp, #0]
 8005bfe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c00:	f000 f9d4 	bl	8005fac <_printf_common>
 8005c04:	3001      	adds	r0, #1
 8005c06:	f040 8090 	bne.w	8005d2a <_printf_float+0x1d6>
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	b011      	add	sp, #68	@ 0x44
 8005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	f7fa fef6 	bl	8000a0c <__aeabi_dcmpun>
 8005c20:	b148      	cbz	r0, 8005c36 <_printf_float+0xe2>
 8005c22:	464b      	mov	r3, r9
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfb8      	it	lt
 8005c28:	232d      	movlt	r3, #45	@ 0x2d
 8005c2a:	4a80      	ldr	r2, [pc, #512]	@ (8005e2c <_printf_float+0x2d8>)
 8005c2c:	bfb8      	it	lt
 8005c2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c32:	4b7f      	ldr	r3, [pc, #508]	@ (8005e30 <_printf_float+0x2dc>)
 8005c34:	e7d3      	b.n	8005bde <_printf_float+0x8a>
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	d13f      	bne.n	8005cc0 <_printf_float+0x16c>
 8005c40:	2306      	movs	r3, #6
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	9206      	str	r2, [sp, #24]
 8005c4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c54:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c56:	9203      	str	r2, [sp, #12]
 8005c58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c60:	6863      	ldr	r3, [r4, #4]
 8005c62:	4642      	mov	r2, r8
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4628      	mov	r0, r5
 8005c68:	464b      	mov	r3, r9
 8005c6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c6c:	f7ff fed4 	bl	8005a18 <__cvt>
 8005c70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c72:	4680      	mov	r8, r0
 8005c74:	2947      	cmp	r1, #71	@ 0x47
 8005c76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c78:	d128      	bne.n	8005ccc <_printf_float+0x178>
 8005c7a:	1cc8      	adds	r0, r1, #3
 8005c7c:	db02      	blt.n	8005c84 <_printf_float+0x130>
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	4299      	cmp	r1, r3
 8005c82:	dd40      	ble.n	8005d06 <_printf_float+0x1b2>
 8005c84:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c88:	fa5f fa8a 	uxtb.w	sl, sl
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	3901      	subs	r1, #1
 8005c90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c94:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c96:	f7ff ff23 	bl	8005ae0 <__exponent>
 8005c9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	1813      	adds	r3, r2, r0
 8005ca0:	2a01      	cmp	r2, #1
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	dc02      	bgt.n	8005cac <_printf_float+0x158>
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	07d2      	lsls	r2, r2, #31
 8005caa:	d501      	bpl.n	8005cb0 <_printf_float+0x15c>
 8005cac:	3301      	adds	r3, #1
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d09e      	beq.n	8005bf6 <_printf_float+0xa2>
 8005cb8:	232d      	movs	r3, #45	@ 0x2d
 8005cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cbe:	e79a      	b.n	8005bf6 <_printf_float+0xa2>
 8005cc0:	2947      	cmp	r1, #71	@ 0x47
 8005cc2:	d1bf      	bne.n	8005c44 <_printf_float+0xf0>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1bd      	bne.n	8005c44 <_printf_float+0xf0>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e7ba      	b.n	8005c42 <_printf_float+0xee>
 8005ccc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cd0:	d9dc      	bls.n	8005c8c <_printf_float+0x138>
 8005cd2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cd6:	d118      	bne.n	8005d0a <_printf_float+0x1b6>
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	6863      	ldr	r3, [r4, #4]
 8005cdc:	dd0b      	ble.n	8005cf6 <_printf_float+0x1a2>
 8005cde:	6121      	str	r1, [r4, #16]
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_printf_float+0x194>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	07d0      	lsls	r0, r2, #31
 8005ce6:	d502      	bpl.n	8005cee <_printf_float+0x19a>
 8005ce8:	3301      	adds	r3, #1
 8005cea:	440b      	add	r3, r1
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	f04f 0900 	mov.w	r9, #0
 8005cf2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cf4:	e7dc      	b.n	8005cb0 <_printf_float+0x15c>
 8005cf6:	b913      	cbnz	r3, 8005cfe <_printf_float+0x1aa>
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	07d2      	lsls	r2, r2, #31
 8005cfc:	d501      	bpl.n	8005d02 <_printf_float+0x1ae>
 8005cfe:	3302      	adds	r3, #2
 8005d00:	e7f4      	b.n	8005cec <_printf_float+0x198>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e7f2      	b.n	8005cec <_printf_float+0x198>
 8005d06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	db05      	blt.n	8005d1c <_printf_float+0x1c8>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	6121      	str	r1, [r4, #16]
 8005d14:	07d8      	lsls	r0, r3, #31
 8005d16:	d5ea      	bpl.n	8005cee <_printf_float+0x19a>
 8005d18:	1c4b      	adds	r3, r1, #1
 8005d1a:	e7e7      	b.n	8005cec <_printf_float+0x198>
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	bfcc      	ite	gt
 8005d20:	2201      	movgt	r2, #1
 8005d22:	f1c1 0202 	rsble	r2, r1, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	e7e0      	b.n	8005cec <_printf_float+0x198>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	055a      	lsls	r2, r3, #21
 8005d2e:	d407      	bmi.n	8005d40 <_printf_float+0x1ec>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	4642      	mov	r2, r8
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d12b      	bne.n	8005d96 <_printf_float+0x242>
 8005d3e:	e764      	b.n	8005c0a <_printf_float+0xb6>
 8005d40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d44:	f240 80dc 	bls.w	8005f00 <_printf_float+0x3ac>
 8005d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f7fa fe2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d033      	beq.n	8005dc0 <_printf_float+0x26c>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	4a35      	ldr	r2, [pc, #212]	@ (8005e34 <_printf_float+0x2e0>)
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	f43f af51 	beq.w	8005c0a <_printf_float+0xb6>
 8005d68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d6c:	4543      	cmp	r3, r8
 8005d6e:	db02      	blt.n	8005d76 <_printf_float+0x222>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	07d8      	lsls	r0, r3, #31
 8005d74:	d50f      	bpl.n	8005d96 <_printf_float+0x242>
 8005d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f af42 	beq.w	8005c0a <_printf_float+0xb6>
 8005d86:	f04f 0900 	mov.w	r9, #0
 8005d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d8e:	f104 0a1a 	add.w	sl, r4, #26
 8005d92:	45c8      	cmp	r8, r9
 8005d94:	dc09      	bgt.n	8005daa <_printf_float+0x256>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	079b      	lsls	r3, r3, #30
 8005d9a:	f100 8102 	bmi.w	8005fa2 <_printf_float+0x44e>
 8005d9e:	68e0      	ldr	r0, [r4, #12]
 8005da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005da2:	4298      	cmp	r0, r3
 8005da4:	bfb8      	it	lt
 8005da6:	4618      	movlt	r0, r3
 8005da8:	e731      	b.n	8005c0e <_printf_float+0xba>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f af28 	beq.w	8005c0a <_printf_float+0xb6>
 8005dba:	f109 0901 	add.w	r9, r9, #1
 8005dbe:	e7e8      	b.n	8005d92 <_printf_float+0x23e>
 8005dc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dc38      	bgt.n	8005e38 <_printf_float+0x2e4>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4a19      	ldr	r2, [pc, #100]	@ (8005e34 <_printf_float+0x2e0>)
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f af1a 	beq.w	8005c0a <_printf_float+0xb6>
 8005dd6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005dda:	ea59 0303 	orrs.w	r3, r9, r3
 8005dde:	d102      	bne.n	8005de6 <_printf_float+0x292>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07d9      	lsls	r1, r3, #31
 8005de4:	d5d7      	bpl.n	8005d96 <_printf_float+0x242>
 8005de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f af0a 	beq.w	8005c0a <_printf_float+0xb6>
 8005df6:	f04f 0a00 	mov.w	sl, #0
 8005dfa:	f104 0b1a 	add.w	fp, r4, #26
 8005dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e00:	425b      	negs	r3, r3
 8005e02:	4553      	cmp	r3, sl
 8005e04:	dc01      	bgt.n	8005e0a <_printf_float+0x2b6>
 8005e06:	464b      	mov	r3, r9
 8005e08:	e793      	b.n	8005d32 <_printf_float+0x1de>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	465a      	mov	r2, fp
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f aef8 	beq.w	8005c0a <_printf_float+0xb6>
 8005e1a:	f10a 0a01 	add.w	sl, sl, #1
 8005e1e:	e7ee      	b.n	8005dfe <_printf_float+0x2aa>
 8005e20:	7fefffff 	.word	0x7fefffff
 8005e24:	08009943 	.word	0x08009943
 8005e28:	0800993f 	.word	0x0800993f
 8005e2c:	0800994b 	.word	0x0800994b
 8005e30:	08009947 	.word	0x08009947
 8005e34:	0800994f 	.word	0x0800994f
 8005e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e3e:	4553      	cmp	r3, sl
 8005e40:	bfa8      	it	ge
 8005e42:	4653      	movge	r3, sl
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	4699      	mov	r9, r3
 8005e48:	dc36      	bgt.n	8005eb8 <_printf_float+0x364>
 8005e4a:	f04f 0b00 	mov.w	fp, #0
 8005e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e52:	f104 021a 	add.w	r2, r4, #26
 8005e56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5a:	eba3 0309 	sub.w	r3, r3, r9
 8005e5e:	455b      	cmp	r3, fp
 8005e60:	dc31      	bgt.n	8005ec6 <_printf_float+0x372>
 8005e62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e64:	459a      	cmp	sl, r3
 8005e66:	dc3a      	bgt.n	8005ede <_printf_float+0x38a>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d437      	bmi.n	8005ede <_printf_float+0x38a>
 8005e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e70:	ebaa 0903 	sub.w	r9, sl, r3
 8005e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e76:	ebaa 0303 	sub.w	r3, sl, r3
 8005e7a:	4599      	cmp	r9, r3
 8005e7c:	bfa8      	it	ge
 8005e7e:	4699      	movge	r9, r3
 8005e80:	f1b9 0f00 	cmp.w	r9, #0
 8005e84:	dc33      	bgt.n	8005eee <_printf_float+0x39a>
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8e:	f104 0b1a 	add.w	fp, r4, #26
 8005e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e94:	ebaa 0303 	sub.w	r3, sl, r3
 8005e98:	eba3 0309 	sub.w	r3, r3, r9
 8005e9c:	4543      	cmp	r3, r8
 8005e9e:	f77f af7a 	ble.w	8005d96 <_printf_float+0x242>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	465a      	mov	r2, fp
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	f43f aeac 	beq.w	8005c0a <_printf_float+0xb6>
 8005eb2:	f108 0801 	add.w	r8, r8, #1
 8005eb6:	e7ec      	b.n	8005e92 <_printf_float+0x33e>
 8005eb8:	4642      	mov	r2, r8
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d1c2      	bne.n	8005e4a <_printf_float+0x2f6>
 8005ec4:	e6a1      	b.n	8005c0a <_printf_float+0xb6>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4628      	mov	r0, r5
 8005ecc:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f ae9a 	beq.w	8005c0a <_printf_float+0xb6>
 8005ed6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ed8:	f10b 0b01 	add.w	fp, fp, #1
 8005edc:	e7bb      	b.n	8005e56 <_printf_float+0x302>
 8005ede:	4631      	mov	r1, r6
 8005ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1c0      	bne.n	8005e6e <_printf_float+0x31a>
 8005eec:	e68d      	b.n	8005c0a <_printf_float+0xb6>
 8005eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	4442      	add	r2, r8
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	d1c3      	bne.n	8005e86 <_printf_float+0x332>
 8005efe:	e684      	b.n	8005c0a <_printf_float+0xb6>
 8005f00:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f04:	f1ba 0f01 	cmp.w	sl, #1
 8005f08:	dc01      	bgt.n	8005f0e <_printf_float+0x3ba>
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d536      	bpl.n	8005f7c <_printf_float+0x428>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4642      	mov	r2, r8
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f ae76 	beq.w	8005c0a <_printf_float+0xb6>
 8005f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f ae6e 	beq.w	8005c0a <_printf_float+0xb6>
 8005f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f3a:	f7fa fd35 	bl	80009a8 <__aeabi_dcmpeq>
 8005f3e:	b9c0      	cbnz	r0, 8005f72 <_printf_float+0x41e>
 8005f40:	4653      	mov	r3, sl
 8005f42:	f108 0201 	add.w	r2, r8, #1
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d10c      	bne.n	8005f6a <_printf_float+0x416>
 8005f50:	e65b      	b.n	8005c0a <_printf_float+0xb6>
 8005f52:	2301      	movs	r3, #1
 8005f54:	465a      	mov	r2, fp
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f ae54 	beq.w	8005c0a <_printf_float+0xb6>
 8005f62:	f108 0801 	add.w	r8, r8, #1
 8005f66:	45d0      	cmp	r8, sl
 8005f68:	dbf3      	blt.n	8005f52 <_printf_float+0x3fe>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f70:	e6e0      	b.n	8005d34 <_printf_float+0x1e0>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f104 0b1a 	add.w	fp, r4, #26
 8005f7a:	e7f4      	b.n	8005f66 <_printf_float+0x412>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4642      	mov	r2, r8
 8005f80:	e7e1      	b.n	8005f46 <_printf_float+0x3f2>
 8005f82:	2301      	movs	r3, #1
 8005f84:	464a      	mov	r2, r9
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae3c 	beq.w	8005c0a <_printf_float+0xb6>
 8005f92:	f108 0801 	add.w	r8, r8, #1
 8005f96:	68e3      	ldr	r3, [r4, #12]
 8005f98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f9a:	1a5b      	subs	r3, r3, r1
 8005f9c:	4543      	cmp	r3, r8
 8005f9e:	dcf0      	bgt.n	8005f82 <_printf_float+0x42e>
 8005fa0:	e6fd      	b.n	8005d9e <_printf_float+0x24a>
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	f104 0919 	add.w	r9, r4, #25
 8005faa:	e7f4      	b.n	8005f96 <_printf_float+0x442>

08005fac <_printf_common>:
 8005fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	688a      	ldr	r2, [r1, #8]
 8005fb6:	690b      	ldr	r3, [r1, #16]
 8005fb8:	4607      	mov	r7, r0
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	bfb8      	it	lt
 8005fbe:	4613      	movlt	r3, r2
 8005fc0:	6033      	str	r3, [r6, #0]
 8005fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fcc:	b10a      	cbz	r2, 8005fd2 <_printf_common+0x26>
 8005fce:	3301      	adds	r3, #1
 8005fd0:	6033      	str	r3, [r6, #0]
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	0699      	lsls	r1, r3, #26
 8005fd6:	bf42      	ittt	mi
 8005fd8:	6833      	ldrmi	r3, [r6, #0]
 8005fda:	3302      	addmi	r3, #2
 8005fdc:	6033      	strmi	r3, [r6, #0]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	f015 0506 	ands.w	r5, r5, #6
 8005fe4:	d106      	bne.n	8005ff4 <_printf_common+0x48>
 8005fe6:	f104 0a19 	add.w	sl, r4, #25
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	42ab      	cmp	r3, r5
 8005ff2:	dc2b      	bgt.n	800604c <_printf_common+0xa0>
 8005ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	3b00      	subs	r3, #0
 8005ffc:	bf18      	it	ne
 8005ffe:	2301      	movne	r3, #1
 8006000:	0692      	lsls	r2, r2, #26
 8006002:	d430      	bmi.n	8006066 <_printf_common+0xba>
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800600c:	47c8      	blx	r9
 800600e:	3001      	adds	r0, #1
 8006010:	d023      	beq.n	800605a <_printf_common+0xae>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	f003 0306 	and.w	r3, r3, #6
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf14      	ite	ne
 800601e:	2500      	movne	r5, #0
 8006020:	6833      	ldreq	r3, [r6, #0]
 8006022:	f04f 0600 	mov.w	r6, #0
 8006026:	bf08      	it	eq
 8006028:	68e5      	ldreq	r5, [r4, #12]
 800602a:	f104 041a 	add.w	r4, r4, #26
 800602e:	bf08      	it	eq
 8006030:	1aed      	subeq	r5, r5, r3
 8006032:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006036:	bf08      	it	eq
 8006038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800603c:	4293      	cmp	r3, r2
 800603e:	bfc4      	itt	gt
 8006040:	1a9b      	subgt	r3, r3, r2
 8006042:	18ed      	addgt	r5, r5, r3
 8006044:	42b5      	cmp	r5, r6
 8006046:	d11a      	bne.n	800607e <_printf_common+0xd2>
 8006048:	2000      	movs	r0, #0
 800604a:	e008      	b.n	800605e <_printf_common+0xb2>
 800604c:	2301      	movs	r3, #1
 800604e:	4652      	mov	r2, sl
 8006050:	4641      	mov	r1, r8
 8006052:	4638      	mov	r0, r7
 8006054:	47c8      	blx	r9
 8006056:	3001      	adds	r0, #1
 8006058:	d103      	bne.n	8006062 <_printf_common+0xb6>
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	3501      	adds	r5, #1
 8006064:	e7c1      	b.n	8005fea <_printf_common+0x3e>
 8006066:	2030      	movs	r0, #48	@ 0x30
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006074:	4422      	add	r2, r4
 8006076:	3302      	adds	r3, #2
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800607c:	e7c2      	b.n	8006004 <_printf_common+0x58>
 800607e:	2301      	movs	r3, #1
 8006080:	4622      	mov	r2, r4
 8006082:	4641      	mov	r1, r8
 8006084:	4638      	mov	r0, r7
 8006086:	47c8      	blx	r9
 8006088:	3001      	adds	r0, #1
 800608a:	d0e6      	beq.n	800605a <_printf_common+0xae>
 800608c:	3601      	adds	r6, #1
 800608e:	e7d9      	b.n	8006044 <_printf_common+0x98>

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	4691      	mov	r9, r2
 8006098:	2f78      	cmp	r7, #120	@ 0x78
 800609a:	4680      	mov	r8, r0
 800609c:	460c      	mov	r4, r1
 800609e:	469a      	mov	sl, r3
 80060a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	@ 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d1 	beq.w	8006254 <_printf_i+0x1c4>
 80060b2:	2f58      	cmp	r7, #88	@ 0x58
 80060b4:	f000 80b8 	beq.w	8006228 <_printf_i+0x198>
 80060b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	@ (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	0800623b 	.word	0x0800623b
 8006100:	08006167 	.word	0x08006167
 8006104:	080061f5 	.word	0x080061f5
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	0800625d 	.word	0x0800625d
 8006114:	080060b9 	.word	0x080060b9
 8006118:	08006167 	.word	0x08006167
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	080061fd 	.word	0x080061fd
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6032      	str	r2, [r6, #0]
 8006130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e09c      	b.n	8006276 <_printf_i+0x1e6>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	d501      	bpl.n	800614c <_printf_i+0xbc>
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	e003      	b.n	8006154 <_printf_i+0xc4>
 800614c:	0645      	lsls	r5, r0, #25
 800614e:	d5fb      	bpl.n	8006148 <_printf_i+0xb8>
 8006150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006154:	2d00      	cmp	r5, #0
 8006156:	da03      	bge.n	8006160 <_printf_i+0xd0>
 8006158:	232d      	movs	r3, #45	@ 0x2d
 800615a:	426d      	negs	r5, r5
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006160:	230a      	movs	r3, #10
 8006162:	4858      	ldr	r0, [pc, #352]	@ (80062c4 <_printf_i+0x234>)
 8006164:	e011      	b.n	800618a <_printf_i+0xfa>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	0608      	lsls	r0, r1, #24
 800616c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006170:	d402      	bmi.n	8006178 <_printf_i+0xe8>
 8006172:	0649      	lsls	r1, r1, #25
 8006174:	bf48      	it	mi
 8006176:	b2ad      	uxthmi	r5, r5
 8006178:	2f6f      	cmp	r7, #111	@ 0x6f
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	bf14      	ite	ne
 800617e:	230a      	movne	r3, #10
 8006180:	2308      	moveq	r3, #8
 8006182:	4850      	ldr	r0, [pc, #320]	@ (80062c4 <_printf_i+0x234>)
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618a:	6866      	ldr	r6, [r4, #4]
 800618c:	2e00      	cmp	r6, #0
 800618e:	60a6      	str	r6, [r4, #8]
 8006190:	db05      	blt.n	800619e <_printf_i+0x10e>
 8006192:	6821      	ldr	r1, [r4, #0]
 8006194:	432e      	orrs	r6, r5
 8006196:	f021 0104 	bic.w	r1, r1, #4
 800619a:	6021      	str	r1, [r4, #0]
 800619c:	d04b      	beq.n	8006236 <_printf_i+0x1a6>
 800619e:	4616      	mov	r6, r2
 80061a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a4:	fb03 5711 	mls	r7, r3, r1, r5
 80061a8:	5dc7      	ldrb	r7, [r0, r7]
 80061aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ae:	462f      	mov	r7, r5
 80061b0:	42bb      	cmp	r3, r7
 80061b2:	460d      	mov	r5, r1
 80061b4:	d9f4      	bls.n	80061a0 <_printf_i+0x110>
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d10b      	bne.n	80061d2 <_printf_i+0x142>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	07df      	lsls	r7, r3, #31
 80061be:	d508      	bpl.n	80061d2 <_printf_i+0x142>
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	6861      	ldr	r1, [r4, #4]
 80061c4:	4299      	cmp	r1, r3
 80061c6:	bfde      	ittt	le
 80061c8:	2330      	movle	r3, #48	@ 0x30
 80061ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d2:	1b92      	subs	r2, r2, r6
 80061d4:	6122      	str	r2, [r4, #16]
 80061d6:	464b      	mov	r3, r9
 80061d8:	4621      	mov	r1, r4
 80061da:	4640      	mov	r0, r8
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	aa03      	add	r2, sp, #12
 80061e2:	f7ff fee3 	bl	8005fac <_printf_common>
 80061e6:	3001      	adds	r0, #1
 80061e8:	d14a      	bne.n	8006280 <_printf_i+0x1f0>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	b004      	add	sp, #16
 80061f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	f043 0320 	orr.w	r3, r3, #32
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	2778      	movs	r7, #120	@ 0x78
 80061fe:	4832      	ldr	r0, [pc, #200]	@ (80062c8 <_printf_i+0x238>)
 8006200:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	6831      	ldr	r1, [r6, #0]
 8006208:	061f      	lsls	r7, r3, #24
 800620a:	f851 5b04 	ldr.w	r5, [r1], #4
 800620e:	d402      	bmi.n	8006216 <_printf_i+0x186>
 8006210:	065f      	lsls	r7, r3, #25
 8006212:	bf48      	it	mi
 8006214:	b2ad      	uxthmi	r5, r5
 8006216:	6031      	str	r1, [r6, #0]
 8006218:	07d9      	lsls	r1, r3, #31
 800621a:	bf44      	itt	mi
 800621c:	f043 0320 	orrmi.w	r3, r3, #32
 8006220:	6023      	strmi	r3, [r4, #0]
 8006222:	b11d      	cbz	r5, 800622c <_printf_i+0x19c>
 8006224:	2310      	movs	r3, #16
 8006226:	e7ad      	b.n	8006184 <_printf_i+0xf4>
 8006228:	4826      	ldr	r0, [pc, #152]	@ (80062c4 <_printf_i+0x234>)
 800622a:	e7e9      	b.n	8006200 <_printf_i+0x170>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	e7f6      	b.n	8006224 <_printf_i+0x194>
 8006236:	4616      	mov	r6, r2
 8006238:	e7bd      	b.n	80061b6 <_printf_i+0x126>
 800623a:	6833      	ldr	r3, [r6, #0]
 800623c:	6825      	ldr	r5, [r4, #0]
 800623e:	1d18      	adds	r0, r3, #4
 8006240:	6961      	ldr	r1, [r4, #20]
 8006242:	6030      	str	r0, [r6, #0]
 8006244:	062e      	lsls	r6, r5, #24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	d501      	bpl.n	800624e <_printf_i+0x1be>
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	e002      	b.n	8006254 <_printf_i+0x1c4>
 800624e:	0668      	lsls	r0, r5, #25
 8006250:	d5fb      	bpl.n	800624a <_printf_i+0x1ba>
 8006252:	8019      	strh	r1, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	4616      	mov	r6, r2
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	e7bc      	b.n	80061d6 <_printf_i+0x146>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	2100      	movs	r1, #0
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	6032      	str	r2, [r6, #0]
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	4630      	mov	r0, r6
 800626a:	f000 f9e6 	bl	800663a <memchr>
 800626e:	b108      	cbz	r0, 8006274 <_printf_i+0x1e4>
 8006270:	1b80      	subs	r0, r0, r6
 8006272:	6060      	str	r0, [r4, #4]
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	2300      	movs	r3, #0
 800627a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627e:	e7aa      	b.n	80061d6 <_printf_i+0x146>
 8006280:	4632      	mov	r2, r6
 8006282:	4649      	mov	r1, r9
 8006284:	4640      	mov	r0, r8
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	47d0      	blx	sl
 800628a:	3001      	adds	r0, #1
 800628c:	d0ad      	beq.n	80061ea <_printf_i+0x15a>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	079b      	lsls	r3, r3, #30
 8006292:	d413      	bmi.n	80062bc <_printf_i+0x22c>
 8006294:	68e0      	ldr	r0, [r4, #12]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	4298      	cmp	r0, r3
 800629a:	bfb8      	it	lt
 800629c:	4618      	movlt	r0, r3
 800629e:	e7a6      	b.n	80061ee <_printf_i+0x15e>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4632      	mov	r2, r6
 80062a4:	4649      	mov	r1, r9
 80062a6:	4640      	mov	r0, r8
 80062a8:	47d0      	blx	sl
 80062aa:	3001      	adds	r0, #1
 80062ac:	d09d      	beq.n	80061ea <_printf_i+0x15a>
 80062ae:	3501      	adds	r5, #1
 80062b0:	68e3      	ldr	r3, [r4, #12]
 80062b2:	9903      	ldr	r1, [sp, #12]
 80062b4:	1a5b      	subs	r3, r3, r1
 80062b6:	42ab      	cmp	r3, r5
 80062b8:	dcf2      	bgt.n	80062a0 <_printf_i+0x210>
 80062ba:	e7eb      	b.n	8006294 <_printf_i+0x204>
 80062bc:	2500      	movs	r5, #0
 80062be:	f104 0619 	add.w	r6, r4, #25
 80062c2:	e7f5      	b.n	80062b0 <_printf_i+0x220>
 80062c4:	08009951 	.word	0x08009951
 80062c8:	08009962 	.word	0x08009962

080062cc <std>:
 80062cc:	2300      	movs	r3, #0
 80062ce:	b510      	push	{r4, lr}
 80062d0:	4604      	mov	r4, r0
 80062d2:	e9c0 3300 	strd	r3, r3, [r0]
 80062d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062da:	6083      	str	r3, [r0, #8]
 80062dc:	8181      	strh	r1, [r0, #12]
 80062de:	6643      	str	r3, [r0, #100]	@ 0x64
 80062e0:	81c2      	strh	r2, [r0, #14]
 80062e2:	6183      	str	r3, [r0, #24]
 80062e4:	4619      	mov	r1, r3
 80062e6:	2208      	movs	r2, #8
 80062e8:	305c      	adds	r0, #92	@ 0x5c
 80062ea:	f000 f926 	bl	800653a <memset>
 80062ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <std+0x58>)
 80062f0:	6224      	str	r4, [r4, #32]
 80062f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <std+0x5c>)
 80062f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <std+0x60>)
 80062fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <std+0x64>)
 80062fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <std+0x68>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d006      	beq.n	8006314 <std+0x48>
 8006306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800630a:	4294      	cmp	r4, r2
 800630c:	d002      	beq.n	8006314 <std+0x48>
 800630e:	33d0      	adds	r3, #208	@ 0xd0
 8006310:	429c      	cmp	r4, r3
 8006312:	d105      	bne.n	8006320 <std+0x54>
 8006314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631c:	f000 b98a 	b.w	8006634 <__retarget_lock_init_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop
 8006324:	08006495 	.word	0x08006495
 8006328:	080064b7 	.word	0x080064b7
 800632c:	080064ef 	.word	0x080064ef
 8006330:	08006513 	.word	0x08006513
 8006334:	20000498 	.word	0x20000498

08006338 <stdio_exit_handler>:
 8006338:	4a02      	ldr	r2, [pc, #8]	@ (8006344 <stdio_exit_handler+0xc>)
 800633a:	4903      	ldr	r1, [pc, #12]	@ (8006348 <stdio_exit_handler+0x10>)
 800633c:	4803      	ldr	r0, [pc, #12]	@ (800634c <stdio_exit_handler+0x14>)
 800633e:	f000 b869 	b.w	8006414 <_fwalk_sglue>
 8006342:	bf00      	nop
 8006344:	20000020 	.word	0x20000020
 8006348:	08008009 	.word	0x08008009
 800634c:	20000030 	.word	0x20000030

08006350 <cleanup_stdio>:
 8006350:	6841      	ldr	r1, [r0, #4]
 8006352:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <cleanup_stdio+0x34>)
 8006354:	b510      	push	{r4, lr}
 8006356:	4299      	cmp	r1, r3
 8006358:	4604      	mov	r4, r0
 800635a:	d001      	beq.n	8006360 <cleanup_stdio+0x10>
 800635c:	f001 fe54 	bl	8008008 <_fflush_r>
 8006360:	68a1      	ldr	r1, [r4, #8]
 8006362:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <cleanup_stdio+0x38>)
 8006364:	4299      	cmp	r1, r3
 8006366:	d002      	beq.n	800636e <cleanup_stdio+0x1e>
 8006368:	4620      	mov	r0, r4
 800636a:	f001 fe4d 	bl	8008008 <_fflush_r>
 800636e:	68e1      	ldr	r1, [r4, #12]
 8006370:	4b06      	ldr	r3, [pc, #24]	@ (800638c <cleanup_stdio+0x3c>)
 8006372:	4299      	cmp	r1, r3
 8006374:	d004      	beq.n	8006380 <cleanup_stdio+0x30>
 8006376:	4620      	mov	r0, r4
 8006378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800637c:	f001 be44 	b.w	8008008 <_fflush_r>
 8006380:	bd10      	pop	{r4, pc}
 8006382:	bf00      	nop
 8006384:	20000498 	.word	0x20000498
 8006388:	20000500 	.word	0x20000500
 800638c:	20000568 	.word	0x20000568

08006390 <global_stdio_init.part.0>:
 8006390:	b510      	push	{r4, lr}
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <global_stdio_init.part.0+0x30>)
 8006394:	4c0b      	ldr	r4, [pc, #44]	@ (80063c4 <global_stdio_init.part.0+0x34>)
 8006396:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <global_stdio_init.part.0+0x38>)
 8006398:	4620      	mov	r0, r4
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	2104      	movs	r1, #4
 800639e:	2200      	movs	r2, #0
 80063a0:	f7ff ff94 	bl	80062cc <std>
 80063a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063a8:	2201      	movs	r2, #1
 80063aa:	2109      	movs	r1, #9
 80063ac:	f7ff ff8e 	bl	80062cc <std>
 80063b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063b4:	2202      	movs	r2, #2
 80063b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ba:	2112      	movs	r1, #18
 80063bc:	f7ff bf86 	b.w	80062cc <std>
 80063c0:	200005d0 	.word	0x200005d0
 80063c4:	20000498 	.word	0x20000498
 80063c8:	08006339 	.word	0x08006339

080063cc <__sfp_lock_acquire>:
 80063cc:	4801      	ldr	r0, [pc, #4]	@ (80063d4 <__sfp_lock_acquire+0x8>)
 80063ce:	f000 b932 	b.w	8006636 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	200005d9 	.word	0x200005d9

080063d8 <__sfp_lock_release>:
 80063d8:	4801      	ldr	r0, [pc, #4]	@ (80063e0 <__sfp_lock_release+0x8>)
 80063da:	f000 b92d 	b.w	8006638 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	200005d9 	.word	0x200005d9

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4604      	mov	r4, r0
 80063e8:	f7ff fff0 	bl	80063cc <__sfp_lock_acquire>
 80063ec:	6a23      	ldr	r3, [r4, #32]
 80063ee:	b11b      	cbz	r3, 80063f8 <__sinit+0x14>
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f7ff bff0 	b.w	80063d8 <__sfp_lock_release>
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__sinit+0x28>)
 80063fa:	6223      	str	r3, [r4, #32]
 80063fc:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <__sinit+0x2c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f5      	bne.n	80063f0 <__sinit+0xc>
 8006404:	f7ff ffc4 	bl	8006390 <global_stdio_init.part.0>
 8006408:	e7f2      	b.n	80063f0 <__sinit+0xc>
 800640a:	bf00      	nop
 800640c:	08006351 	.word	0x08006351
 8006410:	200005d0 	.word	0x200005d0

08006414 <_fwalk_sglue>:
 8006414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006418:	4607      	mov	r7, r0
 800641a:	4688      	mov	r8, r1
 800641c:	4614      	mov	r4, r2
 800641e:	2600      	movs	r6, #0
 8006420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006424:	f1b9 0901 	subs.w	r9, r9, #1
 8006428:	d505      	bpl.n	8006436 <_fwalk_sglue+0x22>
 800642a:	6824      	ldr	r4, [r4, #0]
 800642c:	2c00      	cmp	r4, #0
 800642e:	d1f7      	bne.n	8006420 <_fwalk_sglue+0xc>
 8006430:	4630      	mov	r0, r6
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d907      	bls.n	800644c <_fwalk_sglue+0x38>
 800643c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006440:	3301      	adds	r3, #1
 8006442:	d003      	beq.n	800644c <_fwalk_sglue+0x38>
 8006444:	4629      	mov	r1, r5
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	4306      	orrs	r6, r0
 800644c:	3568      	adds	r5, #104	@ 0x68
 800644e:	e7e9      	b.n	8006424 <_fwalk_sglue+0x10>

08006450 <siprintf>:
 8006450:	b40e      	push	{r1, r2, r3}
 8006452:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006456:	b510      	push	{r4, lr}
 8006458:	2400      	movs	r4, #0
 800645a:	b09d      	sub	sp, #116	@ 0x74
 800645c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800645e:	9002      	str	r0, [sp, #8]
 8006460:	9006      	str	r0, [sp, #24]
 8006462:	9107      	str	r1, [sp, #28]
 8006464:	9104      	str	r1, [sp, #16]
 8006466:	4809      	ldr	r0, [pc, #36]	@ (800648c <siprintf+0x3c>)
 8006468:	4909      	ldr	r1, [pc, #36]	@ (8006490 <siprintf+0x40>)
 800646a:	f853 2b04 	ldr.w	r2, [r3], #4
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	6800      	ldr	r0, [r0, #0]
 8006472:	a902      	add	r1, sp, #8
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006478:	f001 fc4a 	bl	8007d10 <_svfiprintf_r>
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	701c      	strb	r4, [r3, #0]
 8006480:	b01d      	add	sp, #116	@ 0x74
 8006482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006486:	b003      	add	sp, #12
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	2000002c 	.word	0x2000002c
 8006490:	ffff0208 	.word	0xffff0208

08006494 <__sread>:
 8006494:	b510      	push	{r4, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649c:	f000 f87c 	bl	8006598 <_read_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bfab      	itete	ge
 80064a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064a6:	89a3      	ldrhlt	r3, [r4, #12]
 80064a8:	181b      	addge	r3, r3, r0
 80064aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ae:	bfac      	ite	ge
 80064b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064b2:	81a3      	strhlt	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__swrite>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	461f      	mov	r7, r3
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	4605      	mov	r5, r0
 80064c0:	05db      	lsls	r3, r3, #23
 80064c2:	460c      	mov	r4, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d505      	bpl.n	80064d4 <__swrite+0x1e>
 80064c8:	2302      	movs	r3, #2
 80064ca:	2200      	movs	r2, #0
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	f000 f850 	bl	8006574 <_lseek_r>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	4632      	mov	r2, r6
 80064d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	4628      	mov	r0, r5
 80064e0:	463b      	mov	r3, r7
 80064e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f000 b867 	b.w	80065bc <_write_r>

080064ee <__sseek>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 f83d 	bl	8006574 <_lseek_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	bf15      	itete	ne
 8006500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800650a:	81a3      	strheq	r3, [r4, #12]
 800650c:	bf18      	it	ne
 800650e:	81a3      	strhne	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__sclose>:
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 b81d 	b.w	8006554 <_close_r>

0800651a <memcmp>:
 800651a:	b510      	push	{r4, lr}
 800651c:	3901      	subs	r1, #1
 800651e:	4402      	add	r2, r0
 8006520:	4290      	cmp	r0, r2
 8006522:	d101      	bne.n	8006528 <memcmp+0xe>
 8006524:	2000      	movs	r0, #0
 8006526:	e005      	b.n	8006534 <memcmp+0x1a>
 8006528:	7803      	ldrb	r3, [r0, #0]
 800652a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800652e:	42a3      	cmp	r3, r4
 8006530:	d001      	beq.n	8006536 <memcmp+0x1c>
 8006532:	1b18      	subs	r0, r3, r4
 8006534:	bd10      	pop	{r4, pc}
 8006536:	3001      	adds	r0, #1
 8006538:	e7f2      	b.n	8006520 <memcmp+0x6>

0800653a <memset>:
 800653a:	4603      	mov	r3, r0
 800653c:	4402      	add	r2, r0
 800653e:	4293      	cmp	r3, r2
 8006540:	d100      	bne.n	8006544 <memset+0xa>
 8006542:	4770      	bx	lr
 8006544:	f803 1b01 	strb.w	r1, [r3], #1
 8006548:	e7f9      	b.n	800653e <memset+0x4>
	...

0800654c <_localeconv_r>:
 800654c:	4800      	ldr	r0, [pc, #0]	@ (8006550 <_localeconv_r+0x4>)
 800654e:	4770      	bx	lr
 8006550:	2000016c 	.word	0x2000016c

08006554 <_close_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	2300      	movs	r3, #0
 8006558:	4d05      	ldr	r5, [pc, #20]	@ (8006570 <_close_r+0x1c>)
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fd fa8d 	bl	8003a7e <_close>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_close_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_close_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	200005d4 	.word	0x200005d4

08006574 <_lseek_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4604      	mov	r4, r0
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	2200      	movs	r2, #0
 800657e:	4d05      	ldr	r5, [pc, #20]	@ (8006594 <_lseek_r+0x20>)
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fd fa9f 	bl	8003ac6 <_lseek>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_lseek_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_lseek_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	200005d4 	.word	0x200005d4

08006598 <_read_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	2200      	movs	r2, #0
 80065a2:	4d05      	ldr	r5, [pc, #20]	@ (80065b8 <_read_r+0x20>)
 80065a4:	602a      	str	r2, [r5, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f7fd fa30 	bl	8003a0c <_read>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_read_r+0x1e>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_read_r+0x1e>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	200005d4 	.word	0x200005d4

080065bc <_write_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	2200      	movs	r2, #0
 80065c6:	4d05      	ldr	r5, [pc, #20]	@ (80065dc <_write_r+0x20>)
 80065c8:	602a      	str	r2, [r5, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7fd fa3b 	bl	8003a46 <_write>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_write_r+0x1e>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_write_r+0x1e>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	200005d4 	.word	0x200005d4

080065e0 <__errno>:
 80065e0:	4b01      	ldr	r3, [pc, #4]	@ (80065e8 <__errno+0x8>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2000002c 	.word	0x2000002c

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	2600      	movs	r6, #0
 80065f0:	4d0c      	ldr	r5, [pc, #48]	@ (8006624 <__libc_init_array+0x38>)
 80065f2:	4c0d      	ldr	r4, [pc, #52]	@ (8006628 <__libc_init_array+0x3c>)
 80065f4:	1b64      	subs	r4, r4, r5
 80065f6:	10a4      	asrs	r4, r4, #2
 80065f8:	42a6      	cmp	r6, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	f002 ffc4 	bl	8009588 <_init>
 8006600:	2600      	movs	r6, #0
 8006602:	4d0a      	ldr	r5, [pc, #40]	@ (800662c <__libc_init_array+0x40>)
 8006604:	4c0a      	ldr	r4, [pc, #40]	@ (8006630 <__libc_init_array+0x44>)
 8006606:	1b64      	subs	r4, r4, r5
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	42a6      	cmp	r6, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f855 3b04 	ldr.w	r3, [r5], #4
 8006614:	4798      	blx	r3
 8006616:	3601      	adds	r6, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f855 3b04 	ldr.w	r3, [r5], #4
 800661e:	4798      	blx	r3
 8006620:	3601      	adds	r6, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	08009bf8 	.word	0x08009bf8
 8006628:	08009bf8 	.word	0x08009bf8
 800662c:	08009bf8 	.word	0x08009bf8
 8006630:	08009bfc 	.word	0x08009bfc

08006634 <__retarget_lock_init_recursive>:
 8006634:	4770      	bx	lr

08006636 <__retarget_lock_acquire_recursive>:
 8006636:	4770      	bx	lr

08006638 <__retarget_lock_release_recursive>:
 8006638:	4770      	bx	lr

0800663a <memchr>:
 800663a:	4603      	mov	r3, r0
 800663c:	b510      	push	{r4, lr}
 800663e:	b2c9      	uxtb	r1, r1
 8006640:	4402      	add	r2, r0
 8006642:	4293      	cmp	r3, r2
 8006644:	4618      	mov	r0, r3
 8006646:	d101      	bne.n	800664c <memchr+0x12>
 8006648:	2000      	movs	r0, #0
 800664a:	e003      	b.n	8006654 <memchr+0x1a>
 800664c:	7804      	ldrb	r4, [r0, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	428c      	cmp	r4, r1
 8006652:	d1f6      	bne.n	8006642 <memchr+0x8>
 8006654:	bd10      	pop	{r4, pc}

08006656 <memcpy>:
 8006656:	440a      	add	r2, r1
 8006658:	4291      	cmp	r1, r2
 800665a:	f100 33ff 	add.w	r3, r0, #4294967295
 800665e:	d100      	bne.n	8006662 <memcpy+0xc>
 8006660:	4770      	bx	lr
 8006662:	b510      	push	{r4, lr}
 8006664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006668:	4291      	cmp	r1, r2
 800666a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666e:	d1f9      	bne.n	8006664 <memcpy+0xe>
 8006670:	bd10      	pop	{r4, pc}
	...

08006674 <__assert_func>:
 8006674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006676:	4614      	mov	r4, r2
 8006678:	461a      	mov	r2, r3
 800667a:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <__assert_func+0x2c>)
 800667c:	4605      	mov	r5, r0
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68d8      	ldr	r0, [r3, #12]
 8006682:	b14c      	cbz	r4, 8006698 <__assert_func+0x24>
 8006684:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <__assert_func+0x30>)
 8006686:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800668a:	9100      	str	r1, [sp, #0]
 800668c:	462b      	mov	r3, r5
 800668e:	4906      	ldr	r1, [pc, #24]	@ (80066a8 <__assert_func+0x34>)
 8006690:	f001 fce2 	bl	8008058 <fiprintf>
 8006694:	f001 fd1c 	bl	80080d0 <abort>
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__assert_func+0x38>)
 800669a:	461c      	mov	r4, r3
 800669c:	e7f3      	b.n	8006686 <__assert_func+0x12>
 800669e:	bf00      	nop
 80066a0:	2000002c 	.word	0x2000002c
 80066a4:	08009973 	.word	0x08009973
 80066a8:	08009980 	.word	0x08009980
 80066ac:	080099ae 	.word	0x080099ae

080066b0 <quorem>:
 80066b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	6903      	ldr	r3, [r0, #16]
 80066b6:	690c      	ldr	r4, [r1, #16]
 80066b8:	4607      	mov	r7, r0
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	db7e      	blt.n	80067bc <quorem+0x10c>
 80066be:	3c01      	subs	r4, #1
 80066c0:	00a3      	lsls	r3, r4, #2
 80066c2:	f100 0514 	add.w	r5, r0, #20
 80066c6:	f101 0814 	add.w	r8, r1, #20
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066da:	3301      	adds	r3, #1
 80066dc:	429a      	cmp	r2, r3
 80066de:	fbb2 f6f3 	udiv	r6, r2, r3
 80066e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066e6:	d32e      	bcc.n	8006746 <quorem+0x96>
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	46c4      	mov	ip, r8
 80066ee:	46ae      	mov	lr, r5
 80066f0:	46d3      	mov	fp, sl
 80066f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066f6:	b298      	uxth	r0, r3
 80066f8:	fb06 a000 	mla	r0, r6, r0, sl
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	0c02      	lsrs	r2, r0, #16
 8006700:	fb06 2303 	mla	r3, r6, r3, r2
 8006704:	f8de 2000 	ldr.w	r2, [lr]
 8006708:	b280      	uxth	r0, r0
 800670a:	b292      	uxth	r2, r2
 800670c:	1a12      	subs	r2, r2, r0
 800670e:	445a      	add	r2, fp
 8006710:	f8de 0000 	ldr.w	r0, [lr]
 8006714:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006718:	b29b      	uxth	r3, r3
 800671a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800671e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006722:	b292      	uxth	r2, r2
 8006724:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006728:	45e1      	cmp	r9, ip
 800672a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800672e:	f84e 2b04 	str.w	r2, [lr], #4
 8006732:	d2de      	bcs.n	80066f2 <quorem+0x42>
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	58eb      	ldr	r3, [r5, r3]
 8006738:	b92b      	cbnz	r3, 8006746 <quorem+0x96>
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	3b04      	subs	r3, #4
 800673e:	429d      	cmp	r5, r3
 8006740:	461a      	mov	r2, r3
 8006742:	d32f      	bcc.n	80067a4 <quorem+0xf4>
 8006744:	613c      	str	r4, [r7, #16]
 8006746:	4638      	mov	r0, r7
 8006748:	f001 f97e 	bl	8007a48 <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	db25      	blt.n	800679c <quorem+0xec>
 8006750:	4629      	mov	r1, r5
 8006752:	2000      	movs	r0, #0
 8006754:	f858 2b04 	ldr.w	r2, [r8], #4
 8006758:	f8d1 c000 	ldr.w	ip, [r1]
 800675c:	fa1f fe82 	uxth.w	lr, r2
 8006760:	fa1f f38c 	uxth.w	r3, ip
 8006764:	eba3 030e 	sub.w	r3, r3, lr
 8006768:	4403      	add	r3, r0
 800676a:	0c12      	lsrs	r2, r2, #16
 800676c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006770:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006774:	b29b      	uxth	r3, r3
 8006776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800677a:	45c1      	cmp	r9, r8
 800677c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006780:	f841 3b04 	str.w	r3, [r1], #4
 8006784:	d2e6      	bcs.n	8006754 <quorem+0xa4>
 8006786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800678a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800678e:	b922      	cbnz	r2, 800679a <quorem+0xea>
 8006790:	3b04      	subs	r3, #4
 8006792:	429d      	cmp	r5, r3
 8006794:	461a      	mov	r2, r3
 8006796:	d30b      	bcc.n	80067b0 <quorem+0x100>
 8006798:	613c      	str	r4, [r7, #16]
 800679a:	3601      	adds	r6, #1
 800679c:	4630      	mov	r0, r6
 800679e:	b003      	add	sp, #12
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	3b04      	subs	r3, #4
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d1cb      	bne.n	8006744 <quorem+0x94>
 80067ac:	3c01      	subs	r4, #1
 80067ae:	e7c6      	b.n	800673e <quorem+0x8e>
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	3b04      	subs	r3, #4
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d1ef      	bne.n	8006798 <quorem+0xe8>
 80067b8:	3c01      	subs	r4, #1
 80067ba:	e7ea      	b.n	8006792 <quorem+0xe2>
 80067bc:	2000      	movs	r0, #0
 80067be:	e7ee      	b.n	800679e <quorem+0xee>

080067c0 <_dtoa_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	69c7      	ldr	r7, [r0, #28]
 80067ca:	b097      	sub	sp, #92	@ 0x5c
 80067cc:	4681      	mov	r9, r0
 80067ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067d4:	b97f      	cbnz	r7, 80067f6 <_dtoa_r+0x36>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f000 fe0e 	bl	80073f8 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	f8c9 001c 	str.w	r0, [r9, #28]
 80067e2:	b920      	cbnz	r0, 80067ee <_dtoa_r+0x2e>
 80067e4:	21ef      	movs	r1, #239	@ 0xef
 80067e6:	4bac      	ldr	r3, [pc, #688]	@ (8006a98 <_dtoa_r+0x2d8>)
 80067e8:	48ac      	ldr	r0, [pc, #688]	@ (8006a9c <_dtoa_r+0x2dc>)
 80067ea:	f7ff ff43 	bl	8006674 <__assert_func>
 80067ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067f2:	6007      	str	r7, [r0, #0]
 80067f4:	60c7      	str	r7, [r0, #12]
 80067f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067fa:	6819      	ldr	r1, [r3, #0]
 80067fc:	b159      	cbz	r1, 8006816 <_dtoa_r+0x56>
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	2301      	movs	r3, #1
 8006802:	4093      	lsls	r3, r2
 8006804:	604a      	str	r2, [r1, #4]
 8006806:	608b      	str	r3, [r1, #8]
 8006808:	4648      	mov	r0, r9
 800680a:	f000 feeb 	bl	80075e4 <_Bfree>
 800680e:	2200      	movs	r2, #0
 8006810:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	1e2b      	subs	r3, r5, #0
 8006818:	bfaf      	iteee	ge
 800681a:	2300      	movge	r3, #0
 800681c:	2201      	movlt	r2, #1
 800681e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006822:	9307      	strlt	r3, [sp, #28]
 8006824:	bfa8      	it	ge
 8006826:	6033      	strge	r3, [r6, #0]
 8006828:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800682c:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa0 <_dtoa_r+0x2e0>)
 800682e:	bfb8      	it	lt
 8006830:	6032      	strlt	r2, [r6, #0]
 8006832:	ea33 0308 	bics.w	r3, r3, r8
 8006836:	d112      	bne.n	800685e <_dtoa_r+0x9e>
 8006838:	f242 730f 	movw	r3, #9999	@ 0x270f
 800683c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006844:	4323      	orrs	r3, r4
 8006846:	f000 855e 	beq.w	8007306 <_dtoa_r+0xb46>
 800684a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800684c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006aa4 <_dtoa_r+0x2e4>
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8560 	beq.w	8007316 <_dtoa_r+0xb56>
 8006856:	f10a 0303 	add.w	r3, sl, #3
 800685a:	f000 bd5a 	b.w	8007312 <_dtoa_r+0xb52>
 800685e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006862:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	f7fa f89b 	bl	80009a8 <__aeabi_dcmpeq>
 8006872:	4607      	mov	r7, r0
 8006874:	b158      	cbz	r0, 800688e <_dtoa_r+0xce>
 8006876:	2301      	movs	r3, #1
 8006878:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800687e:	b113      	cbz	r3, 8006886 <_dtoa_r+0xc6>
 8006880:	4b89      	ldr	r3, [pc, #548]	@ (8006aa8 <_dtoa_r+0x2e8>)
 8006882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006aac <_dtoa_r+0x2ec>
 800688a:	f000 bd44 	b.w	8007316 <_dtoa_r+0xb56>
 800688e:	ab14      	add	r3, sp, #80	@ 0x50
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	ab15      	add	r3, sp, #84	@ 0x54
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4648      	mov	r0, r9
 8006898:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800689c:	f001 f984 	bl	8007ba8 <__d2b>
 80068a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80068a4:	9003      	str	r0, [sp, #12]
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	d078      	beq.n	800699c <_dtoa_r+0x1dc>
 80068aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80068c2:	4619      	mov	r1, r3
 80068c4:	2200      	movs	r2, #0
 80068c6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ab0 <_dtoa_r+0x2f0>)
 80068c8:	f7f9 fc4e 	bl	8000168 <__aeabi_dsub>
 80068cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a80 <_dtoa_r+0x2c0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fe01 	bl	80004d8 <__aeabi_dmul>
 80068d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a88 <_dtoa_r+0x2c8>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fc46 	bl	800016c <__adddf3>
 80068e0:	4604      	mov	r4, r0
 80068e2:	4630      	mov	r0, r6
 80068e4:	460d      	mov	r5, r1
 80068e6:	f7f9 fd8d 	bl	8000404 <__aeabi_i2d>
 80068ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006a90 <_dtoa_r+0x2d0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fdf2 	bl	80004d8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7f9 fc36 	bl	800016c <__adddf3>
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	f7fa f898 	bl	8000a38 <__aeabi_d2iz>
 8006908:	2200      	movs	r2, #0
 800690a:	4607      	mov	r7, r0
 800690c:	2300      	movs	r3, #0
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7fa f853 	bl	80009bc <__aeabi_dcmplt>
 8006916:	b140      	cbz	r0, 800692a <_dtoa_r+0x16a>
 8006918:	4638      	mov	r0, r7
 800691a:	f7f9 fd73 	bl	8000404 <__aeabi_i2d>
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	f7fa f841 	bl	80009a8 <__aeabi_dcmpeq>
 8006926:	b900      	cbnz	r0, 800692a <_dtoa_r+0x16a>
 8006928:	3f01      	subs	r7, #1
 800692a:	2f16      	cmp	r7, #22
 800692c:	d854      	bhi.n	80069d8 <_dtoa_r+0x218>
 800692e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006932:	4b60      	ldr	r3, [pc, #384]	@ (8006ab4 <_dtoa_r+0x2f4>)
 8006934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7fa f83e 	bl	80009bc <__aeabi_dcmplt>
 8006940:	2800      	cmp	r0, #0
 8006942:	d04b      	beq.n	80069dc <_dtoa_r+0x21c>
 8006944:	2300      	movs	r3, #0
 8006946:	3f01      	subs	r7, #1
 8006948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800694a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800694c:	1b9b      	subs	r3, r3, r6
 800694e:	1e5a      	subs	r2, r3, #1
 8006950:	bf49      	itett	mi
 8006952:	f1c3 0301 	rsbmi	r3, r3, #1
 8006956:	2300      	movpl	r3, #0
 8006958:	9304      	strmi	r3, [sp, #16]
 800695a:	2300      	movmi	r3, #0
 800695c:	9209      	str	r2, [sp, #36]	@ 0x24
 800695e:	bf54      	ite	pl
 8006960:	9304      	strpl	r3, [sp, #16]
 8006962:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006964:	2f00      	cmp	r7, #0
 8006966:	db3b      	blt.n	80069e0 <_dtoa_r+0x220>
 8006968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696a:	970e      	str	r7, [sp, #56]	@ 0x38
 800696c:	443b      	add	r3, r7
 800696e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006970:	2300      	movs	r3, #0
 8006972:	930a      	str	r3, [sp, #40]	@ 0x28
 8006974:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006976:	2b09      	cmp	r3, #9
 8006978:	d865      	bhi.n	8006a46 <_dtoa_r+0x286>
 800697a:	2b05      	cmp	r3, #5
 800697c:	bfc4      	itt	gt
 800697e:	3b04      	subgt	r3, #4
 8006980:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006984:	bfc8      	it	gt
 8006986:	2400      	movgt	r4, #0
 8006988:	f1a3 0302 	sub.w	r3, r3, #2
 800698c:	bfd8      	it	le
 800698e:	2401      	movle	r4, #1
 8006990:	2b03      	cmp	r3, #3
 8006992:	d864      	bhi.n	8006a5e <_dtoa_r+0x29e>
 8006994:	e8df f003 	tbb	[pc, r3]
 8006998:	2c385553 	.word	0x2c385553
 800699c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069a0:	441e      	add	r6, r3
 80069a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	bfc1      	itttt	gt
 80069aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80069b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069ba:	bfd6      	itet	le
 80069bc:	f1c3 0320 	rsble	r3, r3, #32
 80069c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80069c4:	fa04 f003 	lslle.w	r0, r4, r3
 80069c8:	f7f9 fd0c 	bl	80003e4 <__aeabi_ui2d>
 80069cc:	2201      	movs	r2, #1
 80069ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069d2:	3e01      	subs	r6, #1
 80069d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80069d6:	e774      	b.n	80068c2 <_dtoa_r+0x102>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7b5      	b.n	8006948 <_dtoa_r+0x188>
 80069dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069de:	e7b4      	b.n	800694a <_dtoa_r+0x18a>
 80069e0:	9b04      	ldr	r3, [sp, #16]
 80069e2:	1bdb      	subs	r3, r3, r7
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	427b      	negs	r3, r7
 80069e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ea:	2300      	movs	r3, #0
 80069ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ee:	e7c1      	b.n	8006974 <_dtoa_r+0x1b4>
 80069f0:	2301      	movs	r3, #1
 80069f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f6:	eb07 0b03 	add.w	fp, r7, r3
 80069fa:	f10b 0301 	add.w	r3, fp, #1
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	bfb8      	it	lt
 8006a04:	2301      	movlt	r3, #1
 8006a06:	e006      	b.n	8006a16 <_dtoa_r+0x256>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dd28      	ble.n	8006a64 <_dtoa_r+0x2a4>
 8006a12:	469b      	mov	fp, r3
 8006a14:	9308      	str	r3, [sp, #32]
 8006a16:	2100      	movs	r1, #0
 8006a18:	2204      	movs	r2, #4
 8006a1a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a1e:	f102 0514 	add.w	r5, r2, #20
 8006a22:	429d      	cmp	r5, r3
 8006a24:	d926      	bls.n	8006a74 <_dtoa_r+0x2b4>
 8006a26:	6041      	str	r1, [r0, #4]
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 fd9b 	bl	8007564 <_Balloc>
 8006a2e:	4682      	mov	sl, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d143      	bne.n	8006abc <_dtoa_r+0x2fc>
 8006a34:	4602      	mov	r2, r0
 8006a36:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <_dtoa_r+0x2f8>)
 8006a3c:	e6d4      	b.n	80067e8 <_dtoa_r+0x28>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e7e3      	b.n	8006a0a <_dtoa_r+0x24a>
 8006a42:	2300      	movs	r3, #0
 8006a44:	e7d5      	b.n	80069f2 <_dtoa_r+0x232>
 8006a46:	2401      	movs	r4, #1
 8006a48:	2300      	movs	r3, #0
 8006a4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a4e:	f04f 3bff 	mov.w	fp, #4294967295
 8006a52:	2200      	movs	r2, #0
 8006a54:	2312      	movs	r3, #18
 8006a56:	f8cd b020 	str.w	fp, [sp, #32]
 8006a5a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a5c:	e7db      	b.n	8006a16 <_dtoa_r+0x256>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a62:	e7f4      	b.n	8006a4e <_dtoa_r+0x28e>
 8006a64:	f04f 0b01 	mov.w	fp, #1
 8006a68:	465b      	mov	r3, fp
 8006a6a:	f8cd b020 	str.w	fp, [sp, #32]
 8006a6e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006a72:	e7d0      	b.n	8006a16 <_dtoa_r+0x256>
 8006a74:	3101      	adds	r1, #1
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	e7d1      	b.n	8006a1e <_dtoa_r+0x25e>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	636f4361 	.word	0x636f4361
 8006a84:	3fd287a7 	.word	0x3fd287a7
 8006a88:	8b60c8b3 	.word	0x8b60c8b3
 8006a8c:	3fc68a28 	.word	0x3fc68a28
 8006a90:	509f79fb 	.word	0x509f79fb
 8006a94:	3fd34413 	.word	0x3fd34413
 8006a98:	080099bc 	.word	0x080099bc
 8006a9c:	080099d3 	.word	0x080099d3
 8006aa0:	7ff00000 	.word	0x7ff00000
 8006aa4:	080099b8 	.word	0x080099b8
 8006aa8:	08009950 	.word	0x08009950
 8006aac:	0800994f 	.word	0x0800994f
 8006ab0:	3ff80000 	.word	0x3ff80000
 8006ab4:	08009ae8 	.word	0x08009ae8
 8006ab8:	08009a2b 	.word	0x08009a2b
 8006abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	2b0e      	cmp	r3, #14
 8006ac6:	f200 80a1 	bhi.w	8006c0c <_dtoa_r+0x44c>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	f000 809e 	beq.w	8006c0c <_dtoa_r+0x44c>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	dd33      	ble.n	8006b3c <_dtoa_r+0x37c>
 8006ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d48 <_dtoa_r+0x588>)
 8006ad6:	f007 020f 	and.w	r2, r7, #15
 8006ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ade:	05f8      	lsls	r0, r7, #23
 8006ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006aec:	d516      	bpl.n	8006b1c <_dtoa_r+0x35c>
 8006aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006af2:	4b96      	ldr	r3, [pc, #600]	@ (8006d4c <_dtoa_r+0x58c>)
 8006af4:	2603      	movs	r6, #3
 8006af6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006afa:	f7f9 fe17 	bl	800072c <__aeabi_ddiv>
 8006afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b02:	f004 040f 	and.w	r4, r4, #15
 8006b06:	4d91      	ldr	r5, [pc, #580]	@ (8006d4c <_dtoa_r+0x58c>)
 8006b08:	b954      	cbnz	r4, 8006b20 <_dtoa_r+0x360>
 8006b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b12:	f7f9 fe0b 	bl	800072c <__aeabi_ddiv>
 8006b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b1a:	e028      	b.n	8006b6e <_dtoa_r+0x3ae>
 8006b1c:	2602      	movs	r6, #2
 8006b1e:	e7f2      	b.n	8006b06 <_dtoa_r+0x346>
 8006b20:	07e1      	lsls	r1, r4, #31
 8006b22:	d508      	bpl.n	8006b36 <_dtoa_r+0x376>
 8006b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b2c:	f7f9 fcd4 	bl	80004d8 <__aeabi_dmul>
 8006b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b34:	3601      	adds	r6, #1
 8006b36:	1064      	asrs	r4, r4, #1
 8006b38:	3508      	adds	r5, #8
 8006b3a:	e7e5      	b.n	8006b08 <_dtoa_r+0x348>
 8006b3c:	f000 80af 	beq.w	8006c9e <_dtoa_r+0x4de>
 8006b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b44:	427c      	negs	r4, r7
 8006b46:	4b80      	ldr	r3, [pc, #512]	@ (8006d48 <_dtoa_r+0x588>)
 8006b48:	f004 020f 	and.w	r2, r4, #15
 8006b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fcc0 	bl	80004d8 <__aeabi_dmul>
 8006b58:	2602      	movs	r6, #2
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b60:	4d7a      	ldr	r5, [pc, #488]	@ (8006d4c <_dtoa_r+0x58c>)
 8006b62:	1124      	asrs	r4, r4, #4
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	f040 808f 	bne.w	8006c88 <_dtoa_r+0x4c8>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1d3      	bne.n	8006b16 <_dtoa_r+0x356>
 8006b6e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8094 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4b73      	ldr	r3, [pc, #460]	@ (8006d50 <_dtoa_r+0x590>)
 8006b82:	f7f9 ff1b 	bl	80009bc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f000 808b 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8087 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b94:	f1bb 0f00 	cmp.w	fp, #0
 8006b98:	dd34      	ble.n	8006c04 <_dtoa_r+0x444>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d54 <_dtoa_r+0x594>)
 8006ba2:	f7f9 fc99 	bl	80004d8 <__aeabi_dmul>
 8006ba6:	465c      	mov	r4, fp
 8006ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bac:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7f9 fc26 	bl	8000404 <__aeabi_i2d>
 8006bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bbc:	f7f9 fc8c 	bl	80004d8 <__aeabi_dmul>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4b65      	ldr	r3, [pc, #404]	@ (8006d58 <_dtoa_r+0x598>)
 8006bc4:	f7f9 fad2 	bl	800016c <__adddf3>
 8006bc8:	4605      	mov	r5, r0
 8006bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d16a      	bne.n	8006ca8 <_dtoa_r+0x4e8>
 8006bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4b60      	ldr	r3, [pc, #384]	@ (8006d5c <_dtoa_r+0x59c>)
 8006bda:	f7f9 fac5 	bl	8000168 <__aeabi_dsub>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006be6:	462a      	mov	r2, r5
 8006be8:	4633      	mov	r3, r6
 8006bea:	f7f9 ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f040 8298 	bne.w	8007124 <_dtoa_r+0x964>
 8006bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bfe:	f7f9 fedd 	bl	80009bc <__aeabi_dcmplt>
 8006c02:	bb38      	cbnz	r0, 8006c54 <_dtoa_r+0x494>
 8006c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f2c0 8157 	blt.w	8006ec2 <_dtoa_r+0x702>
 8006c14:	2f0e      	cmp	r7, #14
 8006c16:	f300 8154 	bgt.w	8006ec2 <_dtoa_r+0x702>
 8006c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d48 <_dtoa_r+0x588>)
 8006c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f280 80e5 	bge.w	8006dfa <_dtoa_r+0x63a>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f300 80e1 	bgt.w	8006dfa <_dtoa_r+0x63a>
 8006c38:	d10c      	bne.n	8006c54 <_dtoa_r+0x494>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4b46      	ldr	r3, [pc, #280]	@ (8006d5c <_dtoa_r+0x59c>)
 8006c42:	f7f9 fc49 	bl	80004d8 <__aeabi_dmul>
 8006c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c4a:	f7f9 fecb 	bl	80009e4 <__aeabi_dcmpge>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f000 8266 	beq.w	8007120 <_dtoa_r+0x960>
 8006c54:	2400      	movs	r4, #0
 8006c56:	4625      	mov	r5, r4
 8006c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c5a:	4656      	mov	r6, sl
 8006c5c:	ea6f 0803 	mvn.w	r8, r3
 8006c60:	2700      	movs	r7, #0
 8006c62:	4621      	mov	r1, r4
 8006c64:	4648      	mov	r0, r9
 8006c66:	f000 fcbd 	bl	80075e4 <_Bfree>
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	f000 80bd 	beq.w	8006dea <_dtoa_r+0x62a>
 8006c70:	b12f      	cbz	r7, 8006c7e <_dtoa_r+0x4be>
 8006c72:	42af      	cmp	r7, r5
 8006c74:	d003      	beq.n	8006c7e <_dtoa_r+0x4be>
 8006c76:	4639      	mov	r1, r7
 8006c78:	4648      	mov	r0, r9
 8006c7a:	f000 fcb3 	bl	80075e4 <_Bfree>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4648      	mov	r0, r9
 8006c82:	f000 fcaf 	bl	80075e4 <_Bfree>
 8006c86:	e0b0      	b.n	8006dea <_dtoa_r+0x62a>
 8006c88:	07e2      	lsls	r2, r4, #31
 8006c8a:	d505      	bpl.n	8006c98 <_dtoa_r+0x4d8>
 8006c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	2301      	movs	r3, #1
 8006c96:	3601      	adds	r6, #1
 8006c98:	1064      	asrs	r4, r4, #1
 8006c9a:	3508      	adds	r5, #8
 8006c9c:	e762      	b.n	8006b64 <_dtoa_r+0x3a4>
 8006c9e:	2602      	movs	r6, #2
 8006ca0:	e765      	b.n	8006b6e <_dtoa_r+0x3ae>
 8006ca2:	46b8      	mov	r8, r7
 8006ca4:	9c08      	ldr	r4, [sp, #32]
 8006ca6:	e784      	b.n	8006bb2 <_dtoa_r+0x3f2>
 8006ca8:	4b27      	ldr	r3, [pc, #156]	@ (8006d48 <_dtoa_r+0x588>)
 8006caa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cb4:	4454      	add	r4, sl
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	d054      	beq.n	8006d64 <_dtoa_r+0x5a4>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	4928      	ldr	r1, [pc, #160]	@ (8006d60 <_dtoa_r+0x5a0>)
 8006cbe:	f7f9 fd35 	bl	800072c <__aeabi_ddiv>
 8006cc2:	4633      	mov	r3, r6
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	f7f9 fa4f 	bl	8000168 <__aeabi_dsub>
 8006cca:	4656      	mov	r6, sl
 8006ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cd4:	f7f9 feb0 	bl	8000a38 <__aeabi_d2iz>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f7f9 fb93 	bl	8000404 <__aeabi_i2d>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ce6:	f7f9 fa3f 	bl	8000168 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	3530      	adds	r5, #48	@ 0x30
 8006cf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8006cfc:	f7f9 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d172      	bne.n	8006dea <_dtoa_r+0x62a>
 8006d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4911      	ldr	r1, [pc, #68]	@ (8006d50 <_dtoa_r+0x590>)
 8006d0c:	f7f9 fa2c 	bl	8000168 <__aeabi_dsub>
 8006d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d14:	f7f9 fe52 	bl	80009bc <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 80b4 	bne.w	8006e86 <_dtoa_r+0x6c6>
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	f43f af70 	beq.w	8006c04 <_dtoa_r+0x444>
 8006d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <_dtoa_r+0x594>)
 8006d2c:	f7f9 fbd4 	bl	80004d8 <__aeabi_dmul>
 8006d30:	2200      	movs	r2, #0
 8006d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <_dtoa_r+0x594>)
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d44:	e7c4      	b.n	8006cd0 <_dtoa_r+0x510>
 8006d46:	bf00      	nop
 8006d48:	08009ae8 	.word	0x08009ae8
 8006d4c:	08009ac0 	.word	0x08009ac0
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	40240000 	.word	0x40240000
 8006d58:	401c0000 	.word	0x401c0000
 8006d5c:	40140000 	.word	0x40140000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7f9 fbb6 	bl	80004d8 <__aeabi_dmul>
 8006d6c:	4656      	mov	r6, sl
 8006d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d78:	f7f9 fe5e 	bl	8000a38 <__aeabi_d2iz>
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	f7f9 fb41 	bl	8000404 <__aeabi_i2d>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d8a:	f7f9 f9ed 	bl	8000168 <__aeabi_dsub>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	3530      	adds	r5, #48	@ 0x30
 8006d94:	f806 5b01 	strb.w	r5, [r6], #1
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	d124      	bne.n	8006dee <_dtoa_r+0x62e>
 8006da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006da8:	4bae      	ldr	r3, [pc, #696]	@ (8007064 <_dtoa_r+0x8a4>)
 8006daa:	f7f9 f9df 	bl	800016c <__adddf3>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db6:	f7f9 fe1f 	bl	80009f8 <__aeabi_dcmpgt>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d163      	bne.n	8006e86 <_dtoa_r+0x6c6>
 8006dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	49a7      	ldr	r1, [pc, #668]	@ (8007064 <_dtoa_r+0x8a4>)
 8006dc6:	f7f9 f9cf 	bl	8000168 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd2:	f7f9 fdf3 	bl	80009bc <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f af14 	beq.w	8006c04 <_dtoa_r+0x444>
 8006ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006dde:	1e73      	subs	r3, r6, #1
 8006de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006de6:	2b30      	cmp	r3, #48	@ 0x30
 8006de8:	d0f8      	beq.n	8006ddc <_dtoa_r+0x61c>
 8006dea:	4647      	mov	r7, r8
 8006dec:	e03b      	b.n	8006e66 <_dtoa_r+0x6a6>
 8006dee:	4b9e      	ldr	r3, [pc, #632]	@ (8007068 <_dtoa_r+0x8a8>)
 8006df0:	f7f9 fb72 	bl	80004d8 <__aeabi_dmul>
 8006df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006df8:	e7bc      	b.n	8006d74 <_dtoa_r+0x5b4>
 8006dfa:	4656      	mov	r6, sl
 8006dfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fc90 	bl	800072c <__aeabi_ddiv>
 8006e0c:	f7f9 fe14 	bl	8000a38 <__aeabi_d2iz>
 8006e10:	4680      	mov	r8, r0
 8006e12:	f7f9 faf7 	bl	8000404 <__aeabi_i2d>
 8006e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1a:	f7f9 fb5d 	bl	80004d8 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 f99f 	bl	8000168 <__aeabi_dsub>
 8006e2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e2e:	9d08      	ldr	r5, [sp, #32]
 8006e30:	f806 4b01 	strb.w	r4, [r6], #1
 8006e34:	eba6 040a 	sub.w	r4, r6, sl
 8006e38:	42a5      	cmp	r5, r4
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	d133      	bne.n	8006ea8 <_dtoa_r+0x6e8>
 8006e40:	f7f9 f994 	bl	800016c <__adddf3>
 8006e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	f7f9 fdd4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e50:	b9c0      	cbnz	r0, 8006e84 <_dtoa_r+0x6c4>
 8006e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8006e5e:	b110      	cbz	r0, 8006e66 <_dtoa_r+0x6a6>
 8006e60:	f018 0f01 	tst.w	r8, #1
 8006e64:	d10e      	bne.n	8006e84 <_dtoa_r+0x6c4>
 8006e66:	4648      	mov	r0, r9
 8006e68:	9903      	ldr	r1, [sp, #12]
 8006e6a:	f000 fbbb 	bl	80075e4 <_Bfree>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	7033      	strb	r3, [r6, #0]
 8006e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e74:	3701      	adds	r7, #1
 8006e76:	601f      	str	r7, [r3, #0]
 8006e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 824b 	beq.w	8007316 <_dtoa_r+0xb56>
 8006e80:	601e      	str	r6, [r3, #0]
 8006e82:	e248      	b.n	8007316 <_dtoa_r+0xb56>
 8006e84:	46b8      	mov	r8, r7
 8006e86:	4633      	mov	r3, r6
 8006e88:	461e      	mov	r6, r3
 8006e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e8e:	2a39      	cmp	r2, #57	@ 0x39
 8006e90:	d106      	bne.n	8006ea0 <_dtoa_r+0x6e0>
 8006e92:	459a      	cmp	sl, r3
 8006e94:	d1f8      	bne.n	8006e88 <_dtoa_r+0x6c8>
 8006e96:	2230      	movs	r2, #48	@ 0x30
 8006e98:	f108 0801 	add.w	r8, r8, #1
 8006e9c:	f88a 2000 	strb.w	r2, [sl]
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e7a0      	b.n	8006dea <_dtoa_r+0x62a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8007068 <_dtoa_r+0x8a8>)
 8006eac:	f7f9 fb14 	bl	80004d8 <__aeabi_dmul>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	f7f9 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d09f      	beq.n	8006e00 <_dtoa_r+0x640>
 8006ec0:	e7d1      	b.n	8006e66 <_dtoa_r+0x6a6>
 8006ec2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	f000 80ea 	beq.w	800709e <_dtoa_r+0x8de>
 8006eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	f300 80cd 	bgt.w	800706c <_dtoa_r+0x8ac>
 8006ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	f000 80c1 	beq.w	800705c <_dtoa_r+0x89c>
 8006eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ee0:	9e04      	ldr	r6, [sp, #16]
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	441a      	add	r2, r3
 8006ee8:	9204      	str	r2, [sp, #16]
 8006eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eec:	4648      	mov	r0, r9
 8006eee:	441a      	add	r2, r3
 8006ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef2:	f000 fc2b 	bl	800774c <__i2b>
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b166      	cbz	r6, 8006f14 <_dtoa_r+0x754>
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd09      	ble.n	8006f14 <_dtoa_r+0x754>
 8006f00:	42b3      	cmp	r3, r6
 8006f02:	bfa8      	it	ge
 8006f04:	4633      	movge	r3, r6
 8006f06:	9a04      	ldr	r2, [sp, #16]
 8006f08:	1af6      	subs	r6, r6, r3
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	9204      	str	r2, [sp, #16]
 8006f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f16:	b30b      	cbz	r3, 8006f5c <_dtoa_r+0x79c>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80c6 	beq.w	80070ac <_dtoa_r+0x8ec>
 8006f20:	2c00      	cmp	r4, #0
 8006f22:	f000 80c0 	beq.w	80070a6 <_dtoa_r+0x8e6>
 8006f26:	4629      	mov	r1, r5
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f000 fcc6 	bl	80078bc <__pow5mult>
 8006f30:	9a03      	ldr	r2, [sp, #12]
 8006f32:	4601      	mov	r1, r0
 8006f34:	4605      	mov	r5, r0
 8006f36:	4648      	mov	r0, r9
 8006f38:	f000 fc1e 	bl	8007778 <__multiply>
 8006f3c:	9903      	ldr	r1, [sp, #12]
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4648      	mov	r0, r9
 8006f42:	f000 fb4f 	bl	80075e4 <_Bfree>
 8006f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f48:	1b1b      	subs	r3, r3, r4
 8006f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f4c:	f000 80b1 	beq.w	80070b2 <_dtoa_r+0x8f2>
 8006f50:	4641      	mov	r1, r8
 8006f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fcb1 	bl	80078bc <__pow5mult>
 8006f5a:	9003      	str	r0, [sp, #12]
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	4648      	mov	r0, r9
 8006f60:	f000 fbf4 	bl	800774c <__i2b>
 8006f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f66:	4604      	mov	r4, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 81d8 	beq.w	800731e <_dtoa_r+0xb5e>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4601      	mov	r1, r0
 8006f72:	4648      	mov	r0, r9
 8006f74:	f000 fca2 	bl	80078bc <__pow5mult>
 8006f78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f300 809f 	bgt.w	80070c0 <_dtoa_r+0x900>
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8097 	bne.w	80070b8 <_dtoa_r+0x8f8>
 8006f8a:	9b07      	ldr	r3, [sp, #28]
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 8093 	bne.w	80070bc <_dtoa_r+0x8fc>
 8006f96:	9b07      	ldr	r3, [sp, #28]
 8006f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	051b      	lsls	r3, r3, #20
 8006fa0:	b133      	cbz	r3, 8006fb0 <_dtoa_r+0x7f0>
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006faa:	3301      	adds	r3, #1
 8006fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fae:	2301      	movs	r3, #1
 8006fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 81b8 	beq.w	800732a <_dtoa_r+0xb6a>
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fc0:	6918      	ldr	r0, [r3, #16]
 8006fc2:	f000 fb77 	bl	80076b4 <__hi0bits>
 8006fc6:	f1c0 0020 	rsb	r0, r0, #32
 8006fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fcc:	4418      	add	r0, r3
 8006fce:	f010 001f 	ands.w	r0, r0, #31
 8006fd2:	f000 8082 	beq.w	80070da <_dtoa_r+0x91a>
 8006fd6:	f1c0 0320 	rsb	r3, r0, #32
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	dd73      	ble.n	80070c6 <_dtoa_r+0x906>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	f1c0 001c 	rsb	r0, r0, #28
 8006fe4:	4403      	add	r3, r0
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fea:	4406      	add	r6, r0
 8006fec:	4403      	add	r3, r0
 8006fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd05      	ble.n	8007002 <_dtoa_r+0x842>
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4648      	mov	r0, r9
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	f000 fcb8 	bl	8007970 <__lshift>
 8007000:	9003      	str	r0, [sp, #12]
 8007002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd05      	ble.n	8007014 <_dtoa_r+0x854>
 8007008:	4621      	mov	r1, r4
 800700a:	461a      	mov	r2, r3
 800700c:	4648      	mov	r0, r9
 800700e:	f000 fcaf 	bl	8007970 <__lshift>
 8007012:	4604      	mov	r4, r0
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d061      	beq.n	80070de <_dtoa_r+0x91e>
 800701a:	4621      	mov	r1, r4
 800701c:	9803      	ldr	r0, [sp, #12]
 800701e:	f000 fd13 	bl	8007a48 <__mcmp>
 8007022:	2800      	cmp	r0, #0
 8007024:	da5b      	bge.n	80070de <_dtoa_r+0x91e>
 8007026:	2300      	movs	r3, #0
 8007028:	220a      	movs	r2, #10
 800702a:	4648      	mov	r0, r9
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	f000 fafb 	bl	8007628 <__multadd>
 8007032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007034:	f107 38ff 	add.w	r8, r7, #4294967295
 8007038:	9003      	str	r0, [sp, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 8177 	beq.w	800732e <_dtoa_r+0xb6e>
 8007040:	4629      	mov	r1, r5
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4648      	mov	r0, r9
 8007048:	f000 faee 	bl	8007628 <__multadd>
 800704c:	f1bb 0f00 	cmp.w	fp, #0
 8007050:	4605      	mov	r5, r0
 8007052:	dc6f      	bgt.n	8007134 <_dtoa_r+0x974>
 8007054:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007056:	2b02      	cmp	r3, #2
 8007058:	dc49      	bgt.n	80070ee <_dtoa_r+0x92e>
 800705a:	e06b      	b.n	8007134 <_dtoa_r+0x974>
 800705c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800705e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007062:	e73c      	b.n	8006ede <_dtoa_r+0x71e>
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	40240000 	.word	0x40240000
 800706c:	9b08      	ldr	r3, [sp, #32]
 800706e:	1e5c      	subs	r4, r3, #1
 8007070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007072:	42a3      	cmp	r3, r4
 8007074:	db09      	blt.n	800708a <_dtoa_r+0x8ca>
 8007076:	1b1c      	subs	r4, r3, r4
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f6bf af30 	bge.w	8006ee0 <_dtoa_r+0x720>
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	9a08      	ldr	r2, [sp, #32]
 8007084:	1a9e      	subs	r6, r3, r2
 8007086:	2300      	movs	r3, #0
 8007088:	e72b      	b.n	8006ee2 <_dtoa_r+0x722>
 800708a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800708c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800708e:	1ae3      	subs	r3, r4, r3
 8007090:	441a      	add	r2, r3
 8007092:	940a      	str	r4, [sp, #40]	@ 0x28
 8007094:	9e04      	ldr	r6, [sp, #16]
 8007096:	2400      	movs	r4, #0
 8007098:	9b08      	ldr	r3, [sp, #32]
 800709a:	920e      	str	r2, [sp, #56]	@ 0x38
 800709c:	e721      	b.n	8006ee2 <_dtoa_r+0x722>
 800709e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070a0:	9e04      	ldr	r6, [sp, #16]
 80070a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070a4:	e728      	b.n	8006ef8 <_dtoa_r+0x738>
 80070a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070aa:	e751      	b.n	8006f50 <_dtoa_r+0x790>
 80070ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ae:	9903      	ldr	r1, [sp, #12]
 80070b0:	e750      	b.n	8006f54 <_dtoa_r+0x794>
 80070b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b6:	e751      	b.n	8006f5c <_dtoa_r+0x79c>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e779      	b.n	8006fb0 <_dtoa_r+0x7f0>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	e777      	b.n	8006fb0 <_dtoa_r+0x7f0>
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c4:	e779      	b.n	8006fba <_dtoa_r+0x7fa>
 80070c6:	d093      	beq.n	8006ff0 <_dtoa_r+0x830>
 80070c8:	9a04      	ldr	r2, [sp, #16]
 80070ca:	331c      	adds	r3, #28
 80070cc:	441a      	add	r2, r3
 80070ce:	9204      	str	r2, [sp, #16]
 80070d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d2:	441e      	add	r6, r3
 80070d4:	441a      	add	r2, r3
 80070d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80070d8:	e78a      	b.n	8006ff0 <_dtoa_r+0x830>
 80070da:	4603      	mov	r3, r0
 80070dc:	e7f4      	b.n	80070c8 <_dtoa_r+0x908>
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	46b8      	mov	r8, r7
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dc20      	bgt.n	8007128 <_dtoa_r+0x968>
 80070e6:	469b      	mov	fp, r3
 80070e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	dd1e      	ble.n	800712c <_dtoa_r+0x96c>
 80070ee:	f1bb 0f00 	cmp.w	fp, #0
 80070f2:	f47f adb1 	bne.w	8006c58 <_dtoa_r+0x498>
 80070f6:	4621      	mov	r1, r4
 80070f8:	465b      	mov	r3, fp
 80070fa:	2205      	movs	r2, #5
 80070fc:	4648      	mov	r0, r9
 80070fe:	f000 fa93 	bl	8007628 <__multadd>
 8007102:	4601      	mov	r1, r0
 8007104:	4604      	mov	r4, r0
 8007106:	9803      	ldr	r0, [sp, #12]
 8007108:	f000 fc9e 	bl	8007a48 <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	f77f ada3 	ble.w	8006c58 <_dtoa_r+0x498>
 8007112:	4656      	mov	r6, sl
 8007114:	2331      	movs	r3, #49	@ 0x31
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	f806 3b01 	strb.w	r3, [r6], #1
 800711e:	e59f      	b.n	8006c60 <_dtoa_r+0x4a0>
 8007120:	46b8      	mov	r8, r7
 8007122:	9c08      	ldr	r4, [sp, #32]
 8007124:	4625      	mov	r5, r4
 8007126:	e7f4      	b.n	8007112 <_dtoa_r+0x952>
 8007128:	f8dd b020 	ldr.w	fp, [sp, #32]
 800712c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8101 	beq.w	8007336 <_dtoa_r+0xb76>
 8007134:	2e00      	cmp	r6, #0
 8007136:	dd05      	ble.n	8007144 <_dtoa_r+0x984>
 8007138:	4629      	mov	r1, r5
 800713a:	4632      	mov	r2, r6
 800713c:	4648      	mov	r0, r9
 800713e:	f000 fc17 	bl	8007970 <__lshift>
 8007142:	4605      	mov	r5, r0
 8007144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d05c      	beq.n	8007204 <_dtoa_r+0xa44>
 800714a:	4648      	mov	r0, r9
 800714c:	6869      	ldr	r1, [r5, #4]
 800714e:	f000 fa09 	bl	8007564 <_Balloc>
 8007152:	4606      	mov	r6, r0
 8007154:	b928      	cbnz	r0, 8007162 <_dtoa_r+0x9a2>
 8007156:	4602      	mov	r2, r0
 8007158:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800715c:	4b80      	ldr	r3, [pc, #512]	@ (8007360 <_dtoa_r+0xba0>)
 800715e:	f7ff bb43 	b.w	80067e8 <_dtoa_r+0x28>
 8007162:	692a      	ldr	r2, [r5, #16]
 8007164:	f105 010c 	add.w	r1, r5, #12
 8007168:	3202      	adds	r2, #2
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f7ff fa72 	bl	8006656 <memcpy>
 8007172:	2201      	movs	r2, #1
 8007174:	4631      	mov	r1, r6
 8007176:	4648      	mov	r0, r9
 8007178:	f000 fbfa 	bl	8007970 <__lshift>
 800717c:	462f      	mov	r7, r5
 800717e:	4605      	mov	r5, r0
 8007180:	f10a 0301 	add.w	r3, sl, #1
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	eb0a 030b 	add.w	r3, sl, fp
 800718a:	930a      	str	r3, [sp, #40]	@ 0x28
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	9309      	str	r3, [sp, #36]	@ 0x24
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	4621      	mov	r1, r4
 8007198:	9803      	ldr	r0, [sp, #12]
 800719a:	f103 3bff 	add.w	fp, r3, #4294967295
 800719e:	f7ff fa87 	bl	80066b0 <quorem>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4639      	mov	r1, r7
 80071a6:	3330      	adds	r3, #48	@ 0x30
 80071a8:	9006      	str	r0, [sp, #24]
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ae:	f000 fc4b 	bl	8007a48 <__mcmp>
 80071b2:	462a      	mov	r2, r5
 80071b4:	9008      	str	r0, [sp, #32]
 80071b6:	4621      	mov	r1, r4
 80071b8:	4648      	mov	r0, r9
 80071ba:	f000 fc61 	bl	8007a80 <__mdiff>
 80071be:	68c2      	ldr	r2, [r0, #12]
 80071c0:	4606      	mov	r6, r0
 80071c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c4:	bb02      	cbnz	r2, 8007208 <_dtoa_r+0xa48>
 80071c6:	4601      	mov	r1, r0
 80071c8:	9803      	ldr	r0, [sp, #12]
 80071ca:	f000 fc3d 	bl	8007a48 <__mcmp>
 80071ce:	4602      	mov	r2, r0
 80071d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071d2:	4631      	mov	r1, r6
 80071d4:	4648      	mov	r0, r9
 80071d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80071da:	f000 fa03 	bl	80075e4 <_Bfree>
 80071de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071e2:	9e04      	ldr	r6, [sp, #16]
 80071e4:	ea42 0103 	orr.w	r1, r2, r3
 80071e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ea:	4319      	orrs	r1, r3
 80071ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071ee:	d10d      	bne.n	800720c <_dtoa_r+0xa4c>
 80071f0:	2b39      	cmp	r3, #57	@ 0x39
 80071f2:	d027      	beq.n	8007244 <_dtoa_r+0xa84>
 80071f4:	9a08      	ldr	r2, [sp, #32]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	dd01      	ble.n	80071fe <_dtoa_r+0xa3e>
 80071fa:	9b06      	ldr	r3, [sp, #24]
 80071fc:	3331      	adds	r3, #49	@ 0x31
 80071fe:	f88b 3000 	strb.w	r3, [fp]
 8007202:	e52e      	b.n	8006c62 <_dtoa_r+0x4a2>
 8007204:	4628      	mov	r0, r5
 8007206:	e7b9      	b.n	800717c <_dtoa_r+0x9bc>
 8007208:	2201      	movs	r2, #1
 800720a:	e7e2      	b.n	80071d2 <_dtoa_r+0xa12>
 800720c:	9908      	ldr	r1, [sp, #32]
 800720e:	2900      	cmp	r1, #0
 8007210:	db04      	blt.n	800721c <_dtoa_r+0xa5c>
 8007212:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007214:	4301      	orrs	r1, r0
 8007216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007218:	4301      	orrs	r1, r0
 800721a:	d120      	bne.n	800725e <_dtoa_r+0xa9e>
 800721c:	2a00      	cmp	r2, #0
 800721e:	ddee      	ble.n	80071fe <_dtoa_r+0xa3e>
 8007220:	2201      	movs	r2, #1
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	4648      	mov	r0, r9
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	f000 fba2 	bl	8007970 <__lshift>
 800722c:	4621      	mov	r1, r4
 800722e:	9003      	str	r0, [sp, #12]
 8007230:	f000 fc0a 	bl	8007a48 <__mcmp>
 8007234:	2800      	cmp	r0, #0
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	dc02      	bgt.n	8007240 <_dtoa_r+0xa80>
 800723a:	d1e0      	bne.n	80071fe <_dtoa_r+0xa3e>
 800723c:	07da      	lsls	r2, r3, #31
 800723e:	d5de      	bpl.n	80071fe <_dtoa_r+0xa3e>
 8007240:	2b39      	cmp	r3, #57	@ 0x39
 8007242:	d1da      	bne.n	80071fa <_dtoa_r+0xa3a>
 8007244:	2339      	movs	r3, #57	@ 0x39
 8007246:	f88b 3000 	strb.w	r3, [fp]
 800724a:	4633      	mov	r3, r6
 800724c:	461e      	mov	r6, r3
 800724e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007252:	3b01      	subs	r3, #1
 8007254:	2a39      	cmp	r2, #57	@ 0x39
 8007256:	d04e      	beq.n	80072f6 <_dtoa_r+0xb36>
 8007258:	3201      	adds	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e501      	b.n	8006c62 <_dtoa_r+0x4a2>
 800725e:	2a00      	cmp	r2, #0
 8007260:	dd03      	ble.n	800726a <_dtoa_r+0xaaa>
 8007262:	2b39      	cmp	r3, #57	@ 0x39
 8007264:	d0ee      	beq.n	8007244 <_dtoa_r+0xa84>
 8007266:	3301      	adds	r3, #1
 8007268:	e7c9      	b.n	80071fe <_dtoa_r+0xa3e>
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800726e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007272:	428a      	cmp	r2, r1
 8007274:	d028      	beq.n	80072c8 <_dtoa_r+0xb08>
 8007276:	2300      	movs	r3, #0
 8007278:	220a      	movs	r2, #10
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	4648      	mov	r0, r9
 800727e:	f000 f9d3 	bl	8007628 <__multadd>
 8007282:	42af      	cmp	r7, r5
 8007284:	9003      	str	r0, [sp, #12]
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	f04f 020a 	mov.w	r2, #10
 800728e:	4639      	mov	r1, r7
 8007290:	4648      	mov	r0, r9
 8007292:	d107      	bne.n	80072a4 <_dtoa_r+0xae4>
 8007294:	f000 f9c8 	bl	8007628 <__multadd>
 8007298:	4607      	mov	r7, r0
 800729a:	4605      	mov	r5, r0
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	e777      	b.n	8007194 <_dtoa_r+0x9d4>
 80072a4:	f000 f9c0 	bl	8007628 <__multadd>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4607      	mov	r7, r0
 80072ac:	2300      	movs	r3, #0
 80072ae:	220a      	movs	r2, #10
 80072b0:	4648      	mov	r0, r9
 80072b2:	f000 f9b9 	bl	8007628 <__multadd>
 80072b6:	4605      	mov	r5, r0
 80072b8:	e7f0      	b.n	800729c <_dtoa_r+0xadc>
 80072ba:	f1bb 0f00 	cmp.w	fp, #0
 80072be:	bfcc      	ite	gt
 80072c0:	465e      	movgt	r6, fp
 80072c2:	2601      	movle	r6, #1
 80072c4:	2700      	movs	r7, #0
 80072c6:	4456      	add	r6, sl
 80072c8:	2201      	movs	r2, #1
 80072ca:	9903      	ldr	r1, [sp, #12]
 80072cc:	4648      	mov	r0, r9
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	f000 fb4e 	bl	8007970 <__lshift>
 80072d4:	4621      	mov	r1, r4
 80072d6:	9003      	str	r0, [sp, #12]
 80072d8:	f000 fbb6 	bl	8007a48 <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	dcb4      	bgt.n	800724a <_dtoa_r+0xa8a>
 80072e0:	d102      	bne.n	80072e8 <_dtoa_r+0xb28>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	07db      	lsls	r3, r3, #31
 80072e6:	d4b0      	bmi.n	800724a <_dtoa_r+0xa8a>
 80072e8:	4633      	mov	r3, r6
 80072ea:	461e      	mov	r6, r3
 80072ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f0:	2a30      	cmp	r2, #48	@ 0x30
 80072f2:	d0fa      	beq.n	80072ea <_dtoa_r+0xb2a>
 80072f4:	e4b5      	b.n	8006c62 <_dtoa_r+0x4a2>
 80072f6:	459a      	cmp	sl, r3
 80072f8:	d1a8      	bne.n	800724c <_dtoa_r+0xa8c>
 80072fa:	2331      	movs	r3, #49	@ 0x31
 80072fc:	f108 0801 	add.w	r8, r8, #1
 8007300:	f88a 3000 	strb.w	r3, [sl]
 8007304:	e4ad      	b.n	8006c62 <_dtoa_r+0x4a2>
 8007306:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007364 <_dtoa_r+0xba4>
 800730c:	b11b      	cbz	r3, 8007316 <_dtoa_r+0xb56>
 800730e:	f10a 0308 	add.w	r3, sl, #8
 8007312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4650      	mov	r0, sl
 8007318:	b017      	add	sp, #92	@ 0x5c
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007320:	2b01      	cmp	r3, #1
 8007322:	f77f ae2e 	ble.w	8006f82 <_dtoa_r+0x7c2>
 8007326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007328:	930a      	str	r3, [sp, #40]	@ 0x28
 800732a:	2001      	movs	r0, #1
 800732c:	e64d      	b.n	8006fca <_dtoa_r+0x80a>
 800732e:	f1bb 0f00 	cmp.w	fp, #0
 8007332:	f77f aed9 	ble.w	80070e8 <_dtoa_r+0x928>
 8007336:	4656      	mov	r6, sl
 8007338:	4621      	mov	r1, r4
 800733a:	9803      	ldr	r0, [sp, #12]
 800733c:	f7ff f9b8 	bl	80066b0 <quorem>
 8007340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007344:	f806 3b01 	strb.w	r3, [r6], #1
 8007348:	eba6 020a 	sub.w	r2, r6, sl
 800734c:	4593      	cmp	fp, r2
 800734e:	ddb4      	ble.n	80072ba <_dtoa_r+0xafa>
 8007350:	2300      	movs	r3, #0
 8007352:	220a      	movs	r2, #10
 8007354:	4648      	mov	r0, r9
 8007356:	9903      	ldr	r1, [sp, #12]
 8007358:	f000 f966 	bl	8007628 <__multadd>
 800735c:	9003      	str	r0, [sp, #12]
 800735e:	e7eb      	b.n	8007338 <_dtoa_r+0xb78>
 8007360:	08009a2b 	.word	0x08009a2b
 8007364:	080099af 	.word	0x080099af

08007368 <_free_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4605      	mov	r5, r0
 800736c:	2900      	cmp	r1, #0
 800736e:	d040      	beq.n	80073f2 <_free_r+0x8a>
 8007370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007374:	1f0c      	subs	r4, r1, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfb8      	it	lt
 800737a:	18e4      	addlt	r4, r4, r3
 800737c:	f000 f8e6 	bl	800754c <__malloc_lock>
 8007380:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <_free_r+0x8c>)
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	b933      	cbnz	r3, 8007394 <_free_r+0x2c>
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6014      	str	r4, [r2, #0]
 800738a:	4628      	mov	r0, r5
 800738c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007390:	f000 b8e2 	b.w	8007558 <__malloc_unlock>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d908      	bls.n	80073aa <_free_r+0x42>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	1821      	adds	r1, r4, r0
 800739c:	428b      	cmp	r3, r1
 800739e:	bf01      	itttt	eq
 80073a0:	6819      	ldreq	r1, [r3, #0]
 80073a2:	685b      	ldreq	r3, [r3, #4]
 80073a4:	1809      	addeq	r1, r1, r0
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	e7ed      	b.n	8007386 <_free_r+0x1e>
 80073aa:	461a      	mov	r2, r3
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	b10b      	cbz	r3, 80073b4 <_free_r+0x4c>
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	d9fa      	bls.n	80073aa <_free_r+0x42>
 80073b4:	6811      	ldr	r1, [r2, #0]
 80073b6:	1850      	adds	r0, r2, r1
 80073b8:	42a0      	cmp	r0, r4
 80073ba:	d10b      	bne.n	80073d4 <_free_r+0x6c>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	4401      	add	r1, r0
 80073c0:	1850      	adds	r0, r2, r1
 80073c2:	4283      	cmp	r3, r0
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	d1e0      	bne.n	800738a <_free_r+0x22>
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4408      	add	r0, r1
 80073ce:	6010      	str	r0, [r2, #0]
 80073d0:	6053      	str	r3, [r2, #4]
 80073d2:	e7da      	b.n	800738a <_free_r+0x22>
 80073d4:	d902      	bls.n	80073dc <_free_r+0x74>
 80073d6:	230c      	movs	r3, #12
 80073d8:	602b      	str	r3, [r5, #0]
 80073da:	e7d6      	b.n	800738a <_free_r+0x22>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	1821      	adds	r1, r4, r0
 80073e0:	428b      	cmp	r3, r1
 80073e2:	bf01      	itttt	eq
 80073e4:	6819      	ldreq	r1, [r3, #0]
 80073e6:	685b      	ldreq	r3, [r3, #4]
 80073e8:	1809      	addeq	r1, r1, r0
 80073ea:	6021      	streq	r1, [r4, #0]
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	6054      	str	r4, [r2, #4]
 80073f0:	e7cb      	b.n	800738a <_free_r+0x22>
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	200005e0 	.word	0x200005e0

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b825 	b.w	800744c <_malloc_r>
 8007402:	bf00      	nop
 8007404:	2000002c 	.word	0x2000002c

08007408 <sbrk_aligned>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4e0f      	ldr	r6, [pc, #60]	@ (8007448 <sbrk_aligned+0x40>)
 800740c:	460c      	mov	r4, r1
 800740e:	6831      	ldr	r1, [r6, #0]
 8007410:	4605      	mov	r5, r0
 8007412:	b911      	cbnz	r1, 800741a <sbrk_aligned+0x12>
 8007414:	f000 fe4c 	bl	80080b0 <_sbrk_r>
 8007418:	6030      	str	r0, [r6, #0]
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f000 fe47 	bl	80080b0 <_sbrk_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d103      	bne.n	800742e <sbrk_aligned+0x26>
 8007426:	f04f 34ff 	mov.w	r4, #4294967295
 800742a:	4620      	mov	r0, r4
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	1cc4      	adds	r4, r0, #3
 8007430:	f024 0403 	bic.w	r4, r4, #3
 8007434:	42a0      	cmp	r0, r4
 8007436:	d0f8      	beq.n	800742a <sbrk_aligned+0x22>
 8007438:	1a21      	subs	r1, r4, r0
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fe38 	bl	80080b0 <_sbrk_r>
 8007440:	3001      	adds	r0, #1
 8007442:	d1f2      	bne.n	800742a <sbrk_aligned+0x22>
 8007444:	e7ef      	b.n	8007426 <sbrk_aligned+0x1e>
 8007446:	bf00      	nop
 8007448:	200005dc 	.word	0x200005dc

0800744c <_malloc_r>:
 800744c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007450:	1ccd      	adds	r5, r1, #3
 8007452:	f025 0503 	bic.w	r5, r5, #3
 8007456:	3508      	adds	r5, #8
 8007458:	2d0c      	cmp	r5, #12
 800745a:	bf38      	it	cc
 800745c:	250c      	movcc	r5, #12
 800745e:	2d00      	cmp	r5, #0
 8007460:	4606      	mov	r6, r0
 8007462:	db01      	blt.n	8007468 <_malloc_r+0x1c>
 8007464:	42a9      	cmp	r1, r5
 8007466:	d904      	bls.n	8007472 <_malloc_r+0x26>
 8007468:	230c      	movs	r3, #12
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	2000      	movs	r0, #0
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007548 <_malloc_r+0xfc>
 8007476:	f000 f869 	bl	800754c <__malloc_lock>
 800747a:	f8d8 3000 	ldr.w	r3, [r8]
 800747e:	461c      	mov	r4, r3
 8007480:	bb44      	cbnz	r4, 80074d4 <_malloc_r+0x88>
 8007482:	4629      	mov	r1, r5
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff ffbf 	bl	8007408 <sbrk_aligned>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	4604      	mov	r4, r0
 800748e:	d158      	bne.n	8007542 <_malloc_r+0xf6>
 8007490:	f8d8 4000 	ldr.w	r4, [r8]
 8007494:	4627      	mov	r7, r4
 8007496:	2f00      	cmp	r7, #0
 8007498:	d143      	bne.n	8007522 <_malloc_r+0xd6>
 800749a:	2c00      	cmp	r4, #0
 800749c:	d04b      	beq.n	8007536 <_malloc_r+0xea>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4639      	mov	r1, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	eb04 0903 	add.w	r9, r4, r3
 80074a8:	f000 fe02 	bl	80080b0 <_sbrk_r>
 80074ac:	4581      	cmp	r9, r0
 80074ae:	d142      	bne.n	8007536 <_malloc_r+0xea>
 80074b0:	6821      	ldr	r1, [r4, #0]
 80074b2:	4630      	mov	r0, r6
 80074b4:	1a6d      	subs	r5, r5, r1
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7ff ffa6 	bl	8007408 <sbrk_aligned>
 80074bc:	3001      	adds	r0, #1
 80074be:	d03a      	beq.n	8007536 <_malloc_r+0xea>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	442b      	add	r3, r5
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	bb62      	cbnz	r2, 8007528 <_malloc_r+0xdc>
 80074ce:	f8c8 7000 	str.w	r7, [r8]
 80074d2:	e00f      	b.n	80074f4 <_malloc_r+0xa8>
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	1b52      	subs	r2, r2, r5
 80074d8:	d420      	bmi.n	800751c <_malloc_r+0xd0>
 80074da:	2a0b      	cmp	r2, #11
 80074dc:	d917      	bls.n	800750e <_malloc_r+0xc2>
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	6025      	str	r5, [r4, #0]
 80074e4:	bf18      	it	ne
 80074e6:	6059      	strne	r1, [r3, #4]
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	bf08      	it	eq
 80074ec:	f8c8 1000 	streq.w	r1, [r8]
 80074f0:	5162      	str	r2, [r4, r5]
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 f82f 	bl	8007558 <__malloc_unlock>
 80074fa:	f104 000b 	add.w	r0, r4, #11
 80074fe:	1d23      	adds	r3, r4, #4
 8007500:	f020 0007 	bic.w	r0, r0, #7
 8007504:	1ac2      	subs	r2, r0, r3
 8007506:	bf1c      	itt	ne
 8007508:	1a1b      	subne	r3, r3, r0
 800750a:	50a3      	strne	r3, [r4, r2]
 800750c:	e7af      	b.n	800746e <_malloc_r+0x22>
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	42a3      	cmp	r3, r4
 8007512:	bf0c      	ite	eq
 8007514:	f8c8 2000 	streq.w	r2, [r8]
 8007518:	605a      	strne	r2, [r3, #4]
 800751a:	e7eb      	b.n	80074f4 <_malloc_r+0xa8>
 800751c:	4623      	mov	r3, r4
 800751e:	6864      	ldr	r4, [r4, #4]
 8007520:	e7ae      	b.n	8007480 <_malloc_r+0x34>
 8007522:	463c      	mov	r4, r7
 8007524:	687f      	ldr	r7, [r7, #4]
 8007526:	e7b6      	b.n	8007496 <_malloc_r+0x4a>
 8007528:	461a      	mov	r2, r3
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	42a3      	cmp	r3, r4
 800752e:	d1fb      	bne.n	8007528 <_malloc_r+0xdc>
 8007530:	2300      	movs	r3, #0
 8007532:	6053      	str	r3, [r2, #4]
 8007534:	e7de      	b.n	80074f4 <_malloc_r+0xa8>
 8007536:	230c      	movs	r3, #12
 8007538:	4630      	mov	r0, r6
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	f000 f80c 	bl	8007558 <__malloc_unlock>
 8007540:	e794      	b.n	800746c <_malloc_r+0x20>
 8007542:	6005      	str	r5, [r0, #0]
 8007544:	e7d6      	b.n	80074f4 <_malloc_r+0xa8>
 8007546:	bf00      	nop
 8007548:	200005e0 	.word	0x200005e0

0800754c <__malloc_lock>:
 800754c:	4801      	ldr	r0, [pc, #4]	@ (8007554 <__malloc_lock+0x8>)
 800754e:	f7ff b872 	b.w	8006636 <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	200005d8 	.word	0x200005d8

08007558 <__malloc_unlock>:
 8007558:	4801      	ldr	r0, [pc, #4]	@ (8007560 <__malloc_unlock+0x8>)
 800755a:	f7ff b86d 	b.w	8006638 <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	200005d8 	.word	0x200005d8

08007564 <_Balloc>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	69c6      	ldr	r6, [r0, #28]
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	b976      	cbnz	r6, 800758c <_Balloc+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ff42 	bl	80073f8 <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	61e0      	str	r0, [r4, #28]
 8007578:	b920      	cbnz	r0, 8007584 <_Balloc+0x20>
 800757a:	216b      	movs	r1, #107	@ 0x6b
 800757c:	4b17      	ldr	r3, [pc, #92]	@ (80075dc <_Balloc+0x78>)
 800757e:	4818      	ldr	r0, [pc, #96]	@ (80075e0 <_Balloc+0x7c>)
 8007580:	f7ff f878 	bl	8006674 <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	69e6      	ldr	r6, [r4, #28]
 800758e:	68f3      	ldr	r3, [r6, #12]
 8007590:	b183      	cbz	r3, 80075b4 <_Balloc+0x50>
 8007592:	69e3      	ldr	r3, [r4, #28]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800759a:	b9b8      	cbnz	r0, 80075cc <_Balloc+0x68>
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f605 	lsl.w	r6, r1, r5
 80075a2:	1d72      	adds	r2, r6, #5
 80075a4:	4620      	mov	r0, r4
 80075a6:	0092      	lsls	r2, r2, #2
 80075a8:	f000 fd99 	bl	80080de <_calloc_r>
 80075ac:	b160      	cbz	r0, 80075c8 <_Balloc+0x64>
 80075ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075b2:	e00e      	b.n	80075d2 <_Balloc+0x6e>
 80075b4:	2221      	movs	r2, #33	@ 0x21
 80075b6:	2104      	movs	r1, #4
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fd90 	bl	80080de <_calloc_r>
 80075be:	69e3      	ldr	r3, [r4, #28]
 80075c0:	60f0      	str	r0, [r6, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <_Balloc+0x2e>
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075d2:	2300      	movs	r3, #0
 80075d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075d8:	e7f7      	b.n	80075ca <_Balloc+0x66>
 80075da:	bf00      	nop
 80075dc:	080099bc 	.word	0x080099bc
 80075e0:	08009a3c 	.word	0x08009a3c

080075e4 <_Bfree>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	69c6      	ldr	r6, [r0, #28]
 80075e8:	4605      	mov	r5, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b976      	cbnz	r6, 800760c <_Bfree+0x28>
 80075ee:	2010      	movs	r0, #16
 80075f0:	f7ff ff02 	bl	80073f8 <malloc>
 80075f4:	4602      	mov	r2, r0
 80075f6:	61e8      	str	r0, [r5, #28]
 80075f8:	b920      	cbnz	r0, 8007604 <_Bfree+0x20>
 80075fa:	218f      	movs	r1, #143	@ 0x8f
 80075fc:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <_Bfree+0x3c>)
 80075fe:	4809      	ldr	r0, [pc, #36]	@ (8007624 <_Bfree+0x40>)
 8007600:	f7ff f838 	bl	8006674 <__assert_func>
 8007604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007608:	6006      	str	r6, [r0, #0]
 800760a:	60c6      	str	r6, [r0, #12]
 800760c:	b13c      	cbz	r4, 800761e <_Bfree+0x3a>
 800760e:	69eb      	ldr	r3, [r5, #28]
 8007610:	6862      	ldr	r2, [r4, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007618:	6021      	str	r1, [r4, #0]
 800761a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	080099bc 	.word	0x080099bc
 8007624:	08009a3c 	.word	0x08009a3c

08007628 <__multadd>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	4607      	mov	r7, r0
 800762e:	460c      	mov	r4, r1
 8007630:	461e      	mov	r6, r3
 8007632:	2000      	movs	r0, #0
 8007634:	690d      	ldr	r5, [r1, #16]
 8007636:	f101 0c14 	add.w	ip, r1, #20
 800763a:	f8dc 3000 	ldr.w	r3, [ip]
 800763e:	3001      	adds	r0, #1
 8007640:	b299      	uxth	r1, r3
 8007642:	fb02 6101 	mla	r1, r2, r1, r6
 8007646:	0c1e      	lsrs	r6, r3, #16
 8007648:	0c0b      	lsrs	r3, r1, #16
 800764a:	fb02 3306 	mla	r3, r2, r6, r3
 800764e:	b289      	uxth	r1, r1
 8007650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007654:	4285      	cmp	r5, r0
 8007656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800765a:	f84c 1b04 	str.w	r1, [ip], #4
 800765e:	dcec      	bgt.n	800763a <__multadd+0x12>
 8007660:	b30e      	cbz	r6, 80076a6 <__multadd+0x7e>
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	42ab      	cmp	r3, r5
 8007666:	dc19      	bgt.n	800769c <__multadd+0x74>
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	4638      	mov	r0, r7
 800766c:	3101      	adds	r1, #1
 800766e:	f7ff ff79 	bl	8007564 <_Balloc>
 8007672:	4680      	mov	r8, r0
 8007674:	b928      	cbnz	r0, 8007682 <__multadd+0x5a>
 8007676:	4602      	mov	r2, r0
 8007678:	21ba      	movs	r1, #186	@ 0xba
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <__multadd+0x84>)
 800767c:	480c      	ldr	r0, [pc, #48]	@ (80076b0 <__multadd+0x88>)
 800767e:	f7fe fff9 	bl	8006674 <__assert_func>
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	f104 010c 	add.w	r1, r4, #12
 8007688:	3202      	adds	r2, #2
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	300c      	adds	r0, #12
 800768e:	f7fe ffe2 	bl	8006656 <memcpy>
 8007692:	4621      	mov	r1, r4
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff ffa5 	bl	80075e4 <_Bfree>
 800769a:	4644      	mov	r4, r8
 800769c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076a0:	3501      	adds	r5, #1
 80076a2:	615e      	str	r6, [r3, #20]
 80076a4:	6125      	str	r5, [r4, #16]
 80076a6:	4620      	mov	r0, r4
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	08009a2b 	.word	0x08009a2b
 80076b0:	08009a3c 	.word	0x08009a3c

080076b4 <__hi0bits>:
 80076b4:	4603      	mov	r3, r0
 80076b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076ba:	bf3a      	itte	cc
 80076bc:	0403      	lslcc	r3, r0, #16
 80076be:	2010      	movcc	r0, #16
 80076c0:	2000      	movcs	r0, #0
 80076c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076c6:	bf3c      	itt	cc
 80076c8:	021b      	lslcc	r3, r3, #8
 80076ca:	3008      	addcc	r0, #8
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	bf3c      	itt	cc
 80076d2:	011b      	lslcc	r3, r3, #4
 80076d4:	3004      	addcc	r0, #4
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076da:	bf3c      	itt	cc
 80076dc:	009b      	lslcc	r3, r3, #2
 80076de:	3002      	addcc	r0, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	db05      	blt.n	80076f0 <__hi0bits+0x3c>
 80076e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076e8:	f100 0001 	add.w	r0, r0, #1
 80076ec:	bf08      	it	eq
 80076ee:	2020      	moveq	r0, #32
 80076f0:	4770      	bx	lr

080076f2 <__lo0bits>:
 80076f2:	6803      	ldr	r3, [r0, #0]
 80076f4:	4602      	mov	r2, r0
 80076f6:	f013 0007 	ands.w	r0, r3, #7
 80076fa:	d00b      	beq.n	8007714 <__lo0bits+0x22>
 80076fc:	07d9      	lsls	r1, r3, #31
 80076fe:	d421      	bmi.n	8007744 <__lo0bits+0x52>
 8007700:	0798      	lsls	r0, r3, #30
 8007702:	bf49      	itett	mi
 8007704:	085b      	lsrmi	r3, r3, #1
 8007706:	089b      	lsrpl	r3, r3, #2
 8007708:	2001      	movmi	r0, #1
 800770a:	6013      	strmi	r3, [r2, #0]
 800770c:	bf5c      	itt	pl
 800770e:	2002      	movpl	r0, #2
 8007710:	6013      	strpl	r3, [r2, #0]
 8007712:	4770      	bx	lr
 8007714:	b299      	uxth	r1, r3
 8007716:	b909      	cbnz	r1, 800771c <__lo0bits+0x2a>
 8007718:	2010      	movs	r0, #16
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	b2d9      	uxtb	r1, r3
 800771e:	b909      	cbnz	r1, 8007724 <__lo0bits+0x32>
 8007720:	3008      	adds	r0, #8
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	0719      	lsls	r1, r3, #28
 8007726:	bf04      	itt	eq
 8007728:	091b      	lsreq	r3, r3, #4
 800772a:	3004      	addeq	r0, #4
 800772c:	0799      	lsls	r1, r3, #30
 800772e:	bf04      	itt	eq
 8007730:	089b      	lsreq	r3, r3, #2
 8007732:	3002      	addeq	r0, #2
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d403      	bmi.n	8007740 <__lo0bits+0x4e>
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	f100 0001 	add.w	r0, r0, #1
 800773e:	d003      	beq.n	8007748 <__lo0bits+0x56>
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4770      	bx	lr
 8007744:	2000      	movs	r0, #0
 8007746:	4770      	bx	lr
 8007748:	2020      	movs	r0, #32
 800774a:	4770      	bx	lr

0800774c <__i2b>:
 800774c:	b510      	push	{r4, lr}
 800774e:	460c      	mov	r4, r1
 8007750:	2101      	movs	r1, #1
 8007752:	f7ff ff07 	bl	8007564 <_Balloc>
 8007756:	4602      	mov	r2, r0
 8007758:	b928      	cbnz	r0, 8007766 <__i2b+0x1a>
 800775a:	f240 1145 	movw	r1, #325	@ 0x145
 800775e:	4b04      	ldr	r3, [pc, #16]	@ (8007770 <__i2b+0x24>)
 8007760:	4804      	ldr	r0, [pc, #16]	@ (8007774 <__i2b+0x28>)
 8007762:	f7fe ff87 	bl	8006674 <__assert_func>
 8007766:	2301      	movs	r3, #1
 8007768:	6144      	str	r4, [r0, #20]
 800776a:	6103      	str	r3, [r0, #16]
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	08009a2b 	.word	0x08009a2b
 8007774:	08009a3c 	.word	0x08009a3c

08007778 <__multiply>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	4617      	mov	r7, r2
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4689      	mov	r9, r1
 8007784:	429a      	cmp	r2, r3
 8007786:	bfa2      	ittt	ge
 8007788:	463b      	movge	r3, r7
 800778a:	460f      	movge	r7, r1
 800778c:	4699      	movge	r9, r3
 800778e:	693d      	ldr	r5, [r7, #16]
 8007790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	eb05 060a 	add.w	r6, r5, sl
 800779c:	42b3      	cmp	r3, r6
 800779e:	b085      	sub	sp, #20
 80077a0:	bfb8      	it	lt
 80077a2:	3101      	addlt	r1, #1
 80077a4:	f7ff fede 	bl	8007564 <_Balloc>
 80077a8:	b930      	cbnz	r0, 80077b8 <__multiply+0x40>
 80077aa:	4602      	mov	r2, r0
 80077ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077b0:	4b40      	ldr	r3, [pc, #256]	@ (80078b4 <__multiply+0x13c>)
 80077b2:	4841      	ldr	r0, [pc, #260]	@ (80078b8 <__multiply+0x140>)
 80077b4:	f7fe ff5e 	bl	8006674 <__assert_func>
 80077b8:	f100 0414 	add.w	r4, r0, #20
 80077bc:	4623      	mov	r3, r4
 80077be:	2200      	movs	r2, #0
 80077c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077c4:	4573      	cmp	r3, lr
 80077c6:	d320      	bcc.n	800780a <__multiply+0x92>
 80077c8:	f107 0814 	add.w	r8, r7, #20
 80077cc:	f109 0114 	add.w	r1, r9, #20
 80077d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80077d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80077d8:	9302      	str	r3, [sp, #8]
 80077da:	1beb      	subs	r3, r5, r7
 80077dc:	3b15      	subs	r3, #21
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	3304      	adds	r3, #4
 80077e4:	3715      	adds	r7, #21
 80077e6:	42bd      	cmp	r5, r7
 80077e8:	bf38      	it	cc
 80077ea:	2304      	movcc	r3, #4
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	9103      	str	r1, [sp, #12]
 80077f2:	428b      	cmp	r3, r1
 80077f4:	d80c      	bhi.n	8007810 <__multiply+0x98>
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	dd03      	ble.n	8007802 <__multiply+0x8a>
 80077fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d055      	beq.n	80078ae <__multiply+0x136>
 8007802:	6106      	str	r6, [r0, #16]
 8007804:	b005      	add	sp, #20
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	f843 2b04 	str.w	r2, [r3], #4
 800780e:	e7d9      	b.n	80077c4 <__multiply+0x4c>
 8007810:	f8b1 a000 	ldrh.w	sl, [r1]
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	d01f      	beq.n	800785a <__multiply+0xe2>
 800781a:	46c4      	mov	ip, r8
 800781c:	46a1      	mov	r9, r4
 800781e:	2700      	movs	r7, #0
 8007820:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007824:	f8d9 3000 	ldr.w	r3, [r9]
 8007828:	fa1f fb82 	uxth.w	fp, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007832:	443b      	add	r3, r7
 8007834:	f8d9 7000 	ldr.w	r7, [r9]
 8007838:	0c12      	lsrs	r2, r2, #16
 800783a:	0c3f      	lsrs	r7, r7, #16
 800783c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007840:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784a:	4565      	cmp	r5, ip
 800784c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007850:	f849 3b04 	str.w	r3, [r9], #4
 8007854:	d8e4      	bhi.n	8007820 <__multiply+0xa8>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	50e7      	str	r7, [r4, r3]
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	3104      	adds	r1, #4
 800785e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	d020      	beq.n	80078aa <__multiply+0x132>
 8007868:	4647      	mov	r7, r8
 800786a:	46a4      	mov	ip, r4
 800786c:	f04f 0a00 	mov.w	sl, #0
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f8b7 b000 	ldrh.w	fp, [r7]
 8007876:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800787a:	b29b      	uxth	r3, r3
 800787c:	fb09 220b 	mla	r2, r9, fp, r2
 8007880:	4452      	add	r2, sl
 8007882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007886:	f84c 3b04 	str.w	r3, [ip], #4
 800788a:	f857 3b04 	ldr.w	r3, [r7], #4
 800788e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007892:	f8bc 3000 	ldrh.w	r3, [ip]
 8007896:	42bd      	cmp	r5, r7
 8007898:	fb09 330a 	mla	r3, r9, sl, r3
 800789c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078a4:	d8e5      	bhi.n	8007872 <__multiply+0xfa>
 80078a6:	9a01      	ldr	r2, [sp, #4]
 80078a8:	50a3      	str	r3, [r4, r2]
 80078aa:	3404      	adds	r4, #4
 80078ac:	e79f      	b.n	80077ee <__multiply+0x76>
 80078ae:	3e01      	subs	r6, #1
 80078b0:	e7a1      	b.n	80077f6 <__multiply+0x7e>
 80078b2:	bf00      	nop
 80078b4:	08009a2b 	.word	0x08009a2b
 80078b8:	08009a3c 	.word	0x08009a3c

080078bc <__pow5mult>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	4615      	mov	r5, r2
 80078c2:	f012 0203 	ands.w	r2, r2, #3
 80078c6:	4607      	mov	r7, r0
 80078c8:	460e      	mov	r6, r1
 80078ca:	d007      	beq.n	80078dc <__pow5mult+0x20>
 80078cc:	4c25      	ldr	r4, [pc, #148]	@ (8007964 <__pow5mult+0xa8>)
 80078ce:	3a01      	subs	r2, #1
 80078d0:	2300      	movs	r3, #0
 80078d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078d6:	f7ff fea7 	bl	8007628 <__multadd>
 80078da:	4606      	mov	r6, r0
 80078dc:	10ad      	asrs	r5, r5, #2
 80078de:	d03d      	beq.n	800795c <__pow5mult+0xa0>
 80078e0:	69fc      	ldr	r4, [r7, #28]
 80078e2:	b97c      	cbnz	r4, 8007904 <__pow5mult+0x48>
 80078e4:	2010      	movs	r0, #16
 80078e6:	f7ff fd87 	bl	80073f8 <malloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	61f8      	str	r0, [r7, #28]
 80078ee:	b928      	cbnz	r0, 80078fc <__pow5mult+0x40>
 80078f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007968 <__pow5mult+0xac>)
 80078f6:	481d      	ldr	r0, [pc, #116]	@ (800796c <__pow5mult+0xb0>)
 80078f8:	f7fe febc 	bl	8006674 <__assert_func>
 80078fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007900:	6004      	str	r4, [r0, #0]
 8007902:	60c4      	str	r4, [r0, #12]
 8007904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800790c:	b94c      	cbnz	r4, 8007922 <__pow5mult+0x66>
 800790e:	f240 2171 	movw	r1, #625	@ 0x271
 8007912:	4638      	mov	r0, r7
 8007914:	f7ff ff1a 	bl	800774c <__i2b>
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	07eb      	lsls	r3, r5, #31
 8007928:	d50a      	bpl.n	8007940 <__pow5mult+0x84>
 800792a:	4631      	mov	r1, r6
 800792c:	4622      	mov	r2, r4
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ff22 	bl	8007778 <__multiply>
 8007934:	4680      	mov	r8, r0
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fe53 	bl	80075e4 <_Bfree>
 800793e:	4646      	mov	r6, r8
 8007940:	106d      	asrs	r5, r5, #1
 8007942:	d00b      	beq.n	800795c <__pow5mult+0xa0>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	b938      	cbnz	r0, 8007958 <__pow5mult+0x9c>
 8007948:	4622      	mov	r2, r4
 800794a:	4621      	mov	r1, r4
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff ff13 	bl	8007778 <__multiply>
 8007952:	6020      	str	r0, [r4, #0]
 8007954:	f8c0 9000 	str.w	r9, [r0]
 8007958:	4604      	mov	r4, r0
 800795a:	e7e4      	b.n	8007926 <__pow5mult+0x6a>
 800795c:	4630      	mov	r0, r6
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	bf00      	nop
 8007964:	08009ab0 	.word	0x08009ab0
 8007968:	080099bc 	.word	0x080099bc
 800796c:	08009a3c 	.word	0x08009a3c

08007970 <__lshift>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	460c      	mov	r4, r1
 8007976:	4607      	mov	r7, r0
 8007978:	4691      	mov	r9, r2
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	6849      	ldr	r1, [r1, #4]
 800797e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007988:	f108 0601 	add.w	r6, r8, #1
 800798c:	42b3      	cmp	r3, r6
 800798e:	db0b      	blt.n	80079a8 <__lshift+0x38>
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff fde7 	bl	8007564 <_Balloc>
 8007996:	4605      	mov	r5, r0
 8007998:	b948      	cbnz	r0, 80079ae <__lshift+0x3e>
 800799a:	4602      	mov	r2, r0
 800799c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079a0:	4b27      	ldr	r3, [pc, #156]	@ (8007a40 <__lshift+0xd0>)
 80079a2:	4828      	ldr	r0, [pc, #160]	@ (8007a44 <__lshift+0xd4>)
 80079a4:	f7fe fe66 	bl	8006674 <__assert_func>
 80079a8:	3101      	adds	r1, #1
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	e7ee      	b.n	800798c <__lshift+0x1c>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f100 0114 	add.w	r1, r0, #20
 80079b4:	f100 0210 	add.w	r2, r0, #16
 80079b8:	4618      	mov	r0, r3
 80079ba:	4553      	cmp	r3, sl
 80079bc:	db33      	blt.n	8007a26 <__lshift+0xb6>
 80079be:	6920      	ldr	r0, [r4, #16]
 80079c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079c4:	f104 0314 	add.w	r3, r4, #20
 80079c8:	f019 091f 	ands.w	r9, r9, #31
 80079cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079d4:	d02b      	beq.n	8007a2e <__lshift+0xbe>
 80079d6:	468a      	mov	sl, r1
 80079d8:	2200      	movs	r2, #0
 80079da:	f1c9 0e20 	rsb	lr, r9, #32
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	fa00 f009 	lsl.w	r0, r0, r9
 80079e4:	4310      	orrs	r0, r2
 80079e6:	f84a 0b04 	str.w	r0, [sl], #4
 80079ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ee:	459c      	cmp	ip, r3
 80079f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079f4:	d8f3      	bhi.n	80079de <__lshift+0x6e>
 80079f6:	ebac 0304 	sub.w	r3, ip, r4
 80079fa:	3b15      	subs	r3, #21
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	3304      	adds	r3, #4
 8007a02:	f104 0015 	add.w	r0, r4, #21
 8007a06:	4560      	cmp	r0, ip
 8007a08:	bf88      	it	hi
 8007a0a:	2304      	movhi	r3, #4
 8007a0c:	50ca      	str	r2, [r1, r3]
 8007a0e:	b10a      	cbz	r2, 8007a14 <__lshift+0xa4>
 8007a10:	f108 0602 	add.w	r6, r8, #2
 8007a14:	3e01      	subs	r6, #1
 8007a16:	4638      	mov	r0, r7
 8007a18:	4621      	mov	r1, r4
 8007a1a:	612e      	str	r6, [r5, #16]
 8007a1c:	f7ff fde2 	bl	80075e4 <_Bfree>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	e7c5      	b.n	80079ba <__lshift+0x4a>
 8007a2e:	3904      	subs	r1, #4
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	459c      	cmp	ip, r3
 8007a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a3a:	d8f9      	bhi.n	8007a30 <__lshift+0xc0>
 8007a3c:	e7ea      	b.n	8007a14 <__lshift+0xa4>
 8007a3e:	bf00      	nop
 8007a40:	08009a2b 	.word	0x08009a2b
 8007a44:	08009a3c 	.word	0x08009a3c

08007a48 <__mcmp>:
 8007a48:	4603      	mov	r3, r0
 8007a4a:	690a      	ldr	r2, [r1, #16]
 8007a4c:	6900      	ldr	r0, [r0, #16]
 8007a4e:	b530      	push	{r4, r5, lr}
 8007a50:	1a80      	subs	r0, r0, r2
 8007a52:	d10e      	bne.n	8007a72 <__mcmp+0x2a>
 8007a54:	3314      	adds	r3, #20
 8007a56:	3114      	adds	r1, #20
 8007a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a68:	4295      	cmp	r5, r2
 8007a6a:	d003      	beq.n	8007a74 <__mcmp+0x2c>
 8007a6c:	d205      	bcs.n	8007a7a <__mcmp+0x32>
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d3f3      	bcc.n	8007a60 <__mcmp+0x18>
 8007a78:	e7fb      	b.n	8007a72 <__mcmp+0x2a>
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7f9      	b.n	8007a72 <__mcmp+0x2a>
	...

08007a80 <__mdiff>:
 8007a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4689      	mov	r9, r1
 8007a86:	4606      	mov	r6, r0
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	f7ff ffdb 	bl	8007a48 <__mcmp>
 8007a92:	1e05      	subs	r5, r0, #0
 8007a94:	d112      	bne.n	8007abc <__mdiff+0x3c>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fd63 	bl	8007564 <_Balloc>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	b928      	cbnz	r0, 8007aae <__mdiff+0x2e>
 8007aa2:	f240 2137 	movw	r1, #567	@ 0x237
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba0 <__mdiff+0x120>)
 8007aa8:	483e      	ldr	r0, [pc, #248]	@ (8007ba4 <__mdiff+0x124>)
 8007aaa:	f7fe fde3 	bl	8006674 <__assert_func>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	b003      	add	sp, #12
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	bfbc      	itt	lt
 8007abe:	464b      	movlt	r3, r9
 8007ac0:	46a1      	movlt	r9, r4
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ac8:	bfba      	itte	lt
 8007aca:	461c      	movlt	r4, r3
 8007acc:	2501      	movlt	r5, #1
 8007ace:	2500      	movge	r5, #0
 8007ad0:	f7ff fd48 	bl	8007564 <_Balloc>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	b918      	cbnz	r0, 8007ae0 <__mdiff+0x60>
 8007ad8:	f240 2145 	movw	r1, #581	@ 0x245
 8007adc:	4b30      	ldr	r3, [pc, #192]	@ (8007ba0 <__mdiff+0x120>)
 8007ade:	e7e3      	b.n	8007aa8 <__mdiff+0x28>
 8007ae0:	f100 0b14 	add.w	fp, r0, #20
 8007ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ae8:	f109 0310 	add.w	r3, r9, #16
 8007aec:	60c5      	str	r5, [r0, #12]
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	f109 0514 	add.w	r5, r9, #20
 8007af6:	46d9      	mov	r9, fp
 8007af8:	6926      	ldr	r6, [r4, #16]
 8007afa:	f104 0e14 	add.w	lr, r4, #20
 8007afe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b12:	b281      	uxth	r1, r0
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	fa1f f38a 	uxth.w	r3, sl
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	0c00      	lsrs	r0, r0, #16
 8007b1e:	4463      	add	r3, ip
 8007b20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b2e:	4576      	cmp	r6, lr
 8007b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b34:	f849 3b04 	str.w	r3, [r9], #4
 8007b38:	d8e6      	bhi.n	8007b08 <__mdiff+0x88>
 8007b3a:	1b33      	subs	r3, r6, r4
 8007b3c:	3b15      	subs	r3, #21
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	3415      	adds	r4, #21
 8007b44:	3304      	adds	r3, #4
 8007b46:	42a6      	cmp	r6, r4
 8007b48:	bf38      	it	cc
 8007b4a:	2304      	movcc	r3, #4
 8007b4c:	441d      	add	r5, r3
 8007b4e:	445b      	add	r3, fp
 8007b50:	461e      	mov	r6, r3
 8007b52:	462c      	mov	r4, r5
 8007b54:	4544      	cmp	r4, r8
 8007b56:	d30e      	bcc.n	8007b76 <__mdiff+0xf6>
 8007b58:	f108 0103 	add.w	r1, r8, #3
 8007b5c:	1b49      	subs	r1, r1, r5
 8007b5e:	f021 0103 	bic.w	r1, r1, #3
 8007b62:	3d03      	subs	r5, #3
 8007b64:	45a8      	cmp	r8, r5
 8007b66:	bf38      	it	cc
 8007b68:	2100      	movcc	r1, #0
 8007b6a:	440b      	add	r3, r1
 8007b6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b70:	b199      	cbz	r1, 8007b9a <__mdiff+0x11a>
 8007b72:	6117      	str	r7, [r2, #16]
 8007b74:	e79e      	b.n	8007ab4 <__mdiff+0x34>
 8007b76:	46e6      	mov	lr, ip
 8007b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b7c:	fa1f fc81 	uxth.w	ip, r1
 8007b80:	44f4      	add	ip, lr
 8007b82:	0c08      	lsrs	r0, r1, #16
 8007b84:	4471      	add	r1, lr
 8007b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b8a:	b289      	uxth	r1, r1
 8007b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b94:	f846 1b04 	str.w	r1, [r6], #4
 8007b98:	e7dc      	b.n	8007b54 <__mdiff+0xd4>
 8007b9a:	3f01      	subs	r7, #1
 8007b9c:	e7e6      	b.n	8007b6c <__mdiff+0xec>
 8007b9e:	bf00      	nop
 8007ba0:	08009a2b 	.word	0x08009a2b
 8007ba4:	08009a3c 	.word	0x08009a3c

08007ba8 <__d2b>:
 8007ba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007bac:	2101      	movs	r1, #1
 8007bae:	4690      	mov	r8, r2
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	9e08      	ldr	r6, [sp, #32]
 8007bb4:	f7ff fcd6 	bl	8007564 <_Balloc>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	b930      	cbnz	r0, 8007bca <__d2b+0x22>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bc2:	4b23      	ldr	r3, [pc, #140]	@ (8007c50 <__d2b+0xa8>)
 8007bc4:	4823      	ldr	r0, [pc, #140]	@ (8007c54 <__d2b+0xac>)
 8007bc6:	f7fe fd55 	bl	8006674 <__assert_func>
 8007bca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bd2:	b10d      	cbz	r5, 8007bd8 <__d2b+0x30>
 8007bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	f1b8 0300 	subs.w	r3, r8, #0
 8007bde:	d024      	beq.n	8007c2a <__d2b+0x82>
 8007be0:	4668      	mov	r0, sp
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	f7ff fd85 	bl	80076f2 <__lo0bits>
 8007be8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bec:	b1d8      	cbz	r0, 8007c26 <__d2b+0x7e>
 8007bee:	f1c0 0320 	rsb	r3, r0, #32
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	40c2      	lsrs	r2, r0
 8007bfa:	6163      	str	r3, [r4, #20]
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf0c      	ite	eq
 8007c04:	2201      	moveq	r2, #1
 8007c06:	2202      	movne	r2, #2
 8007c08:	61a3      	str	r3, [r4, #24]
 8007c0a:	6122      	str	r2, [r4, #16]
 8007c0c:	b1ad      	cbz	r5, 8007c3a <__d2b+0x92>
 8007c0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c12:	4405      	add	r5, r0
 8007c14:	6035      	str	r5, [r6, #0]
 8007c16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1c:	6018      	str	r0, [r3, #0]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	b002      	add	sp, #8
 8007c22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007c26:	6161      	str	r1, [r4, #20]
 8007c28:	e7e9      	b.n	8007bfe <__d2b+0x56>
 8007c2a:	a801      	add	r0, sp, #4
 8007c2c:	f7ff fd61 	bl	80076f2 <__lo0bits>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	6163      	str	r3, [r4, #20]
 8007c36:	3020      	adds	r0, #32
 8007c38:	e7e7      	b.n	8007c0a <__d2b+0x62>
 8007c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c42:	6030      	str	r0, [r6, #0]
 8007c44:	6918      	ldr	r0, [r3, #16]
 8007c46:	f7ff fd35 	bl	80076b4 <__hi0bits>
 8007c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c4e:	e7e4      	b.n	8007c1a <__d2b+0x72>
 8007c50:	08009a2b 	.word	0x08009a2b
 8007c54:	08009a3c 	.word	0x08009a3c

08007c58 <__ssputs_r>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	461f      	mov	r7, r3
 8007c5e:	688e      	ldr	r6, [r1, #8]
 8007c60:	4682      	mov	sl, r0
 8007c62:	42be      	cmp	r6, r7
 8007c64:	460c      	mov	r4, r1
 8007c66:	4690      	mov	r8, r2
 8007c68:	680b      	ldr	r3, [r1, #0]
 8007c6a:	d82d      	bhi.n	8007cc8 <__ssputs_r+0x70>
 8007c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c74:	d026      	beq.n	8007cc4 <__ssputs_r+0x6c>
 8007c76:	6965      	ldr	r5, [r4, #20]
 8007c78:	6909      	ldr	r1, [r1, #16]
 8007c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c7e:	eba3 0901 	sub.w	r9, r3, r1
 8007c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c86:	1c7b      	adds	r3, r7, #1
 8007c88:	444b      	add	r3, r9
 8007c8a:	106d      	asrs	r5, r5, #1
 8007c8c:	429d      	cmp	r5, r3
 8007c8e:	bf38      	it	cc
 8007c90:	461d      	movcc	r5, r3
 8007c92:	0553      	lsls	r3, r2, #21
 8007c94:	d527      	bpl.n	8007ce6 <__ssputs_r+0x8e>
 8007c96:	4629      	mov	r1, r5
 8007c98:	f7ff fbd8 	bl	800744c <_malloc_r>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	b360      	cbz	r0, 8007cfa <__ssputs_r+0xa2>
 8007ca0:	464a      	mov	r2, r9
 8007ca2:	6921      	ldr	r1, [r4, #16]
 8007ca4:	f7fe fcd7 	bl	8006656 <memcpy>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	6126      	str	r6, [r4, #16]
 8007cb6:	444e      	add	r6, r9
 8007cb8:	6026      	str	r6, [r4, #0]
 8007cba:	463e      	mov	r6, r7
 8007cbc:	6165      	str	r5, [r4, #20]
 8007cbe:	eba5 0509 	sub.w	r5, r5, r9
 8007cc2:	60a5      	str	r5, [r4, #8]
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	d900      	bls.n	8007cca <__ssputs_r+0x72>
 8007cc8:	463e      	mov	r6, r7
 8007cca:	4632      	mov	r2, r6
 8007ccc:	4641      	mov	r1, r8
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	f000 f9d4 	bl	800807c <memmove>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	60a3      	str	r3, [r4, #8]
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	4433      	add	r3, r6
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	f000 fa1f 	bl	800812a <_realloc_r>
 8007cec:	4606      	mov	r6, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1e0      	bne.n	8007cb4 <__ssputs_r+0x5c>
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	6921      	ldr	r1, [r4, #16]
 8007cf6:	f7ff fb37 	bl	8007368 <_free_r>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	f8ca 3000 	str.w	r3, [sl]
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	e7e9      	b.n	8007ce2 <__ssputs_r+0x8a>
	...

08007d10 <_svfiprintf_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4698      	mov	r8, r3
 8007d16:	898b      	ldrh	r3, [r1, #12]
 8007d18:	4607      	mov	r7, r0
 8007d1a:	061b      	lsls	r3, r3, #24
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	4614      	mov	r4, r2
 8007d20:	b09d      	sub	sp, #116	@ 0x74
 8007d22:	d510      	bpl.n	8007d46 <_svfiprintf_r+0x36>
 8007d24:	690b      	ldr	r3, [r1, #16]
 8007d26:	b973      	cbnz	r3, 8007d46 <_svfiprintf_r+0x36>
 8007d28:	2140      	movs	r1, #64	@ 0x40
 8007d2a:	f7ff fb8f 	bl	800744c <_malloc_r>
 8007d2e:	6028      	str	r0, [r5, #0]
 8007d30:	6128      	str	r0, [r5, #16]
 8007d32:	b930      	cbnz	r0, 8007d42 <_svfiprintf_r+0x32>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b01d      	add	sp, #116	@ 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	2340      	movs	r3, #64	@ 0x40
 8007d44:	616b      	str	r3, [r5, #20]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d50:	2330      	movs	r3, #48	@ 0x30
 8007d52:	f04f 0901 	mov.w	r9, #1
 8007d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ef4 <_svfiprintf_r+0x1e4>
 8007d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d62:	4623      	mov	r3, r4
 8007d64:	469a      	mov	sl, r3
 8007d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6a:	b10a      	cbz	r2, 8007d70 <_svfiprintf_r+0x60>
 8007d6c:	2a25      	cmp	r2, #37	@ 0x25
 8007d6e:	d1f9      	bne.n	8007d64 <_svfiprintf_r+0x54>
 8007d70:	ebba 0b04 	subs.w	fp, sl, r4
 8007d74:	d00b      	beq.n	8007d8e <_svfiprintf_r+0x7e>
 8007d76:	465b      	mov	r3, fp
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff6b 	bl	8007c58 <__ssputs_r>
 8007d82:	3001      	adds	r0, #1
 8007d84:	f000 80a7 	beq.w	8007ed6 <_svfiprintf_r+0x1c6>
 8007d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d8a:	445a      	add	r2, fp
 8007d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 809f 	beq.w	8007ed6 <_svfiprintf_r+0x1c6>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da2:	f10a 0a01 	add.w	sl, sl, #1
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007db0:	4654      	mov	r4, sl
 8007db2:	2205      	movs	r2, #5
 8007db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db8:	484e      	ldr	r0, [pc, #312]	@ (8007ef4 <_svfiprintf_r+0x1e4>)
 8007dba:	f7fe fc3e 	bl	800663a <memchr>
 8007dbe:	9a04      	ldr	r2, [sp, #16]
 8007dc0:	b9d8      	cbnz	r0, 8007dfa <_svfiprintf_r+0xea>
 8007dc2:	06d0      	lsls	r0, r2, #27
 8007dc4:	bf44      	itt	mi
 8007dc6:	2320      	movmi	r3, #32
 8007dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dcc:	0711      	lsls	r1, r2, #28
 8007dce:	bf44      	itt	mi
 8007dd0:	232b      	movmi	r3, #43	@ 0x2b
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ddc:	d015      	beq.n	8007e0a <_svfiprintf_r+0xfa>
 8007dde:	4654      	mov	r4, sl
 8007de0:	2000      	movs	r0, #0
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	9a07      	ldr	r2, [sp, #28]
 8007de8:	4621      	mov	r1, r4
 8007dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dee:	3b30      	subs	r3, #48	@ 0x30
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	d94b      	bls.n	8007e8c <_svfiprintf_r+0x17c>
 8007df4:	b1b0      	cbz	r0, 8007e24 <_svfiprintf_r+0x114>
 8007df6:	9207      	str	r2, [sp, #28]
 8007df8:	e014      	b.n	8007e24 <_svfiprintf_r+0x114>
 8007dfa:	eba0 0308 	sub.w	r3, r0, r8
 8007dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	46a2      	mov	sl, r4
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	e7d2      	b.n	8007db0 <_svfiprintf_r+0xa0>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d19      	adds	r1, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9103      	str	r1, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfbb      	ittet	lt
 8007e16:	425b      	neglt	r3, r3
 8007e18:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1c:	9307      	strge	r3, [sp, #28]
 8007e1e:	9307      	strlt	r3, [sp, #28]
 8007e20:	bfb8      	it	lt
 8007e22:	9204      	strlt	r2, [sp, #16]
 8007e24:	7823      	ldrb	r3, [r4, #0]
 8007e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e28:	d10a      	bne.n	8007e40 <_svfiprintf_r+0x130>
 8007e2a:	7863      	ldrb	r3, [r4, #1]
 8007e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2e:	d132      	bne.n	8007e96 <_svfiprintf_r+0x186>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	3402      	adds	r4, #2
 8007e34:	1d1a      	adds	r2, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9203      	str	r2, [sp, #12]
 8007e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e3e:	9305      	str	r3, [sp, #20]
 8007e40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ef8 <_svfiprintf_r+0x1e8>
 8007e44:	2203      	movs	r2, #3
 8007e46:	4650      	mov	r0, sl
 8007e48:	7821      	ldrb	r1, [r4, #0]
 8007e4a:	f7fe fbf6 	bl	800663a <memchr>
 8007e4e:	b138      	cbz	r0, 8007e60 <_svfiprintf_r+0x150>
 8007e50:	2240      	movs	r2, #64	@ 0x40
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	eba0 000a 	sub.w	r0, r0, sl
 8007e58:	4082      	lsls	r2, r0
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e64:	2206      	movs	r2, #6
 8007e66:	4825      	ldr	r0, [pc, #148]	@ (8007efc <_svfiprintf_r+0x1ec>)
 8007e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e6c:	f7fe fbe5 	bl	800663a <memchr>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d036      	beq.n	8007ee2 <_svfiprintf_r+0x1d2>
 8007e74:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <_svfiprintf_r+0x1f0>)
 8007e76:	bb1b      	cbnz	r3, 8007ec0 <_svfiprintf_r+0x1b0>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	3307      	adds	r3, #7
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	3308      	adds	r3, #8
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e86:	4433      	add	r3, r6
 8007e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8a:	e76a      	b.n	8007d62 <_svfiprintf_r+0x52>
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	2001      	movs	r0, #1
 8007e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e94:	e7a8      	b.n	8007de8 <_svfiprintf_r+0xd8>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea8:	3a30      	subs	r2, #48	@ 0x30
 8007eaa:	2a09      	cmp	r2, #9
 8007eac:	d903      	bls.n	8007eb6 <_svfiprintf_r+0x1a6>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0c6      	beq.n	8007e40 <_svfiprintf_r+0x130>
 8007eb2:	9105      	str	r1, [sp, #20]
 8007eb4:	e7c4      	b.n	8007e40 <_svfiprintf_r+0x130>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	2301      	movs	r3, #1
 8007eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebe:	e7f0      	b.n	8007ea2 <_svfiprintf_r+0x192>
 8007ec0:	ab03      	add	r3, sp, #12
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <_svfiprintf_r+0x1f4>)
 8007eca:	a904      	add	r1, sp, #16
 8007ecc:	f7fd fe42 	bl	8005b54 <_printf_float>
 8007ed0:	1c42      	adds	r2, r0, #1
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	d1d6      	bne.n	8007e84 <_svfiprintf_r+0x174>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	065b      	lsls	r3, r3, #25
 8007eda:	f53f af2d 	bmi.w	8007d38 <_svfiprintf_r+0x28>
 8007ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ee0:	e72c      	b.n	8007d3c <_svfiprintf_r+0x2c>
 8007ee2:	ab03      	add	r3, sp, #12
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	4638      	mov	r0, r7
 8007eea:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <_svfiprintf_r+0x1f4>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	f7fe f8cf 	bl	8006090 <_printf_i>
 8007ef2:	e7ed      	b.n	8007ed0 <_svfiprintf_r+0x1c0>
 8007ef4:	08009a95 	.word	0x08009a95
 8007ef8:	08009a9b 	.word	0x08009a9b
 8007efc:	08009a9f 	.word	0x08009a9f
 8007f00:	08005b55 	.word	0x08005b55
 8007f04:	08007c59 	.word	0x08007c59

08007f08 <__sflush_r>:
 8007f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	0716      	lsls	r6, r2, #28
 8007f10:	4605      	mov	r5, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	d454      	bmi.n	8007fc0 <__sflush_r+0xb8>
 8007f16:	684b      	ldr	r3, [r1, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc02      	bgt.n	8007f22 <__sflush_r+0x1a>
 8007f1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd48      	ble.n	8007fb4 <__sflush_r+0xac>
 8007f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f24:	2e00      	cmp	r6, #0
 8007f26:	d045      	beq.n	8007fb4 <__sflush_r+0xac>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f2e:	682f      	ldr	r7, [r5, #0]
 8007f30:	6a21      	ldr	r1, [r4, #32]
 8007f32:	602b      	str	r3, [r5, #0]
 8007f34:	d030      	beq.n	8007f98 <__sflush_r+0x90>
 8007f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	0759      	lsls	r1, r3, #29
 8007f3c:	d505      	bpl.n	8007f4a <__sflush_r+0x42>
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	1ad2      	subs	r2, r2, r3
 8007f42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f44:	b10b      	cbz	r3, 8007f4a <__sflush_r+0x42>
 8007f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f48:	1ad2      	subs	r2, r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	47b0      	blx	r6
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	d106      	bne.n	8007f68 <__sflush_r+0x60>
 8007f5a:	6829      	ldr	r1, [r5, #0]
 8007f5c:	291d      	cmp	r1, #29
 8007f5e:	d82b      	bhi.n	8007fb8 <__sflush_r+0xb0>
 8007f60:	4a28      	ldr	r2, [pc, #160]	@ (8008004 <__sflush_r+0xfc>)
 8007f62:	40ca      	lsrs	r2, r1
 8007f64:	07d6      	lsls	r6, r2, #31
 8007f66:	d527      	bpl.n	8007fb8 <__sflush_r+0xb0>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	6062      	str	r2, [r4, #4]
 8007f6c:	6922      	ldr	r2, [r4, #16]
 8007f6e:	04d9      	lsls	r1, r3, #19
 8007f70:	6022      	str	r2, [r4, #0]
 8007f72:	d504      	bpl.n	8007f7e <__sflush_r+0x76>
 8007f74:	1c42      	adds	r2, r0, #1
 8007f76:	d101      	bne.n	8007f7c <__sflush_r+0x74>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b903      	cbnz	r3, 8007f7e <__sflush_r+0x76>
 8007f7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f80:	602f      	str	r7, [r5, #0]
 8007f82:	b1b9      	cbz	r1, 8007fb4 <__sflush_r+0xac>
 8007f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d002      	beq.n	8007f92 <__sflush_r+0x8a>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f7ff f9eb 	bl	8007368 <_free_r>
 8007f92:	2300      	movs	r3, #0
 8007f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f96:	e00d      	b.n	8007fb4 <__sflush_r+0xac>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b0      	blx	r6
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	1c50      	adds	r0, r2, #1
 8007fa2:	d1c9      	bne.n	8007f38 <__sflush_r+0x30>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0c6      	beq.n	8007f38 <__sflush_r+0x30>
 8007faa:	2b1d      	cmp	r3, #29
 8007fac:	d001      	beq.n	8007fb2 <__sflush_r+0xaa>
 8007fae:	2b16      	cmp	r3, #22
 8007fb0:	d11d      	bne.n	8007fee <__sflush_r+0xe6>
 8007fb2:	602f      	str	r7, [r5, #0]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e021      	b.n	8007ffc <__sflush_r+0xf4>
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	e01a      	b.n	8007ff6 <__sflush_r+0xee>
 8007fc0:	690f      	ldr	r7, [r1, #16]
 8007fc2:	2f00      	cmp	r7, #0
 8007fc4:	d0f6      	beq.n	8007fb4 <__sflush_r+0xac>
 8007fc6:	0793      	lsls	r3, r2, #30
 8007fc8:	bf18      	it	ne
 8007fca:	2300      	movne	r3, #0
 8007fcc:	680e      	ldr	r6, [r1, #0]
 8007fce:	bf08      	it	eq
 8007fd0:	694b      	ldreq	r3, [r1, #20]
 8007fd2:	1bf6      	subs	r6, r6, r7
 8007fd4:	600f      	str	r7, [r1, #0]
 8007fd6:	608b      	str	r3, [r1, #8]
 8007fd8:	2e00      	cmp	r6, #0
 8007fda:	ddeb      	ble.n	8007fb4 <__sflush_r+0xac>
 8007fdc:	4633      	mov	r3, r6
 8007fde:	463a      	mov	r2, r7
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	6a21      	ldr	r1, [r4, #32]
 8007fe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007fe8:	47e0      	blx	ip
 8007fea:	2800      	cmp	r0, #0
 8007fec:	dc07      	bgt.n	8007ffe <__sflush_r+0xf6>
 8007fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffe:	4407      	add	r7, r0
 8008000:	1a36      	subs	r6, r6, r0
 8008002:	e7e9      	b.n	8007fd8 <__sflush_r+0xd0>
 8008004:	20400001 	.word	0x20400001

08008008 <_fflush_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	690b      	ldr	r3, [r1, #16]
 800800c:	4605      	mov	r5, r0
 800800e:	460c      	mov	r4, r1
 8008010:	b913      	cbnz	r3, 8008018 <_fflush_r+0x10>
 8008012:	2500      	movs	r5, #0
 8008014:	4628      	mov	r0, r5
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	b118      	cbz	r0, 8008022 <_fflush_r+0x1a>
 800801a:	6a03      	ldr	r3, [r0, #32]
 800801c:	b90b      	cbnz	r3, 8008022 <_fflush_r+0x1a>
 800801e:	f7fe f9e1 	bl	80063e4 <__sinit>
 8008022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f3      	beq.n	8008012 <_fflush_r+0xa>
 800802a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800802c:	07d0      	lsls	r0, r2, #31
 800802e:	d404      	bmi.n	800803a <_fflush_r+0x32>
 8008030:	0599      	lsls	r1, r3, #22
 8008032:	d402      	bmi.n	800803a <_fflush_r+0x32>
 8008034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008036:	f7fe fafe 	bl	8006636 <__retarget_lock_acquire_recursive>
 800803a:	4628      	mov	r0, r5
 800803c:	4621      	mov	r1, r4
 800803e:	f7ff ff63 	bl	8007f08 <__sflush_r>
 8008042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008044:	4605      	mov	r5, r0
 8008046:	07da      	lsls	r2, r3, #31
 8008048:	d4e4      	bmi.n	8008014 <_fflush_r+0xc>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	059b      	lsls	r3, r3, #22
 800804e:	d4e1      	bmi.n	8008014 <_fflush_r+0xc>
 8008050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008052:	f7fe faf1 	bl	8006638 <__retarget_lock_release_recursive>
 8008056:	e7dd      	b.n	8008014 <_fflush_r+0xc>

08008058 <fiprintf>:
 8008058:	b40e      	push	{r1, r2, r3}
 800805a:	b503      	push	{r0, r1, lr}
 800805c:	4601      	mov	r1, r0
 800805e:	ab03      	add	r3, sp, #12
 8008060:	4805      	ldr	r0, [pc, #20]	@ (8008078 <fiprintf+0x20>)
 8008062:	f853 2b04 	ldr.w	r2, [r3], #4
 8008066:	6800      	ldr	r0, [r0, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f000 f8c1 	bl	80081f0 <_vfiprintf_r>
 800806e:	b002      	add	sp, #8
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	2000002c 	.word	0x2000002c

0800807c <memmove>:
 800807c:	4288      	cmp	r0, r1
 800807e:	b510      	push	{r4, lr}
 8008080:	eb01 0402 	add.w	r4, r1, r2
 8008084:	d902      	bls.n	800808c <memmove+0x10>
 8008086:	4284      	cmp	r4, r0
 8008088:	4623      	mov	r3, r4
 800808a:	d807      	bhi.n	800809c <memmove+0x20>
 800808c:	1e43      	subs	r3, r0, #1
 800808e:	42a1      	cmp	r1, r4
 8008090:	d008      	beq.n	80080a4 <memmove+0x28>
 8008092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800809a:	e7f8      	b.n	800808e <memmove+0x12>
 800809c:	4601      	mov	r1, r0
 800809e:	4402      	add	r2, r0
 80080a0:	428a      	cmp	r2, r1
 80080a2:	d100      	bne.n	80080a6 <memmove+0x2a>
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ae:	e7f7      	b.n	80080a0 <memmove+0x24>

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d05      	ldr	r5, [pc, #20]	@ (80080cc <_sbrk_r+0x1c>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7fb fd10 	bl	8003ae0 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	200005d4 	.word	0x200005d4

080080d0 <abort>:
 80080d0:	2006      	movs	r0, #6
 80080d2:	b508      	push	{r3, lr}
 80080d4:	f000 fa60 	bl	8008598 <raise>
 80080d8:	2001      	movs	r0, #1
 80080da:	f7fb fc8c 	bl	80039f6 <_exit>

080080de <_calloc_r>:
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	fba1 5402 	umull	r5, r4, r1, r2
 80080e4:	b934      	cbnz	r4, 80080f4 <_calloc_r+0x16>
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7ff f9b0 	bl	800744c <_malloc_r>
 80080ec:	4606      	mov	r6, r0
 80080ee:	b928      	cbnz	r0, 80080fc <_calloc_r+0x1e>
 80080f0:	4630      	mov	r0, r6
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	220c      	movs	r2, #12
 80080f6:	2600      	movs	r6, #0
 80080f8:	6002      	str	r2, [r0, #0]
 80080fa:	e7f9      	b.n	80080f0 <_calloc_r+0x12>
 80080fc:	462a      	mov	r2, r5
 80080fe:	4621      	mov	r1, r4
 8008100:	f7fe fa1b 	bl	800653a <memset>
 8008104:	e7f4      	b.n	80080f0 <_calloc_r+0x12>

08008106 <__ascii_mbtowc>:
 8008106:	b082      	sub	sp, #8
 8008108:	b901      	cbnz	r1, 800810c <__ascii_mbtowc+0x6>
 800810a:	a901      	add	r1, sp, #4
 800810c:	b142      	cbz	r2, 8008120 <__ascii_mbtowc+0x1a>
 800810e:	b14b      	cbz	r3, 8008124 <__ascii_mbtowc+0x1e>
 8008110:	7813      	ldrb	r3, [r2, #0]
 8008112:	600b      	str	r3, [r1, #0]
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	1e10      	subs	r0, r2, #0
 8008118:	bf18      	it	ne
 800811a:	2001      	movne	r0, #1
 800811c:	b002      	add	sp, #8
 800811e:	4770      	bx	lr
 8008120:	4610      	mov	r0, r2
 8008122:	e7fb      	b.n	800811c <__ascii_mbtowc+0x16>
 8008124:	f06f 0001 	mvn.w	r0, #1
 8008128:	e7f8      	b.n	800811c <__ascii_mbtowc+0x16>

0800812a <_realloc_r>:
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4607      	mov	r7, r0
 8008130:	4614      	mov	r4, r2
 8008132:	460d      	mov	r5, r1
 8008134:	b921      	cbnz	r1, 8008140 <_realloc_r+0x16>
 8008136:	4611      	mov	r1, r2
 8008138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	f7ff b986 	b.w	800744c <_malloc_r>
 8008140:	b92a      	cbnz	r2, 800814e <_realloc_r+0x24>
 8008142:	f7ff f911 	bl	8007368 <_free_r>
 8008146:	4625      	mov	r5, r4
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814e:	f000 fa3f 	bl	80085d0 <_malloc_usable_size_r>
 8008152:	4284      	cmp	r4, r0
 8008154:	4606      	mov	r6, r0
 8008156:	d802      	bhi.n	800815e <_realloc_r+0x34>
 8008158:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800815c:	d8f4      	bhi.n	8008148 <_realloc_r+0x1e>
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff f973 	bl	800744c <_malloc_r>
 8008166:	4680      	mov	r8, r0
 8008168:	b908      	cbnz	r0, 800816e <_realloc_r+0x44>
 800816a:	4645      	mov	r5, r8
 800816c:	e7ec      	b.n	8008148 <_realloc_r+0x1e>
 800816e:	42b4      	cmp	r4, r6
 8008170:	4622      	mov	r2, r4
 8008172:	4629      	mov	r1, r5
 8008174:	bf28      	it	cs
 8008176:	4632      	movcs	r2, r6
 8008178:	f7fe fa6d 	bl	8006656 <memcpy>
 800817c:	4629      	mov	r1, r5
 800817e:	4638      	mov	r0, r7
 8008180:	f7ff f8f2 	bl	8007368 <_free_r>
 8008184:	e7f1      	b.n	800816a <_realloc_r+0x40>

08008186 <__ascii_wctomb>:
 8008186:	4603      	mov	r3, r0
 8008188:	4608      	mov	r0, r1
 800818a:	b141      	cbz	r1, 800819e <__ascii_wctomb+0x18>
 800818c:	2aff      	cmp	r2, #255	@ 0xff
 800818e:	d904      	bls.n	800819a <__ascii_wctomb+0x14>
 8008190:	228a      	movs	r2, #138	@ 0x8a
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	4770      	bx	lr
 800819a:	2001      	movs	r0, #1
 800819c:	700a      	strb	r2, [r1, #0]
 800819e:	4770      	bx	lr

080081a0 <__sfputc_r>:
 80081a0:	6893      	ldr	r3, [r2, #8]
 80081a2:	b410      	push	{r4}
 80081a4:	3b01      	subs	r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	6093      	str	r3, [r2, #8]
 80081aa:	da07      	bge.n	80081bc <__sfputc_r+0x1c>
 80081ac:	6994      	ldr	r4, [r2, #24]
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	db01      	blt.n	80081b6 <__sfputc_r+0x16>
 80081b2:	290a      	cmp	r1, #10
 80081b4:	d102      	bne.n	80081bc <__sfputc_r+0x1c>
 80081b6:	bc10      	pop	{r4}
 80081b8:	f000 b932 	b.w	8008420 <__swbuf_r>
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	1c58      	adds	r0, r3, #1
 80081c0:	6010      	str	r0, [r2, #0]
 80081c2:	7019      	strb	r1, [r3, #0]
 80081c4:	4608      	mov	r0, r1
 80081c6:	bc10      	pop	{r4}
 80081c8:	4770      	bx	lr

080081ca <__sfputs_r>:
 80081ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	4614      	mov	r4, r2
 80081d2:	18d5      	adds	r5, r2, r3
 80081d4:	42ac      	cmp	r4, r5
 80081d6:	d101      	bne.n	80081dc <__sfputs_r+0x12>
 80081d8:	2000      	movs	r0, #0
 80081da:	e007      	b.n	80081ec <__sfputs_r+0x22>
 80081dc:	463a      	mov	r2, r7
 80081de:	4630      	mov	r0, r6
 80081e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e4:	f7ff ffdc 	bl	80081a0 <__sfputc_r>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d1f3      	bne.n	80081d4 <__sfputs_r+0xa>
 80081ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081f0 <_vfiprintf_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	460d      	mov	r5, r1
 80081f6:	4614      	mov	r4, r2
 80081f8:	4698      	mov	r8, r3
 80081fa:	4606      	mov	r6, r0
 80081fc:	b09d      	sub	sp, #116	@ 0x74
 80081fe:	b118      	cbz	r0, 8008208 <_vfiprintf_r+0x18>
 8008200:	6a03      	ldr	r3, [r0, #32]
 8008202:	b90b      	cbnz	r3, 8008208 <_vfiprintf_r+0x18>
 8008204:	f7fe f8ee 	bl	80063e4 <__sinit>
 8008208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x2a>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x2a>
 8008214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008216:	f7fe fa0e 	bl	8006636 <__retarget_lock_acquire_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	071b      	lsls	r3, r3, #28
 800821e:	d501      	bpl.n	8008224 <_vfiprintf_r+0x34>
 8008220:	692b      	ldr	r3, [r5, #16]
 8008222:	b99b      	cbnz	r3, 800824c <_vfiprintf_r+0x5c>
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f000 f938 	bl	800849c <__swsetup_r>
 800822c:	b170      	cbz	r0, 800824c <_vfiprintf_r+0x5c>
 800822e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008230:	07dc      	lsls	r4, r3, #31
 8008232:	d504      	bpl.n	800823e <_vfiprintf_r+0x4e>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	@ 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	0598      	lsls	r0, r3, #22
 8008242:	d4f7      	bmi.n	8008234 <_vfiprintf_r+0x44>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7fe f9f7 	bl	8006638 <__retarget_lock_release_recursive>
 800824a:	e7f3      	b.n	8008234 <_vfiprintf_r+0x44>
 800824c:	2300      	movs	r3, #0
 800824e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008250:	2320      	movs	r3, #32
 8008252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008256:	2330      	movs	r3, #48	@ 0x30
 8008258:	f04f 0901 	mov.w	r9, #1
 800825c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008260:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800840c <_vfiprintf_r+0x21c>
 8008264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008268:	4623      	mov	r3, r4
 800826a:	469a      	mov	sl, r3
 800826c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008270:	b10a      	cbz	r2, 8008276 <_vfiprintf_r+0x86>
 8008272:	2a25      	cmp	r2, #37	@ 0x25
 8008274:	d1f9      	bne.n	800826a <_vfiprintf_r+0x7a>
 8008276:	ebba 0b04 	subs.w	fp, sl, r4
 800827a:	d00b      	beq.n	8008294 <_vfiprintf_r+0xa4>
 800827c:	465b      	mov	r3, fp
 800827e:	4622      	mov	r2, r4
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa1 	bl	80081ca <__sfputs_r>
 8008288:	3001      	adds	r0, #1
 800828a:	f000 80a7 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800828e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008290:	445a      	add	r2, fp
 8008292:	9209      	str	r2, [sp, #36]	@ 0x24
 8008294:	f89a 3000 	ldrb.w	r3, [sl]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 809f 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800829e:	2300      	movs	r3, #0
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295
 80082a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a8:	f10a 0a01 	add.w	sl, sl, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b6:	4654      	mov	r4, sl
 80082b8:	2205      	movs	r2, #5
 80082ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082be:	4853      	ldr	r0, [pc, #332]	@ (800840c <_vfiprintf_r+0x21c>)
 80082c0:	f7fe f9bb 	bl	800663a <memchr>
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	b9d8      	cbnz	r0, 8008300 <_vfiprintf_r+0x110>
 80082c8:	06d1      	lsls	r1, r2, #27
 80082ca:	bf44      	itt	mi
 80082cc:	2320      	movmi	r3, #32
 80082ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d2:	0713      	lsls	r3, r2, #28
 80082d4:	bf44      	itt	mi
 80082d6:	232b      	movmi	r3, #43	@ 0x2b
 80082d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d015      	beq.n	8008310 <_vfiprintf_r+0x120>
 80082e4:	4654      	mov	r4, sl
 80082e6:	2000      	movs	r0, #0
 80082e8:	f04f 0c0a 	mov.w	ip, #10
 80082ec:	9a07      	ldr	r2, [sp, #28]
 80082ee:	4621      	mov	r1, r4
 80082f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f4:	3b30      	subs	r3, #48	@ 0x30
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d94b      	bls.n	8008392 <_vfiprintf_r+0x1a2>
 80082fa:	b1b0      	cbz	r0, 800832a <_vfiprintf_r+0x13a>
 80082fc:	9207      	str	r2, [sp, #28]
 80082fe:	e014      	b.n	800832a <_vfiprintf_r+0x13a>
 8008300:	eba0 0308 	sub.w	r3, r0, r8
 8008304:	fa09 f303 	lsl.w	r3, r9, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	46a2      	mov	sl, r4
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	e7d2      	b.n	80082b6 <_vfiprintf_r+0xc6>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	1d19      	adds	r1, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfbb      	ittet	lt
 800831c:	425b      	neglt	r3, r3
 800831e:	f042 0202 	orrlt.w	r2, r2, #2
 8008322:	9307      	strge	r3, [sp, #28]
 8008324:	9307      	strlt	r3, [sp, #28]
 8008326:	bfb8      	it	lt
 8008328:	9204      	strlt	r2, [sp, #16]
 800832a:	7823      	ldrb	r3, [r4, #0]
 800832c:	2b2e      	cmp	r3, #46	@ 0x2e
 800832e:	d10a      	bne.n	8008346 <_vfiprintf_r+0x156>
 8008330:	7863      	ldrb	r3, [r4, #1]
 8008332:	2b2a      	cmp	r3, #42	@ 0x2a
 8008334:	d132      	bne.n	800839c <_vfiprintf_r+0x1ac>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	3402      	adds	r4, #2
 800833a:	1d1a      	adds	r2, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	9203      	str	r2, [sp, #12]
 8008340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008410 <_vfiprintf_r+0x220>
 800834a:	2203      	movs	r2, #3
 800834c:	4650      	mov	r0, sl
 800834e:	7821      	ldrb	r1, [r4, #0]
 8008350:	f7fe f973 	bl	800663a <memchr>
 8008354:	b138      	cbz	r0, 8008366 <_vfiprintf_r+0x176>
 8008356:	2240      	movs	r2, #64	@ 0x40
 8008358:	9b04      	ldr	r3, [sp, #16]
 800835a:	eba0 000a 	sub.w	r0, r0, sl
 800835e:	4082      	lsls	r2, r0
 8008360:	4313      	orrs	r3, r2
 8008362:	3401      	adds	r4, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	2206      	movs	r2, #6
 800836c:	4829      	ldr	r0, [pc, #164]	@ (8008414 <_vfiprintf_r+0x224>)
 800836e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008372:	f7fe f962 	bl	800663a <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d03f      	beq.n	80083fa <_vfiprintf_r+0x20a>
 800837a:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <_vfiprintf_r+0x228>)
 800837c:	bb1b      	cbnz	r3, 80083c6 <_vfiprintf_r+0x1d6>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838c:	443b      	add	r3, r7
 800838e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008390:	e76a      	b.n	8008268 <_vfiprintf_r+0x78>
 8008392:	460c      	mov	r4, r1
 8008394:	2001      	movs	r0, #1
 8008396:	fb0c 3202 	mla	r2, ip, r2, r3
 800839a:	e7a8      	b.n	80082ee <_vfiprintf_r+0xfe>
 800839c:	2300      	movs	r3, #0
 800839e:	f04f 0c0a 	mov.w	ip, #10
 80083a2:	4619      	mov	r1, r3
 80083a4:	3401      	adds	r4, #1
 80083a6:	9305      	str	r3, [sp, #20]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ae:	3a30      	subs	r2, #48	@ 0x30
 80083b0:	2a09      	cmp	r2, #9
 80083b2:	d903      	bls.n	80083bc <_vfiprintf_r+0x1cc>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c6      	beq.n	8008346 <_vfiprintf_r+0x156>
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	e7c4      	b.n	8008346 <_vfiprintf_r+0x156>
 80083bc:	4604      	mov	r4, r0
 80083be:	2301      	movs	r3, #1
 80083c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c4:	e7f0      	b.n	80083a8 <_vfiprintf_r+0x1b8>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4630      	mov	r0, r6
 80083ce:	4b13      	ldr	r3, [pc, #76]	@ (800841c <_vfiprintf_r+0x22c>)
 80083d0:	a904      	add	r1, sp, #16
 80083d2:	f7fd fbbf 	bl	8005b54 <_printf_float>
 80083d6:	4607      	mov	r7, r0
 80083d8:	1c78      	adds	r0, r7, #1
 80083da:	d1d6      	bne.n	800838a <_vfiprintf_r+0x19a>
 80083dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d405      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7fe f925 	bl	8006638 <__retarget_lock_release_recursive>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	065b      	lsls	r3, r3, #25
 80083f2:	f53f af1f 	bmi.w	8008234 <_vfiprintf_r+0x44>
 80083f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f8:	e71e      	b.n	8008238 <_vfiprintf_r+0x48>
 80083fa:	ab03      	add	r3, sp, #12
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	462a      	mov	r2, r5
 8008400:	4630      	mov	r0, r6
 8008402:	4b06      	ldr	r3, [pc, #24]	@ (800841c <_vfiprintf_r+0x22c>)
 8008404:	a904      	add	r1, sp, #16
 8008406:	f7fd fe43 	bl	8006090 <_printf_i>
 800840a:	e7e4      	b.n	80083d6 <_vfiprintf_r+0x1e6>
 800840c:	08009a95 	.word	0x08009a95
 8008410:	08009a9b 	.word	0x08009a9b
 8008414:	08009a9f 	.word	0x08009a9f
 8008418:	08005b55 	.word	0x08005b55
 800841c:	080081cb 	.word	0x080081cb

08008420 <__swbuf_r>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	460e      	mov	r6, r1
 8008424:	4614      	mov	r4, r2
 8008426:	4605      	mov	r5, r0
 8008428:	b118      	cbz	r0, 8008432 <__swbuf_r+0x12>
 800842a:	6a03      	ldr	r3, [r0, #32]
 800842c:	b90b      	cbnz	r3, 8008432 <__swbuf_r+0x12>
 800842e:	f7fd ffd9 	bl	80063e4 <__sinit>
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	d501      	bpl.n	8008440 <__swbuf_r+0x20>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	b943      	cbnz	r3, 8008452 <__swbuf_r+0x32>
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f82a 	bl	800849c <__swsetup_r>
 8008448:	b118      	cbz	r0, 8008452 <__swbuf_r+0x32>
 800844a:	f04f 37ff 	mov.w	r7, #4294967295
 800844e:	4638      	mov	r0, r7
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	b2f6      	uxtb	r6, r6
 8008458:	1a98      	subs	r0, r3, r2
 800845a:	6963      	ldr	r3, [r4, #20]
 800845c:	4637      	mov	r7, r6
 800845e:	4283      	cmp	r3, r0
 8008460:	dc05      	bgt.n	800846e <__swbuf_r+0x4e>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff fdcf 	bl	8008008 <_fflush_r>
 800846a:	2800      	cmp	r0, #0
 800846c:	d1ed      	bne.n	800844a <__swbuf_r+0x2a>
 800846e:	68a3      	ldr	r3, [r4, #8]
 8008470:	3b01      	subs	r3, #1
 8008472:	60a3      	str	r3, [r4, #8]
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	6022      	str	r2, [r4, #0]
 800847a:	701e      	strb	r6, [r3, #0]
 800847c:	6962      	ldr	r2, [r4, #20]
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	429a      	cmp	r2, r3
 8008482:	d004      	beq.n	800848e <__swbuf_r+0x6e>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	07db      	lsls	r3, r3, #31
 8008488:	d5e1      	bpl.n	800844e <__swbuf_r+0x2e>
 800848a:	2e0a      	cmp	r6, #10
 800848c:	d1df      	bne.n	800844e <__swbuf_r+0x2e>
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fdb9 	bl	8008008 <_fflush_r>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0d9      	beq.n	800844e <__swbuf_r+0x2e>
 800849a:	e7d6      	b.n	800844a <__swbuf_r+0x2a>

0800849c <__swsetup_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4b29      	ldr	r3, [pc, #164]	@ (8008544 <__swsetup_r+0xa8>)
 80084a0:	4605      	mov	r5, r0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	460c      	mov	r4, r1
 80084a6:	b118      	cbz	r0, 80084b0 <__swsetup_r+0x14>
 80084a8:	6a03      	ldr	r3, [r0, #32]
 80084aa:	b90b      	cbnz	r3, 80084b0 <__swsetup_r+0x14>
 80084ac:	f7fd ff9a 	bl	80063e4 <__sinit>
 80084b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b4:	0719      	lsls	r1, r3, #28
 80084b6:	d422      	bmi.n	80084fe <__swsetup_r+0x62>
 80084b8:	06da      	lsls	r2, r3, #27
 80084ba:	d407      	bmi.n	80084cc <__swsetup_r+0x30>
 80084bc:	2209      	movs	r2, #9
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	e033      	b.n	8008534 <__swsetup_r+0x98>
 80084cc:	0758      	lsls	r0, r3, #29
 80084ce:	d512      	bpl.n	80084f6 <__swsetup_r+0x5a>
 80084d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d2:	b141      	cbz	r1, 80084e6 <__swsetup_r+0x4a>
 80084d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d8:	4299      	cmp	r1, r3
 80084da:	d002      	beq.n	80084e2 <__swsetup_r+0x46>
 80084dc:	4628      	mov	r0, r5
 80084de:	f7fe ff43 	bl	8007368 <_free_r>
 80084e2:	2300      	movs	r3, #0
 80084e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	2300      	movs	r3, #0
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f043 0308 	orr.w	r3, r3, #8
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	b94b      	cbnz	r3, 8008516 <__swsetup_r+0x7a>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850c:	d003      	beq.n	8008516 <__swsetup_r+0x7a>
 800850e:	4621      	mov	r1, r4
 8008510:	4628      	mov	r0, r5
 8008512:	f000 f88a 	bl	800862a <__smakebuf_r>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	f013 0201 	ands.w	r2, r3, #1
 800851e:	d00a      	beq.n	8008536 <__swsetup_r+0x9a>
 8008520:	2200      	movs	r2, #0
 8008522:	60a2      	str	r2, [r4, #8]
 8008524:	6962      	ldr	r2, [r4, #20]
 8008526:	4252      	negs	r2, r2
 8008528:	61a2      	str	r2, [r4, #24]
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	b942      	cbnz	r2, 8008540 <__swsetup_r+0xa4>
 800852e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008532:	d1c5      	bne.n	80084c0 <__swsetup_r+0x24>
 8008534:	bd38      	pop	{r3, r4, r5, pc}
 8008536:	0799      	lsls	r1, r3, #30
 8008538:	bf58      	it	pl
 800853a:	6962      	ldrpl	r2, [r4, #20]
 800853c:	60a2      	str	r2, [r4, #8]
 800853e:	e7f4      	b.n	800852a <__swsetup_r+0x8e>
 8008540:	2000      	movs	r0, #0
 8008542:	e7f7      	b.n	8008534 <__swsetup_r+0x98>
 8008544:	2000002c 	.word	0x2000002c

08008548 <_raise_r>:
 8008548:	291f      	cmp	r1, #31
 800854a:	b538      	push	{r3, r4, r5, lr}
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	d904      	bls.n	800855c <_raise_r+0x14>
 8008552:	2316      	movs	r3, #22
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800855e:	b112      	cbz	r2, 8008566 <_raise_r+0x1e>
 8008560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008564:	b94b      	cbnz	r3, 800857a <_raise_r+0x32>
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f830 	bl	80085cc <_getpid_r>
 800856c:	4622      	mov	r2, r4
 800856e:	4601      	mov	r1, r0
 8008570:	4628      	mov	r0, r5
 8008572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008576:	f000 b817 	b.w	80085a8 <_kill_r>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d00a      	beq.n	8008594 <_raise_r+0x4c>
 800857e:	1c59      	adds	r1, r3, #1
 8008580:	d103      	bne.n	800858a <_raise_r+0x42>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2001      	movs	r0, #1
 8008588:	e7e7      	b.n	800855a <_raise_r+0x12>
 800858a:	2100      	movs	r1, #0
 800858c:	4620      	mov	r0, r4
 800858e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008592:	4798      	blx	r3
 8008594:	2000      	movs	r0, #0
 8008596:	e7e0      	b.n	800855a <_raise_r+0x12>

08008598 <raise>:
 8008598:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <raise+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f7ff bfd3 	b.w	8008548 <_raise_r>
 80085a2:	bf00      	nop
 80085a4:	2000002c 	.word	0x2000002c

080085a8 <_kill_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	2300      	movs	r3, #0
 80085ac:	4d06      	ldr	r5, [pc, #24]	@ (80085c8 <_kill_r+0x20>)
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	f7fb fa0e 	bl	80039d6 <_kill>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d102      	bne.n	80085c4 <_kill_r+0x1c>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	b103      	cbz	r3, 80085c4 <_kill_r+0x1c>
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	200005d4 	.word	0x200005d4

080085cc <_getpid_r>:
 80085cc:	f7fb b9fc 	b.w	80039c8 <_getpid>

080085d0 <_malloc_usable_size_r>:
 80085d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d4:	1f18      	subs	r0, r3, #4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfbc      	itt	lt
 80085da:	580b      	ldrlt	r3, [r1, r0]
 80085dc:	18c0      	addlt	r0, r0, r3
 80085de:	4770      	bx	lr

080085e0 <__swhatbuf_r>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	460c      	mov	r4, r1
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	4615      	mov	r5, r2
 80085ea:	2900      	cmp	r1, #0
 80085ec:	461e      	mov	r6, r3
 80085ee:	b096      	sub	sp, #88	@ 0x58
 80085f0:	da0c      	bge.n	800860c <__swhatbuf_r+0x2c>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	2100      	movs	r1, #0
 80085f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085fa:	bf14      	ite	ne
 80085fc:	2340      	movne	r3, #64	@ 0x40
 80085fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008602:	2000      	movs	r0, #0
 8008604:	6031      	str	r1, [r6, #0]
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	b016      	add	sp, #88	@ 0x58
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	466a      	mov	r2, sp
 800860e:	f000 f849 	bl	80086a4 <_fstat_r>
 8008612:	2800      	cmp	r0, #0
 8008614:	dbed      	blt.n	80085f2 <__swhatbuf_r+0x12>
 8008616:	9901      	ldr	r1, [sp, #4]
 8008618:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800861c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008620:	4259      	negs	r1, r3
 8008622:	4159      	adcs	r1, r3
 8008624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008628:	e7eb      	b.n	8008602 <__swhatbuf_r+0x22>

0800862a <__smakebuf_r>:
 800862a:	898b      	ldrh	r3, [r1, #12]
 800862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862e:	079d      	lsls	r5, r3, #30
 8008630:	4606      	mov	r6, r0
 8008632:	460c      	mov	r4, r1
 8008634:	d507      	bpl.n	8008646 <__smakebuf_r+0x1c>
 8008636:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	2301      	movs	r3, #1
 8008640:	6163      	str	r3, [r4, #20]
 8008642:	b003      	add	sp, #12
 8008644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008646:	466a      	mov	r2, sp
 8008648:	ab01      	add	r3, sp, #4
 800864a:	f7ff ffc9 	bl	80085e0 <__swhatbuf_r>
 800864e:	9f00      	ldr	r7, [sp, #0]
 8008650:	4605      	mov	r5, r0
 8008652:	4639      	mov	r1, r7
 8008654:	4630      	mov	r0, r6
 8008656:	f7fe fef9 	bl	800744c <_malloc_r>
 800865a:	b948      	cbnz	r0, 8008670 <__smakebuf_r+0x46>
 800865c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008660:	059a      	lsls	r2, r3, #22
 8008662:	d4ee      	bmi.n	8008642 <__smakebuf_r+0x18>
 8008664:	f023 0303 	bic.w	r3, r3, #3
 8008668:	f043 0302 	orr.w	r3, r3, #2
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	e7e2      	b.n	8008636 <__smakebuf_r+0xc>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	6020      	str	r0, [r4, #0]
 8008680:	b15b      	cbz	r3, 800869a <__smakebuf_r+0x70>
 8008682:	4630      	mov	r0, r6
 8008684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008688:	f000 f81e 	bl	80086c8 <_isatty_r>
 800868c:	b128      	cbz	r0, 800869a <__smakebuf_r+0x70>
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	f023 0303 	bic.w	r3, r3, #3
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	431d      	orrs	r5, r3
 800869e:	81a5      	strh	r5, [r4, #12]
 80086a0:	e7cf      	b.n	8008642 <__smakebuf_r+0x18>
	...

080086a4 <_fstat_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	2300      	movs	r3, #0
 80086a8:	4d06      	ldr	r5, [pc, #24]	@ (80086c4 <_fstat_r+0x20>)
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	f7fb f9ef 	bl	8003a94 <_fstat>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d102      	bne.n	80086c0 <_fstat_r+0x1c>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	b103      	cbz	r3, 80086c0 <_fstat_r+0x1c>
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	200005d4 	.word	0x200005d4

080086c8 <_isatty_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	2300      	movs	r3, #0
 80086cc:	4d05      	ldr	r5, [pc, #20]	@ (80086e4 <_isatty_r+0x1c>)
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7fb f9ed 	bl	8003ab2 <_isatty>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_isatty_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_isatty_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	200005d4 	.word	0x200005d4

080086e8 <pow>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	4614      	mov	r4, r2
 80086ee:	461d      	mov	r5, r3
 80086f0:	4680      	mov	r8, r0
 80086f2:	4689      	mov	r9, r1
 80086f4:	f000 f8ac 	bl	8008850 <__ieee754_pow>
 80086f8:	4622      	mov	r2, r4
 80086fa:	4606      	mov	r6, r0
 80086fc:	460f      	mov	r7, r1
 80086fe:	462b      	mov	r3, r5
 8008700:	4620      	mov	r0, r4
 8008702:	4629      	mov	r1, r5
 8008704:	f7f8 f982 	bl	8000a0c <__aeabi_dcmpun>
 8008708:	bbc8      	cbnz	r0, 800877e <pow+0x96>
 800870a:	2200      	movs	r2, #0
 800870c:	2300      	movs	r3, #0
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f8 f949 	bl	80009a8 <__aeabi_dcmpeq>
 8008716:	b1b8      	cbz	r0, 8008748 <pow+0x60>
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f8 f942 	bl	80009a8 <__aeabi_dcmpeq>
 8008724:	2800      	cmp	r0, #0
 8008726:	d141      	bne.n	80087ac <pow+0xc4>
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f000 f844 	bl	80087b8 <finite>
 8008730:	b328      	cbz	r0, 800877e <pow+0x96>
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f93f 	bl	80009bc <__aeabi_dcmplt>
 800873e:	b1f0      	cbz	r0, 800877e <pow+0x96>
 8008740:	f7fd ff4e 	bl	80065e0 <__errno>
 8008744:	2322      	movs	r3, #34	@ 0x22
 8008746:	e019      	b.n	800877c <pow+0x94>
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f000 f834 	bl	80087b8 <finite>
 8008750:	b9c8      	cbnz	r0, 8008786 <pow+0x9e>
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f000 f82f 	bl	80087b8 <finite>
 800875a:	b1a0      	cbz	r0, 8008786 <pow+0x9e>
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f000 f82a 	bl	80087b8 <finite>
 8008764:	b178      	cbz	r0, 8008786 <pow+0x9e>
 8008766:	4632      	mov	r2, r6
 8008768:	463b      	mov	r3, r7
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	f7f8 f94d 	bl	8000a0c <__aeabi_dcmpun>
 8008772:	2800      	cmp	r0, #0
 8008774:	d0e4      	beq.n	8008740 <pow+0x58>
 8008776:	f7fd ff33 	bl	80065e0 <__errno>
 800877a:	2321      	movs	r3, #33	@ 0x21
 800877c:	6003      	str	r3, [r0, #0]
 800877e:	4630      	mov	r0, r6
 8008780:	4639      	mov	r1, r7
 8008782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f8 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8008792:	2800      	cmp	r0, #0
 8008794:	d0f3      	beq.n	800877e <pow+0x96>
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f000 f80d 	bl	80087b8 <finite>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d0ed      	beq.n	800877e <pow+0x96>
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f000 f807 	bl	80087b8 <finite>
 80087aa:	e7c8      	b.n	800873e <pow+0x56>
 80087ac:	2600      	movs	r6, #0
 80087ae:	4f01      	ldr	r7, [pc, #4]	@ (80087b4 <pow+0xcc>)
 80087b0:	e7e5      	b.n	800877e <pow+0x96>
 80087b2:	bf00      	nop
 80087b4:	3ff00000 	.word	0x3ff00000

080087b8 <finite>:
 80087b8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80087bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80087c0:	0fc0      	lsrs	r0, r0, #31
 80087c2:	4770      	bx	lr

080087c4 <round>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80087ca:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80087ce:	2a13      	cmp	r2, #19
 80087d0:	4604      	mov	r4, r0
 80087d2:	460d      	mov	r5, r1
 80087d4:	460b      	mov	r3, r1
 80087d6:	dc1a      	bgt.n	800880e <round+0x4a>
 80087d8:	2a00      	cmp	r2, #0
 80087da:	da0b      	bge.n	80087f4 <round+0x30>
 80087dc:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80087e0:	3201      	adds	r2, #1
 80087e2:	bf04      	itt	eq
 80087e4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80087e8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80087ec:	2200      	movs	r2, #0
 80087ee:	461d      	mov	r5, r3
 80087f0:	4614      	mov	r4, r2
 80087f2:	e016      	b.n	8008822 <round+0x5e>
 80087f4:	4815      	ldr	r0, [pc, #84]	@ (800884c <round+0x88>)
 80087f6:	4110      	asrs	r0, r2
 80087f8:	4001      	ands	r1, r0
 80087fa:	4321      	orrs	r1, r4
 80087fc:	d011      	beq.n	8008822 <round+0x5e>
 80087fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008802:	fa41 f202 	asr.w	r2, r1, r2
 8008806:	4413      	add	r3, r2
 8008808:	ea23 0300 	bic.w	r3, r3, r0
 800880c:	e7ee      	b.n	80087ec <round+0x28>
 800880e:	2a33      	cmp	r2, #51	@ 0x33
 8008810:	dd0a      	ble.n	8008828 <round+0x64>
 8008812:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008816:	d104      	bne.n	8008822 <round+0x5e>
 8008818:	4602      	mov	r2, r0
 800881a:	f7f7 fca7 	bl	800016c <__adddf3>
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008830:	40f8      	lsrs	r0, r7
 8008832:	4220      	tst	r0, r4
 8008834:	d0f5      	beq.n	8008822 <round+0x5e>
 8008836:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800883a:	2201      	movs	r2, #1
 800883c:	408a      	lsls	r2, r1
 800883e:	1912      	adds	r2, r2, r4
 8008840:	bf28      	it	cs
 8008842:	3301      	addcs	r3, #1
 8008844:	ea22 0200 	bic.w	r2, r2, r0
 8008848:	e7d1      	b.n	80087ee <round+0x2a>
 800884a:	bf00      	nop
 800884c:	000fffff 	.word	0x000fffff

08008850 <__ieee754_pow>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	b091      	sub	sp, #68	@ 0x44
 8008856:	e9cd 2300 	strd	r2, r3, [sp]
 800885a:	468b      	mov	fp, r1
 800885c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008860:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8008864:	4682      	mov	sl, r0
 8008866:	ea57 0001 	orrs.w	r0, r7, r1
 800886a:	d112      	bne.n	8008892 <__ieee754_pow+0x42>
 800886c:	4653      	mov	r3, sl
 800886e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8008872:	18db      	adds	r3, r3, r3
 8008874:	4152      	adcs	r2, r2
 8008876:	4298      	cmp	r0, r3
 8008878:	4b93      	ldr	r3, [pc, #588]	@ (8008ac8 <__ieee754_pow+0x278>)
 800887a:	4193      	sbcs	r3, r2
 800887c:	f080 84cd 	bcs.w	800921a <__ieee754_pow+0x9ca>
 8008880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008884:	4650      	mov	r0, sl
 8008886:	4659      	mov	r1, fp
 8008888:	f7f7 fc70 	bl	800016c <__adddf3>
 800888c:	b011      	add	sp, #68	@ 0x44
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	4b8e      	ldr	r3, [pc, #568]	@ (8008acc <__ieee754_pow+0x27c>)
 8008894:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8008898:	429d      	cmp	r5, r3
 800889a:	465e      	mov	r6, fp
 800889c:	46d1      	mov	r9, sl
 800889e:	d80b      	bhi.n	80088b8 <__ieee754_pow+0x68>
 80088a0:	d105      	bne.n	80088ae <__ieee754_pow+0x5e>
 80088a2:	f1ba 0f00 	cmp.w	sl, #0
 80088a6:	d1eb      	bne.n	8008880 <__ieee754_pow+0x30>
 80088a8:	42af      	cmp	r7, r5
 80088aa:	d8e9      	bhi.n	8008880 <__ieee754_pow+0x30>
 80088ac:	e001      	b.n	80088b2 <__ieee754_pow+0x62>
 80088ae:	429f      	cmp	r7, r3
 80088b0:	d802      	bhi.n	80088b8 <__ieee754_pow+0x68>
 80088b2:	429f      	cmp	r7, r3
 80088b4:	d10f      	bne.n	80088d6 <__ieee754_pow+0x86>
 80088b6:	b171      	cbz	r1, 80088d6 <__ieee754_pow+0x86>
 80088b8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80088bc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80088c0:	ea56 0609 	orrs.w	r6, r6, r9
 80088c4:	d1dc      	bne.n	8008880 <__ieee754_pow+0x30>
 80088c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088ca:	18db      	adds	r3, r3, r3
 80088cc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80088d0:	4152      	adcs	r2, r2
 80088d2:	429e      	cmp	r6, r3
 80088d4:	e7d0      	b.n	8008878 <__ieee754_pow+0x28>
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	462b      	mov	r3, r5
 80088da:	da42      	bge.n	8008962 <__ieee754_pow+0x112>
 80088dc:	4a7c      	ldr	r2, [pc, #496]	@ (8008ad0 <__ieee754_pow+0x280>)
 80088de:	4297      	cmp	r7, r2
 80088e0:	d856      	bhi.n	8008990 <__ieee754_pow+0x140>
 80088e2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80088e6:	4297      	cmp	r7, r2
 80088e8:	f240 84a6 	bls.w	8009238 <__ieee754_pow+0x9e8>
 80088ec:	153a      	asrs	r2, r7, #20
 80088ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80088f2:	2a14      	cmp	r2, #20
 80088f4:	dd18      	ble.n	8008928 <__ieee754_pow+0xd8>
 80088f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80088fa:	fa21 f402 	lsr.w	r4, r1, r2
 80088fe:	fa04 f202 	lsl.w	r2, r4, r2
 8008902:	428a      	cmp	r2, r1
 8008904:	f040 8498 	bne.w	8009238 <__ieee754_pow+0x9e8>
 8008908:	f004 0401 	and.w	r4, r4, #1
 800890c:	f1c4 0402 	rsb	r4, r4, #2
 8008910:	2900      	cmp	r1, #0
 8008912:	d159      	bne.n	80089c8 <__ieee754_pow+0x178>
 8008914:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8008918:	d149      	bne.n	80089ae <__ieee754_pow+0x15e>
 800891a:	4652      	mov	r2, sl
 800891c:	465b      	mov	r3, fp
 800891e:	4650      	mov	r0, sl
 8008920:	4659      	mov	r1, fp
 8008922:	f7f7 fdd9 	bl	80004d8 <__aeabi_dmul>
 8008926:	e7b1      	b.n	800888c <__ieee754_pow+0x3c>
 8008928:	2900      	cmp	r1, #0
 800892a:	d14c      	bne.n	80089c6 <__ieee754_pow+0x176>
 800892c:	f1c2 0214 	rsb	r2, r2, #20
 8008930:	fa47 f402 	asr.w	r4, r7, r2
 8008934:	fa04 f202 	lsl.w	r2, r4, r2
 8008938:	42ba      	cmp	r2, r7
 800893a:	f040 847a 	bne.w	8009232 <__ieee754_pow+0x9e2>
 800893e:	f004 0401 	and.w	r4, r4, #1
 8008942:	f1c4 0402 	rsb	r4, r4, #2
 8008946:	4a63      	ldr	r2, [pc, #396]	@ (8008ad4 <__ieee754_pow+0x284>)
 8008948:	4297      	cmp	r7, r2
 800894a:	d1e3      	bne.n	8008914 <__ieee754_pow+0xc4>
 800894c:	f1b8 0f00 	cmp.w	r8, #0
 8008950:	f280 846b 	bge.w	800922a <__ieee754_pow+0x9da>
 8008954:	4652      	mov	r2, sl
 8008956:	465b      	mov	r3, fp
 8008958:	2000      	movs	r0, #0
 800895a:	495e      	ldr	r1, [pc, #376]	@ (8008ad4 <__ieee754_pow+0x284>)
 800895c:	f7f7 fee6 	bl	800072c <__aeabi_ddiv>
 8008960:	e794      	b.n	800888c <__ieee754_pow+0x3c>
 8008962:	2400      	movs	r4, #0
 8008964:	bb81      	cbnz	r1, 80089c8 <__ieee754_pow+0x178>
 8008966:	4a59      	ldr	r2, [pc, #356]	@ (8008acc <__ieee754_pow+0x27c>)
 8008968:	4297      	cmp	r7, r2
 800896a:	d1ec      	bne.n	8008946 <__ieee754_pow+0xf6>
 800896c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8008970:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008974:	ea53 0309 	orrs.w	r3, r3, r9
 8008978:	f000 844f 	beq.w	800921a <__ieee754_pow+0x9ca>
 800897c:	4b56      	ldr	r3, [pc, #344]	@ (8008ad8 <__ieee754_pow+0x288>)
 800897e:	429d      	cmp	r5, r3
 8008980:	d908      	bls.n	8008994 <__ieee754_pow+0x144>
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	f280 844c 	bge.w	8009222 <__ieee754_pow+0x9d2>
 800898a:	2000      	movs	r0, #0
 800898c:	2100      	movs	r1, #0
 800898e:	e77d      	b.n	800888c <__ieee754_pow+0x3c>
 8008990:	2402      	movs	r4, #2
 8008992:	e7e7      	b.n	8008964 <__ieee754_pow+0x114>
 8008994:	f1b8 0f00 	cmp.w	r8, #0
 8008998:	f04f 0000 	mov.w	r0, #0
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	f6bf af74 	bge.w	800888c <__ieee754_pow+0x3c>
 80089a4:	e9dd 0300 	ldrd	r0, r3, [sp]
 80089a8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80089ac:	e76e      	b.n	800888c <__ieee754_pow+0x3c>
 80089ae:	4a4b      	ldr	r2, [pc, #300]	@ (8008adc <__ieee754_pow+0x28c>)
 80089b0:	4590      	cmp	r8, r2
 80089b2:	d109      	bne.n	80089c8 <__ieee754_pow+0x178>
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	db07      	blt.n	80089c8 <__ieee754_pow+0x178>
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	b011      	add	sp, #68	@ 0x44
 80089be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c2:	f000 bd0f 	b.w	80093e4 <__ieee754_sqrt>
 80089c6:	2400      	movs	r4, #0
 80089c8:	4650      	mov	r0, sl
 80089ca:	4659      	mov	r1, fp
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	f000 fc69 	bl	80092a4 <fabs>
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	d127      	bne.n	8008a2a <__ieee754_pow+0x1da>
 80089da:	4a3e      	ldr	r2, [pc, #248]	@ (8008ad4 <__ieee754_pow+0x284>)
 80089dc:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 80089e0:	4594      	cmp	ip, r2
 80089e2:	d000      	beq.n	80089e6 <__ieee754_pow+0x196>
 80089e4:	bb0d      	cbnz	r5, 8008a2a <__ieee754_pow+0x1da>
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	da05      	bge.n	80089f8 <__ieee754_pow+0x1a8>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	2000      	movs	r0, #0
 80089f2:	4938      	ldr	r1, [pc, #224]	@ (8008ad4 <__ieee754_pow+0x284>)
 80089f4:	f7f7 fe9a 	bl	800072c <__aeabi_ddiv>
 80089f8:	2e00      	cmp	r6, #0
 80089fa:	f6bf af47 	bge.w	800888c <__ieee754_pow+0x3c>
 80089fe:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008a02:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008a06:	4325      	orrs	r5, r4
 8008a08:	d108      	bne.n	8008a1c <__ieee754_pow+0x1cc>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7f7 fba9 	bl	8000168 <__aeabi_dsub>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e79f      	b.n	800895c <__ieee754_pow+0x10c>
 8008a1c:	2c01      	cmp	r4, #1
 8008a1e:	f47f af35 	bne.w	800888c <__ieee754_pow+0x3c>
 8008a22:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a26:	4619      	mov	r1, r3
 8008a28:	e730      	b.n	800888c <__ieee754_pow+0x3c>
 8008a2a:	0ff2      	lsrs	r2, r6, #31
 8008a2c:	3a01      	subs	r2, #1
 8008a2e:	ea52 0c04 	orrs.w	ip, r2, r4
 8008a32:	d102      	bne.n	8008a3a <__ieee754_pow+0x1ea>
 8008a34:	4652      	mov	r2, sl
 8008a36:	465b      	mov	r3, fp
 8008a38:	e7e9      	b.n	8008a0e <__ieee754_pow+0x1be>
 8008a3a:	f04f 0900 	mov.w	r9, #0
 8008a3e:	3c01      	subs	r4, #1
 8008a40:	4314      	orrs	r4, r2
 8008a42:	bf14      	ite	ne
 8008a44:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008ad4 <__ieee754_pow+0x284>
 8008a48:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008ae0 <__ieee754_pow+0x290>
 8008a4c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008a50:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008a54:	f240 8104 	bls.w	8008c60 <__ieee754_pow+0x410>
 8008a58:	4b22      	ldr	r3, [pc, #136]	@ (8008ae4 <__ieee754_pow+0x294>)
 8008a5a:	429f      	cmp	r7, r3
 8008a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ad8 <__ieee754_pow+0x288>)
 8008a5e:	d913      	bls.n	8008a88 <__ieee754_pow+0x238>
 8008a60:	429d      	cmp	r5, r3
 8008a62:	d808      	bhi.n	8008a76 <__ieee754_pow+0x226>
 8008a64:	f1b8 0f00 	cmp.w	r8, #0
 8008a68:	da08      	bge.n	8008a7c <__ieee754_pow+0x22c>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	b011      	add	sp, #68	@ 0x44
 8008a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a72:	f000 bcb1 	b.w	80093d8 <__math_oflow>
 8008a76:	f1b8 0f00 	cmp.w	r8, #0
 8008a7a:	dcf6      	bgt.n	8008a6a <__ieee754_pow+0x21a>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	b011      	add	sp, #68	@ 0x44
 8008a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	f000 bca3 	b.w	80093ce <__math_uflow>
 8008a88:	429d      	cmp	r5, r3
 8008a8a:	d20c      	bcs.n	8008aa6 <__ieee754_pow+0x256>
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f7 ff92 	bl	80009bc <__aeabi_dcmplt>
 8008a98:	3800      	subs	r0, #0
 8008a9a:	bf18      	it	ne
 8008a9c:	2001      	movne	r0, #1
 8008a9e:	f1b8 0f00 	cmp.w	r8, #0
 8008aa2:	daec      	bge.n	8008a7e <__ieee754_pow+0x22e>
 8008aa4:	e7e2      	b.n	8008a6c <__ieee754_pow+0x21c>
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <__ieee754_pow+0x284>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	d91c      	bls.n	8008ae8 <__ieee754_pow+0x298>
 8008aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f7 ff82 	bl	80009bc <__aeabi_dcmplt>
 8008ab8:	3800      	subs	r0, #0
 8008aba:	bf18      	it	ne
 8008abc:	2001      	movne	r0, #1
 8008abe:	f1b8 0f00 	cmp.w	r8, #0
 8008ac2:	dcd3      	bgt.n	8008a6c <__ieee754_pow+0x21c>
 8008ac4:	e7db      	b.n	8008a7e <__ieee754_pow+0x22e>
 8008ac6:	bf00      	nop
 8008ac8:	fff00000 	.word	0xfff00000
 8008acc:	7ff00000 	.word	0x7ff00000
 8008ad0:	433fffff 	.word	0x433fffff
 8008ad4:	3ff00000 	.word	0x3ff00000
 8008ad8:	3fefffff 	.word	0x3fefffff
 8008adc:	3fe00000 	.word	0x3fe00000
 8008ae0:	bff00000 	.word	0xbff00000
 8008ae4:	43f00000 	.word	0x43f00000
 8008ae8:	4b59      	ldr	r3, [pc, #356]	@ (8008c50 <__ieee754_pow+0x400>)
 8008aea:	f7f7 fb3d 	bl	8000168 <__aeabi_dsub>
 8008aee:	a350      	add	r3, pc, #320	@ (adr r3, 8008c30 <__ieee754_pow+0x3e0>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	4604      	mov	r4, r0
 8008af6:	460d      	mov	r5, r1
 8008af8:	f7f7 fcee 	bl	80004d8 <__aeabi_dmul>
 8008afc:	a34e      	add	r3, pc, #312	@ (adr r3, 8008c38 <__ieee754_pow+0x3e8>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	4606      	mov	r6, r0
 8008b04:	460f      	mov	r7, r1
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fce5 	bl	80004d8 <__aeabi_dmul>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4682      	mov	sl, r0
 8008b12:	468b      	mov	fp, r1
 8008b14:	4620      	mov	r0, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	4b4e      	ldr	r3, [pc, #312]	@ (8008c54 <__ieee754_pow+0x404>)
 8008b1a:	f7f7 fcdd 	bl	80004d8 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	a147      	add	r1, pc, #284	@ (adr r1, 8008c40 <__ieee754_pow+0x3f0>)
 8008b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b28:	f7f7 fb1e 	bl	8000168 <__aeabi_dsub>
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	462b      	mov	r3, r5
 8008b30:	f7f7 fcd2 	bl	80004d8 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	2000      	movs	r0, #0
 8008b3a:	4947      	ldr	r1, [pc, #284]	@ (8008c58 <__ieee754_pow+0x408>)
 8008b3c:	f7f7 fb14 	bl	8000168 <__aeabi_dsub>
 8008b40:	4622      	mov	r2, r4
 8008b42:	4680      	mov	r8, r0
 8008b44:	4689      	mov	r9, r1
 8008b46:	462b      	mov	r3, r5
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f7f7 fcc4 	bl	80004d8 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	f7f7 fcbe 	bl	80004d8 <__aeabi_dmul>
 8008b5c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008c48 <__ieee754_pow+0x3f8>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fcb9 	bl	80004d8 <__aeabi_dmul>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	4659      	mov	r1, fp
 8008b6e:	f7f7 fafb 	bl	8000168 <__aeabi_dsub>
 8008b72:	2400      	movs	r4, #0
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4689      	mov	r9, r1
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 faf4 	bl	800016c <__adddf3>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	4620      	mov	r0, r4
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	f7f7 faec 	bl	8000168 <__aeabi_dsub>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4640      	mov	r0, r8
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 fae6 	bl	8000168 <__aeabi_dsub>
 8008b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ba0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008bac:	4606      	mov	r6, r0
 8008bae:	460f      	mov	r7, r1
 8008bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	4652      	mov	r2, sl
 8008bb8:	f7f7 fad6 	bl	8000168 <__aeabi_dsub>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	f7f7 fc8a 	bl	80004d8 <__aeabi_dmul>
 8008bc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4689      	mov	r9, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fc82 	bl	80004d8 <__aeabi_dmul>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 fac6 	bl	800016c <__adddf3>
 8008be0:	465b      	mov	r3, fp
 8008be2:	4606      	mov	r6, r0
 8008be4:	460f      	mov	r7, r1
 8008be6:	4652      	mov	r2, sl
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fc74 	bl	80004d8 <__aeabi_dmul>
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	4689      	mov	r9, r1
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 fab6 	bl	800016c <__adddf3>
 8008c00:	4b16      	ldr	r3, [pc, #88]	@ (8008c5c <__ieee754_pow+0x40c>)
 8008c02:	4604      	mov	r4, r0
 8008c04:	4299      	cmp	r1, r3
 8008c06:	460d      	mov	r5, r1
 8008c08:	468b      	mov	fp, r1
 8008c0a:	f340 81fd 	ble.w	8009008 <__ieee754_pow+0x7b8>
 8008c0e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008c12:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008c16:	4303      	orrs	r3, r0
 8008c18:	f000 81dc 	beq.w	8008fd4 <__ieee754_pow+0x784>
 8008c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7f7 feca 	bl	80009bc <__aeabi_dcmplt>
 8008c28:	3800      	subs	r0, #0
 8008c2a:	bf18      	it	ne
 8008c2c:	2001      	movne	r0, #1
 8008c2e:	e71d      	b.n	8008a6c <__ieee754_pow+0x21c>
 8008c30:	60000000 	.word	0x60000000
 8008c34:	3ff71547 	.word	0x3ff71547
 8008c38:	f85ddf44 	.word	0xf85ddf44
 8008c3c:	3e54ae0b 	.word	0x3e54ae0b
 8008c40:	55555555 	.word	0x55555555
 8008c44:	3fd55555 	.word	0x3fd55555
 8008c48:	652b82fe 	.word	0x652b82fe
 8008c4c:	3ff71547 	.word	0x3ff71547
 8008c50:	3ff00000 	.word	0x3ff00000
 8008c54:	3fd00000 	.word	0x3fd00000
 8008c58:	3fe00000 	.word	0x3fe00000
 8008c5c:	408fffff 	.word	0x408fffff
 8008c60:	4ad3      	ldr	r2, [pc, #844]	@ (8008fb0 <__ieee754_pow+0x760>)
 8008c62:	4032      	ands	r2, r6
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	f040 817a 	bne.w	8008f5e <__ieee754_pow+0x70e>
 8008c6a:	4bd2      	ldr	r3, [pc, #840]	@ (8008fb4 <__ieee754_pow+0x764>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f7f7 fc33 	bl	80004d8 <__aeabi_dmul>
 8008c72:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008c76:	460b      	mov	r3, r1
 8008c78:	151a      	asrs	r2, r3, #20
 8008c7a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008c7e:	4422      	add	r2, r4
 8008c80:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c82:	4acd      	ldr	r2, [pc, #820]	@ (8008fb8 <__ieee754_pow+0x768>)
 8008c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c88:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c92:	dd08      	ble.n	8008ca6 <__ieee754_pow+0x456>
 8008c94:	4ac9      	ldr	r2, [pc, #804]	@ (8008fbc <__ieee754_pow+0x76c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	f340 8163 	ble.w	8008f62 <__ieee754_pow+0x712>
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c9e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	00f3      	lsls	r3, r6, #3
 8008caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cac:	4bc4      	ldr	r3, [pc, #784]	@ (8008fc0 <__ieee754_pow+0x770>)
 8008cae:	4629      	mov	r1, r5
 8008cb0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	f7f7 fa51 	bl	8000168 <__aeabi_dsub>
 8008cc6:	4652      	mov	r2, sl
 8008cc8:	462b      	mov	r3, r5
 8008cca:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008cce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cd2:	f7f7 fa4b 	bl	800016c <__adddf3>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	2000      	movs	r0, #0
 8008cdc:	49b9      	ldr	r1, [pc, #740]	@ (8008fc4 <__ieee754_pow+0x774>)
 8008cde:	f7f7 fd25 	bl	800072c <__aeabi_ddiv>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cee:	f7f7 fbf3 	bl	80004d8 <__aeabi_dmul>
 8008cf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cf6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008cfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2200      	movs	r2, #0
 8008d02:	46ab      	mov	fp, r5
 8008d04:	106d      	asrs	r5, r5, #1
 8008d06:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008d10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d14:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	461d      	mov	r5, r3
 8008d20:	f7f7 fbda 	bl	80004d8 <__aeabi_dmul>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d2c:	f7f7 fa1c 	bl	8000168 <__aeabi_dsub>
 8008d30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	4620      	mov	r0, r4
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	f7f7 fa14 	bl	8000168 <__aeabi_dsub>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4650      	mov	r0, sl
 8008d46:	4659      	mov	r1, fp
 8008d48:	f7f7 fa0e 	bl	8000168 <__aeabi_dsub>
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	464b      	mov	r3, r9
 8008d50:	f7f7 fbc2 	bl	80004d8 <__aeabi_dmul>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fa04 	bl	8000168 <__aeabi_dsub>
 8008d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d64:	f7f7 fbb8 	bl	80004d8 <__aeabi_dmul>
 8008d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d70:	4610      	mov	r0, r2
 8008d72:	4619      	mov	r1, r3
 8008d74:	f7f7 fbb0 	bl	80004d8 <__aeabi_dmul>
 8008d78:	a37b      	add	r3, pc, #492	@ (adr r3, 8008f68 <__ieee754_pow+0x718>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	4604      	mov	r4, r0
 8008d80:	460d      	mov	r5, r1
 8008d82:	f7f7 fba9 	bl	80004d8 <__aeabi_dmul>
 8008d86:	a37a      	add	r3, pc, #488	@ (adr r3, 8008f70 <__ieee754_pow+0x720>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 f9ee 	bl	800016c <__adddf3>
 8008d90:	4622      	mov	r2, r4
 8008d92:	462b      	mov	r3, r5
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	a377      	add	r3, pc, #476	@ (adr r3, 8008f78 <__ieee754_pow+0x728>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 f9e5 	bl	800016c <__adddf3>
 8008da2:	4622      	mov	r2, r4
 8008da4:	462b      	mov	r3, r5
 8008da6:	f7f7 fb97 	bl	80004d8 <__aeabi_dmul>
 8008daa:	a375      	add	r3, pc, #468	@ (adr r3, 8008f80 <__ieee754_pow+0x730>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 f9dc 	bl	800016c <__adddf3>
 8008db4:	4622      	mov	r2, r4
 8008db6:	462b      	mov	r3, r5
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	a372      	add	r3, pc, #456	@ (adr r3, 8008f88 <__ieee754_pow+0x738>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 f9d3 	bl	800016c <__adddf3>
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	462b      	mov	r3, r5
 8008dca:	f7f7 fb85 	bl	80004d8 <__aeabi_dmul>
 8008dce:	a370      	add	r3, pc, #448	@ (adr r3, 8008f90 <__ieee754_pow+0x740>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	f7f7 f9ca 	bl	800016c <__adddf3>
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460f      	mov	r7, r1
 8008dde:	462b      	mov	r3, r5
 8008de0:	4620      	mov	r0, r4
 8008de2:	4629      	mov	r1, r5
 8008de4:	f7f7 fb78 	bl	80004d8 <__aeabi_dmul>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4630      	mov	r0, r6
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 fb72 	bl	80004d8 <__aeabi_dmul>
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	464b      	mov	r3, r9
 8008e00:	f7f7 f9b4 	bl	800016c <__adddf3>
 8008e04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e08:	f7f7 fb66 	bl	80004d8 <__aeabi_dmul>
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	462b      	mov	r3, r5
 8008e10:	f7f7 f9ac 	bl	800016c <__adddf3>
 8008e14:	4642      	mov	r2, r8
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	4649      	mov	r1, r9
 8008e20:	f7f7 fb5a 	bl	80004d8 <__aeabi_dmul>
 8008e24:	2200      	movs	r2, #0
 8008e26:	4b68      	ldr	r3, [pc, #416]	@ (8008fc8 <__ieee754_pow+0x778>)
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f7f7 f99e 	bl	800016c <__adddf3>
 8008e30:	4652      	mov	r2, sl
 8008e32:	465b      	mov	r3, fp
 8008e34:	f7f7 f99a 	bl	800016c <__adddf3>
 8008e38:	2400      	movs	r4, #0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4640      	mov	r0, r8
 8008e42:	4649      	mov	r1, r9
 8008e44:	f7f7 fb48 	bl	80004d8 <__aeabi_dmul>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	4689      	mov	r9, r1
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	4b5d      	ldr	r3, [pc, #372]	@ (8008fc8 <__ieee754_pow+0x778>)
 8008e54:	f7f7 f988 	bl	8000168 <__aeabi_dsub>
 8008e58:	4632      	mov	r2, r6
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	f7f7 f984 	bl	8000168 <__aeabi_dsub>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4650      	mov	r0, sl
 8008e66:	4659      	mov	r1, fp
 8008e68:	f7f7 f97e 	bl	8000168 <__aeabi_dsub>
 8008e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e70:	f7f7 fb32 	bl	80004d8 <__aeabi_dmul>
 8008e74:	4622      	mov	r2, r4
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e7e:	462b      	mov	r3, r5
 8008e80:	f7f7 fb2a 	bl	80004d8 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 f96e 	bl	800016c <__adddf3>
 8008e90:	2400      	movs	r4, #0
 8008e92:	4606      	mov	r6, r0
 8008e94:	460f      	mov	r7, r1
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 f965 	bl	800016c <__adddf3>
 8008ea2:	a33d      	add	r3, pc, #244	@ (adr r3, 8008f98 <__ieee754_pow+0x748>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	460d      	mov	r5, r1
 8008eac:	f7f7 fb14 	bl	80004d8 <__aeabi_dmul>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7f7 f954 	bl	8000168 <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 f94e 	bl	8000168 <__aeabi_dsub>
 8008ecc:	a334      	add	r3, pc, #208	@ (adr r3, 8008fa0 <__ieee754_pow+0x750>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 fb01 	bl	80004d8 <__aeabi_dmul>
 8008ed6:	a334      	add	r3, pc, #208	@ (adr r3, 8008fa8 <__ieee754_pow+0x758>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	f7f7 faf8 	bl	80004d8 <__aeabi_dmul>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4630      	mov	r0, r6
 8008eee:	4639      	mov	r1, r7
 8008ef0:	f7f7 f93c 	bl	800016c <__adddf3>
 8008ef4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ef6:	4b35      	ldr	r3, [pc, #212]	@ (8008fcc <__ieee754_pow+0x77c>)
 8008ef8:	2400      	movs	r4, #0
 8008efa:	4413      	add	r3, r2
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 f934 	bl	800016c <__adddf3>
 8008f04:	4682      	mov	sl, r0
 8008f06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f08:	468b      	mov	fp, r1
 8008f0a:	f7f7 fa7b 	bl	8000404 <__aeabi_i2d>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460f      	mov	r7, r1
 8008f12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f14:	4b2e      	ldr	r3, [pc, #184]	@ (8008fd0 <__ieee754_pow+0x780>)
 8008f16:	4413      	add	r3, r2
 8008f18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f22:	465b      	mov	r3, fp
 8008f24:	f7f7 f922 	bl	800016c <__adddf3>
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	f7f7 f91e 	bl	800016c <__adddf3>
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	f7f7 f91a 	bl	800016c <__adddf3>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	460d      	mov	r5, r1
 8008f40:	f7f7 f912 	bl	8000168 <__aeabi_dsub>
 8008f44:	4642      	mov	r2, r8
 8008f46:	464b      	mov	r3, r9
 8008f48:	f7f7 f90e 	bl	8000168 <__aeabi_dsub>
 8008f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f50:	f7f7 f90a 	bl	8000168 <__aeabi_dsub>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	e61c      	b.n	8008b98 <__ieee754_pow+0x348>
 8008f5e:	2400      	movs	r4, #0
 8008f60:	e68a      	b.n	8008c78 <__ieee754_pow+0x428>
 8008f62:	2601      	movs	r6, #1
 8008f64:	e6a0      	b.n	8008ca8 <__ieee754_pow+0x458>
 8008f66:	bf00      	nop
 8008f68:	4a454eef 	.word	0x4a454eef
 8008f6c:	3fca7e28 	.word	0x3fca7e28
 8008f70:	93c9db65 	.word	0x93c9db65
 8008f74:	3fcd864a 	.word	0x3fcd864a
 8008f78:	a91d4101 	.word	0xa91d4101
 8008f7c:	3fd17460 	.word	0x3fd17460
 8008f80:	518f264d 	.word	0x518f264d
 8008f84:	3fd55555 	.word	0x3fd55555
 8008f88:	db6fabff 	.word	0xdb6fabff
 8008f8c:	3fdb6db6 	.word	0x3fdb6db6
 8008f90:	33333303 	.word	0x33333303
 8008f94:	3fe33333 	.word	0x3fe33333
 8008f98:	e0000000 	.word	0xe0000000
 8008f9c:	3feec709 	.word	0x3feec709
 8008fa0:	dc3a03fd 	.word	0xdc3a03fd
 8008fa4:	3feec709 	.word	0x3feec709
 8008fa8:	145b01f5 	.word	0x145b01f5
 8008fac:	be3e2fe0 	.word	0xbe3e2fe0
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	43400000 	.word	0x43400000
 8008fb8:	0003988e 	.word	0x0003988e
 8008fbc:	000bb679 	.word	0x000bb679
 8008fc0:	08009bd0 	.word	0x08009bd0
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	40080000 	.word	0x40080000
 8008fcc:	08009bb0 	.word	0x08009bb0
 8008fd0:	08009bc0 	.word	0x08009bc0
 8008fd4:	a39a      	add	r3, pc, #616	@ (adr r3, 8009240 <__ieee754_pow+0x9f0>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 f8c5 	bl	800016c <__adddf3>
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fe8:	464b      	mov	r3, r9
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7f7 f8bb 	bl	8000168 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ffa:	f7f7 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f47f ae0c 	bne.w	8008c1c <__ieee754_pow+0x3cc>
 8009004:	4ba0      	ldr	r3, [pc, #640]	@ (8009288 <__ieee754_pow+0xa38>)
 8009006:	e022      	b.n	800904e <__ieee754_pow+0x7fe>
 8009008:	4ca0      	ldr	r4, [pc, #640]	@ (800928c <__ieee754_pow+0xa3c>)
 800900a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800900e:	42a3      	cmp	r3, r4
 8009010:	d919      	bls.n	8009046 <__ieee754_pow+0x7f6>
 8009012:	4b9f      	ldr	r3, [pc, #636]	@ (8009290 <__ieee754_pow+0xa40>)
 8009014:	440b      	add	r3, r1
 8009016:	4303      	orrs	r3, r0
 8009018:	d009      	beq.n	800902e <__ieee754_pow+0x7de>
 800901a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	f7f7 fccb 	bl	80009bc <__aeabi_dcmplt>
 8009026:	3800      	subs	r0, #0
 8009028:	bf18      	it	ne
 800902a:	2001      	movne	r0, #1
 800902c:	e527      	b.n	8008a7e <__ieee754_pow+0x22e>
 800902e:	4642      	mov	r2, r8
 8009030:	464b      	mov	r3, r9
 8009032:	f7f7 f899 	bl	8000168 <__aeabi_dsub>
 8009036:	4632      	mov	r2, r6
 8009038:	463b      	mov	r3, r7
 800903a:	f7f7 fcd3 	bl	80009e4 <__aeabi_dcmpge>
 800903e:	2800      	cmp	r0, #0
 8009040:	d1eb      	bne.n	800901a <__ieee754_pow+0x7ca>
 8009042:	4b94      	ldr	r3, [pc, #592]	@ (8009294 <__ieee754_pow+0xa44>)
 8009044:	e003      	b.n	800904e <__ieee754_pow+0x7fe>
 8009046:	4a94      	ldr	r2, [pc, #592]	@ (8009298 <__ieee754_pow+0xa48>)
 8009048:	4293      	cmp	r3, r2
 800904a:	f240 80e1 	bls.w	8009210 <__ieee754_pow+0x9c0>
 800904e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009052:	151b      	asrs	r3, r3, #20
 8009054:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009058:	fa4a fa03 	asr.w	sl, sl, r3
 800905c:	44da      	add	sl, fp
 800905e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009062:	488e      	ldr	r0, [pc, #568]	@ (800929c <__ieee754_pow+0xa4c>)
 8009064:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009068:	4108      	asrs	r0, r1
 800906a:	ea00 030a 	and.w	r3, r0, sl
 800906e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009072:	f1c1 0114 	rsb	r1, r1, #20
 8009076:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800907a:	4640      	mov	r0, r8
 800907c:	fa4a fa01 	asr.w	sl, sl, r1
 8009080:	f1bb 0f00 	cmp.w	fp, #0
 8009084:	4649      	mov	r1, r9
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	bfb8      	it	lt
 800908c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009090:	f7f7 f86a 	bl	8000168 <__aeabi_dsub>
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	2400      	movs	r4, #0
 800909a:	4632      	mov	r2, r6
 800909c:	463b      	mov	r3, r7
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 f863 	bl	800016c <__adddf3>
 80090a6:	a368      	add	r3, pc, #416	@ (adr r3, 8009248 <__ieee754_pow+0x9f8>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	4620      	mov	r0, r4
 80090ae:	460d      	mov	r5, r1
 80090b0:	f7f7 fa12 	bl	80004d8 <__aeabi_dmul>
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	e9cd 0100 	strd	r0, r1, [sp]
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 f852 	bl	8000168 <__aeabi_dsub>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 f84c 	bl	8000168 <__aeabi_dsub>
 80090d0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009250 <__ieee754_pow+0xa00>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 f9ff 	bl	80004d8 <__aeabi_dmul>
 80090da:	a35f      	add	r3, pc, #380	@ (adr r3, 8009258 <__ieee754_pow+0xa08>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	4680      	mov	r8, r0
 80090e2:	4689      	mov	r9, r1
 80090e4:	4620      	mov	r0, r4
 80090e6:	4629      	mov	r1, r5
 80090e8:	f7f7 f9f6 	bl	80004d8 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	f7f7 f83a 	bl	800016c <__adddf3>
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009104:	f7f7 f832 	bl	800016c <__adddf3>
 8009108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910c:	4680      	mov	r8, r0
 800910e:	4689      	mov	r9, r1
 8009110:	f7f7 f82a 	bl	8000168 <__aeabi_dsub>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f824 	bl	8000168 <__aeabi_dsub>
 8009120:	4642      	mov	r2, r8
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	464b      	mov	r3, r9
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f9d4 	bl	80004d8 <__aeabi_dmul>
 8009130:	a34b      	add	r3, pc, #300	@ (adr r3, 8009260 <__ieee754_pow+0xa10>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	f7f7 f9cd 	bl	80004d8 <__aeabi_dmul>
 800913e:	a34a      	add	r3, pc, #296	@ (adr r3, 8009268 <__ieee754_pow+0xa18>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f810 	bl	8000168 <__aeabi_dsub>
 8009148:	4622      	mov	r2, r4
 800914a:	462b      	mov	r3, r5
 800914c:	f7f7 f9c4 	bl	80004d8 <__aeabi_dmul>
 8009150:	a347      	add	r3, pc, #284	@ (adr r3, 8009270 <__ieee754_pow+0xa20>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f809 	bl	800016c <__adddf3>
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	f7f7 f9bb 	bl	80004d8 <__aeabi_dmul>
 8009162:	a345      	add	r3, pc, #276	@ (adr r3, 8009278 <__ieee754_pow+0xa28>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f6 fffe 	bl	8000168 <__aeabi_dsub>
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	f7f7 f9b2 	bl	80004d8 <__aeabi_dmul>
 8009174:	a342      	add	r3, pc, #264	@ (adr r3, 8009280 <__ieee754_pow+0xa30>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f6 fff7 	bl	800016c <__adddf3>
 800917e:	4622      	mov	r2, r4
 8009180:	462b      	mov	r3, r5
 8009182:	f7f7 f9a9 	bl	80004d8 <__aeabi_dmul>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f6 ffeb 	bl	8000168 <__aeabi_dsub>
 8009192:	4604      	mov	r4, r0
 8009194:	460d      	mov	r5, r1
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 f99b 	bl	80004d8 <__aeabi_dmul>
 80091a2:	2200      	movs	r2, #0
 80091a4:	e9cd 0100 	strd	r0, r1, [sp]
 80091a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f6 ffda 	bl	8000168 <__aeabi_dsub>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091bc:	f7f7 fab6 	bl	800072c <__aeabi_ddiv>
 80091c0:	4632      	mov	r2, r6
 80091c2:	4604      	mov	r4, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	463b      	mov	r3, r7
 80091c8:	4640      	mov	r0, r8
 80091ca:	4649      	mov	r1, r9
 80091cc:	f7f7 f984 	bl	80004d8 <__aeabi_dmul>
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	f7f6 ffca 	bl	800016c <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f6 ffc2 	bl	8000168 <__aeabi_dsub>
 80091e4:	4642      	mov	r2, r8
 80091e6:	464b      	mov	r3, r9
 80091e8:	f7f6 ffbe 	bl	8000168 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	2000      	movs	r0, #0
 80091f2:	492b      	ldr	r1, [pc, #172]	@ (80092a0 <__ieee754_pow+0xa50>)
 80091f4:	f7f6 ffb8 	bl	8000168 <__aeabi_dsub>
 80091f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80091fc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009200:	da09      	bge.n	8009216 <__ieee754_pow+0x9c6>
 8009202:	4652      	mov	r2, sl
 8009204:	f000 f854 	bl	80092b0 <scalbn>
 8009208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920c:	f7ff bb89 	b.w	8008922 <__ieee754_pow+0xd2>
 8009210:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009214:	e740      	b.n	8009098 <__ieee754_pow+0x848>
 8009216:	4621      	mov	r1, r4
 8009218:	e7f6      	b.n	8009208 <__ieee754_pow+0x9b8>
 800921a:	2000      	movs	r0, #0
 800921c:	4920      	ldr	r1, [pc, #128]	@ (80092a0 <__ieee754_pow+0xa50>)
 800921e:	f7ff bb35 	b.w	800888c <__ieee754_pow+0x3c>
 8009222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009226:	f7ff bb31 	b.w	800888c <__ieee754_pow+0x3c>
 800922a:	4650      	mov	r0, sl
 800922c:	4659      	mov	r1, fp
 800922e:	f7ff bb2d 	b.w	800888c <__ieee754_pow+0x3c>
 8009232:	460c      	mov	r4, r1
 8009234:	f7ff bb87 	b.w	8008946 <__ieee754_pow+0xf6>
 8009238:	2400      	movs	r4, #0
 800923a:	f7ff bb69 	b.w	8008910 <__ieee754_pow+0xc0>
 800923e:	bf00      	nop
 8009240:	652b82fe 	.word	0x652b82fe
 8009244:	3c971547 	.word	0x3c971547
 8009248:	00000000 	.word	0x00000000
 800924c:	3fe62e43 	.word	0x3fe62e43
 8009250:	fefa39ef 	.word	0xfefa39ef
 8009254:	3fe62e42 	.word	0x3fe62e42
 8009258:	0ca86c39 	.word	0x0ca86c39
 800925c:	be205c61 	.word	0xbe205c61
 8009260:	72bea4d0 	.word	0x72bea4d0
 8009264:	3e663769 	.word	0x3e663769
 8009268:	c5d26bf1 	.word	0xc5d26bf1
 800926c:	3ebbbd41 	.word	0x3ebbbd41
 8009270:	af25de2c 	.word	0xaf25de2c
 8009274:	3f11566a 	.word	0x3f11566a
 8009278:	16bebd93 	.word	0x16bebd93
 800927c:	3f66c16c 	.word	0x3f66c16c
 8009280:	5555553e 	.word	0x5555553e
 8009284:	3fc55555 	.word	0x3fc55555
 8009288:	40900000 	.word	0x40900000
 800928c:	4090cbff 	.word	0x4090cbff
 8009290:	3f6f3400 	.word	0x3f6f3400
 8009294:	4090cc00 	.word	0x4090cc00
 8009298:	3fe00000 	.word	0x3fe00000
 800929c:	fff00000 	.word	0xfff00000
 80092a0:	3ff00000 	.word	0x3ff00000

080092a4 <fabs>:
 80092a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80092a8:	4619      	mov	r1, r3
 80092aa:	4770      	bx	lr
 80092ac:	0000      	movs	r0, r0
	...

080092b0 <scalbn>:
 80092b0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80092b4:	4616      	mov	r6, r2
 80092b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092ba:	4683      	mov	fp, r0
 80092bc:	468c      	mov	ip, r1
 80092be:	460b      	mov	r3, r1
 80092c0:	b982      	cbnz	r2, 80092e4 <scalbn+0x34>
 80092c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80092c6:	4303      	orrs	r3, r0
 80092c8:	d035      	beq.n	8009336 <scalbn+0x86>
 80092ca:	4b2d      	ldr	r3, [pc, #180]	@ (8009380 <scalbn+0xd0>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	f7f7 f903 	bl	80004d8 <__aeabi_dmul>
 80092d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009384 <scalbn+0xd4>)
 80092d4:	4683      	mov	fp, r0
 80092d6:	429e      	cmp	r6, r3
 80092d8:	468c      	mov	ip, r1
 80092da:	da0d      	bge.n	80092f8 <scalbn+0x48>
 80092dc:	a324      	add	r3, pc, #144	@ (adr r3, 8009370 <scalbn+0xc0>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	e019      	b.n	8009318 <scalbn+0x68>
 80092e4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80092e8:	42ba      	cmp	r2, r7
 80092ea:	d109      	bne.n	8009300 <scalbn+0x50>
 80092ec:	4602      	mov	r2, r0
 80092ee:	f7f6 ff3d 	bl	800016c <__adddf3>
 80092f2:	4683      	mov	fp, r0
 80092f4:	468c      	mov	ip, r1
 80092f6:	e01e      	b.n	8009336 <scalbn+0x86>
 80092f8:	460b      	mov	r3, r1
 80092fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092fe:	3a36      	subs	r2, #54	@ 0x36
 8009300:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009304:	428e      	cmp	r6, r1
 8009306:	dd0a      	ble.n	800931e <scalbn+0x6e>
 8009308:	a31b      	add	r3, pc, #108	@ (adr r3, 8009378 <scalbn+0xc8>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	4665      	mov	r5, ip
 8009310:	f363 051e 	bfi	r5, r3, #0, #31
 8009314:	4629      	mov	r1, r5
 8009316:	481c      	ldr	r0, [pc, #112]	@ (8009388 <scalbn+0xd8>)
 8009318:	f7f7 f8de 	bl	80004d8 <__aeabi_dmul>
 800931c:	e7e9      	b.n	80092f2 <scalbn+0x42>
 800931e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009322:	4432      	add	r2, r6
 8009324:	428a      	cmp	r2, r1
 8009326:	dcef      	bgt.n	8009308 <scalbn+0x58>
 8009328:	2a00      	cmp	r2, #0
 800932a:	dd08      	ble.n	800933e <scalbn+0x8e>
 800932c:	f36f 531e 	bfc	r3, #20, #11
 8009330:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009334:	46ac      	mov	ip, r5
 8009336:	4658      	mov	r0, fp
 8009338:	4661      	mov	r1, ip
 800933a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800933e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009342:	da09      	bge.n	8009358 <scalbn+0xa8>
 8009344:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009348:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800934c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009350:	480e      	ldr	r0, [pc, #56]	@ (800938c <scalbn+0xdc>)
 8009352:	f041 011f 	orr.w	r1, r1, #31
 8009356:	e7c1      	b.n	80092dc <scalbn+0x2c>
 8009358:	3236      	adds	r2, #54	@ 0x36
 800935a:	f36f 531e 	bfc	r3, #20, #11
 800935e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009362:	4658      	mov	r0, fp
 8009364:	4629      	mov	r1, r5
 8009366:	2200      	movs	r2, #0
 8009368:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <scalbn+0xe0>)
 800936a:	e7d5      	b.n	8009318 <scalbn+0x68>
 800936c:	f3af 8000 	nop.w
 8009370:	c2f8f359 	.word	0xc2f8f359
 8009374:	01a56e1f 	.word	0x01a56e1f
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	43500000 	.word	0x43500000
 8009384:	ffff3cb0 	.word	0xffff3cb0
 8009388:	8800759c 	.word	0x8800759c
 800938c:	c2f8f359 	.word	0xc2f8f359
 8009390:	3c900000 	.word	0x3c900000

08009394 <with_errno>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	4616      	mov	r6, r2
 800939c:	f7fd f920 	bl	80065e0 <__errno>
 80093a0:	4629      	mov	r1, r5
 80093a2:	6006      	str	r6, [r0, #0]
 80093a4:	4620      	mov	r0, r4
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <xflow>:
 80093a8:	b513      	push	{r0, r1, r4, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	b10c      	cbz	r4, 80093b6 <xflow+0xe>
 80093b2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80093b6:	e9cd 2300 	strd	r2, r3, [sp]
 80093ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093be:	f7f7 f88b 	bl	80004d8 <__aeabi_dmul>
 80093c2:	2222      	movs	r2, #34	@ 0x22
 80093c4:	b002      	add	sp, #8
 80093c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ca:	f7ff bfe3 	b.w	8009394 <with_errno>

080093ce <__math_uflow>:
 80093ce:	2200      	movs	r2, #0
 80093d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80093d4:	f7ff bfe8 	b.w	80093a8 <xflow>

080093d8 <__math_oflow>:
 80093d8:	2200      	movs	r2, #0
 80093da:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80093de:	f7ff bfe3 	b.w	80093a8 <xflow>
	...

080093e4 <__ieee754_sqrt>:
 80093e4:	4a65      	ldr	r2, [pc, #404]	@ (800957c <__ieee754_sqrt+0x198>)
 80093e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	438a      	bics	r2, r1
 80093ec:	4606      	mov	r6, r0
 80093ee:	460f      	mov	r7, r1
 80093f0:	460b      	mov	r3, r1
 80093f2:	4604      	mov	r4, r0
 80093f4:	d10e      	bne.n	8009414 <__ieee754_sqrt+0x30>
 80093f6:	4602      	mov	r2, r0
 80093f8:	f7f7 f86e 	bl	80004d8 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	f7f6 feb2 	bl	800016c <__adddf3>
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	4630      	mov	r0, r6
 800940e:	4639      	mov	r1, r7
 8009410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	2900      	cmp	r1, #0
 8009416:	dc0c      	bgt.n	8009432 <__ieee754_sqrt+0x4e>
 8009418:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800941c:	4302      	orrs	r2, r0
 800941e:	d0f5      	beq.n	800940c <__ieee754_sqrt+0x28>
 8009420:	b189      	cbz	r1, 8009446 <__ieee754_sqrt+0x62>
 8009422:	4602      	mov	r2, r0
 8009424:	f7f6 fea0 	bl	8000168 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	f7f7 f97e 	bl	800072c <__aeabi_ddiv>
 8009430:	e7ea      	b.n	8009408 <__ieee754_sqrt+0x24>
 8009432:	150a      	asrs	r2, r1, #20
 8009434:	d115      	bne.n	8009462 <__ieee754_sqrt+0x7e>
 8009436:	2100      	movs	r1, #0
 8009438:	e009      	b.n	800944e <__ieee754_sqrt+0x6a>
 800943a:	0ae3      	lsrs	r3, r4, #11
 800943c:	3a15      	subs	r2, #21
 800943e:	0564      	lsls	r4, r4, #21
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0fa      	beq.n	800943a <__ieee754_sqrt+0x56>
 8009444:	e7f7      	b.n	8009436 <__ieee754_sqrt+0x52>
 8009446:	460a      	mov	r2, r1
 8009448:	e7fa      	b.n	8009440 <__ieee754_sqrt+0x5c>
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	3101      	adds	r1, #1
 800944e:	02d8      	lsls	r0, r3, #11
 8009450:	d5fb      	bpl.n	800944a <__ieee754_sqrt+0x66>
 8009452:	1e48      	subs	r0, r1, #1
 8009454:	1a12      	subs	r2, r2, r0
 8009456:	f1c1 0020 	rsb	r0, r1, #32
 800945a:	fa24 f000 	lsr.w	r0, r4, r0
 800945e:	4303      	orrs	r3, r0
 8009460:	408c      	lsls	r4, r1
 8009462:	2700      	movs	r7, #0
 8009464:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009468:	2116      	movs	r1, #22
 800946a:	07d2      	lsls	r2, r2, #31
 800946c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009470:	463a      	mov	r2, r7
 8009472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800947a:	bf5c      	itt	pl
 800947c:	005b      	lslpl	r3, r3, #1
 800947e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009482:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009486:	bf58      	it	pl
 8009488:	0064      	lslpl	r4, r4, #1
 800948a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800948e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009492:	0064      	lsls	r4, r4, #1
 8009494:	1815      	adds	r5, r2, r0
 8009496:	429d      	cmp	r5, r3
 8009498:	bfde      	ittt	le
 800949a:	182a      	addle	r2, r5, r0
 800949c:	1b5b      	suble	r3, r3, r5
 800949e:	183f      	addle	r7, r7, r0
 80094a0:	0fe5      	lsrs	r5, r4, #31
 80094a2:	3901      	subs	r1, #1
 80094a4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80094a8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80094ac:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80094b0:	d1f0      	bne.n	8009494 <__ieee754_sqrt+0xb0>
 80094b2:	460d      	mov	r5, r1
 80094b4:	2620      	movs	r6, #32
 80094b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80094ba:	4293      	cmp	r3, r2
 80094bc:	eb00 0c01 	add.w	ip, r0, r1
 80094c0:	dc02      	bgt.n	80094c8 <__ieee754_sqrt+0xe4>
 80094c2:	d113      	bne.n	80094ec <__ieee754_sqrt+0x108>
 80094c4:	45a4      	cmp	ip, r4
 80094c6:	d811      	bhi.n	80094ec <__ieee754_sqrt+0x108>
 80094c8:	f1bc 0f00 	cmp.w	ip, #0
 80094cc:	eb0c 0100 	add.w	r1, ip, r0
 80094d0:	da3e      	bge.n	8009550 <__ieee754_sqrt+0x16c>
 80094d2:	2900      	cmp	r1, #0
 80094d4:	db3c      	blt.n	8009550 <__ieee754_sqrt+0x16c>
 80094d6:	f102 0e01 	add.w	lr, r2, #1
 80094da:	1a9b      	subs	r3, r3, r2
 80094dc:	4672      	mov	r2, lr
 80094de:	45a4      	cmp	ip, r4
 80094e0:	bf88      	it	hi
 80094e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80094e6:	eba4 040c 	sub.w	r4, r4, ip
 80094ea:	4405      	add	r5, r0
 80094ec:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80094f0:	3e01      	subs	r6, #1
 80094f2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80094f6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80094fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80094fe:	d1dc      	bne.n	80094ba <__ieee754_sqrt+0xd6>
 8009500:	431c      	orrs	r4, r3
 8009502:	d01a      	beq.n	800953a <__ieee754_sqrt+0x156>
 8009504:	4c1e      	ldr	r4, [pc, #120]	@ (8009580 <__ieee754_sqrt+0x19c>)
 8009506:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8009584 <__ieee754_sqrt+0x1a0>
 800950a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800950e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009512:	f7f6 fe29 	bl	8000168 <__aeabi_dsub>
 8009516:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4650      	mov	r0, sl
 8009520:	4659      	mov	r1, fp
 8009522:	f7f7 fa55 	bl	80009d0 <__aeabi_dcmple>
 8009526:	b140      	cbz	r0, 800953a <__ieee754_sqrt+0x156>
 8009528:	e9d4 0100 	ldrd	r0, r1, [r4]
 800952c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009530:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009534:	d10e      	bne.n	8009554 <__ieee754_sqrt+0x170>
 8009536:	4635      	mov	r5, r6
 8009538:	3701      	adds	r7, #1
 800953a:	107b      	asrs	r3, r7, #1
 800953c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009540:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009544:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009548:	086b      	lsrs	r3, r5, #1
 800954a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800954e:	e75b      	b.n	8009408 <__ieee754_sqrt+0x24>
 8009550:	4696      	mov	lr, r2
 8009552:	e7c2      	b.n	80094da <__ieee754_sqrt+0xf6>
 8009554:	f7f6 fe0a 	bl	800016c <__adddf3>
 8009558:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	f7f7 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8009568:	b120      	cbz	r0, 8009574 <__ieee754_sqrt+0x190>
 800956a:	1cab      	adds	r3, r5, #2
 800956c:	bf08      	it	eq
 800956e:	3701      	addeq	r7, #1
 8009570:	3502      	adds	r5, #2
 8009572:	e7e2      	b.n	800953a <__ieee754_sqrt+0x156>
 8009574:	1c6b      	adds	r3, r5, #1
 8009576:	f023 0501 	bic.w	r5, r3, #1
 800957a:	e7de      	b.n	800953a <__ieee754_sqrt+0x156>
 800957c:	7ff00000 	.word	0x7ff00000
 8009580:	08009be8 	.word	0x08009be8
 8009584:	08009be0 	.word	0x08009be0

08009588 <_init>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

08009594 <_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr
